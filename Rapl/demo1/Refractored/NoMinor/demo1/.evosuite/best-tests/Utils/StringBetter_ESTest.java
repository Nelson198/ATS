/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 15:41:54 GMT 2019
 */

package utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import utils.StringBetter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringBetter_ESTest extends StringBetter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      StringBetter stringBetter1 = stringBetter0.blue();
      stringBetter1.orange();
      StringBetter stringBetter2 = stringBetter1.bold();
      StringBetter stringBetter3 = stringBetter0.show_cursor();
      stringBetter3.repeat(2866);
      stringBetter0.under();
      StringBetter stringBetter4 = stringBetter2.blink();
      StringBetter stringBetter5 = stringBetter4.grey();
      stringBetter5.repeat(0);
      StringBetter stringBetter6 = stringBetter5.show_cursor();
      StringBetter stringBetter7 = stringBetter6.under();
      stringBetter0.toString();
      stringBetter7.hide_cursor();
      StringBetter stringBetter8 = stringBetter2.show_cursor();
      stringBetter6.blue();
      StringBetter stringBetter9 = stringBetter8.red();
      stringBetter6.repeat(0);
      StringBetter stringBetter10 = stringBetter7.roxo();
      StringBetter stringBetter11 = stringBetter10.black();
      stringBetter11.white();
      stringBetter11.orange();
      stringBetter11.repeat(0);
      stringBetter0.toString();
      stringBetter9.append("fd");
      stringBetter2.blue();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("*.J~2vtShaENjX,");
      StringBetter stringBetter1 = stringBetter0.blink();
      stringBetter0.orange();
      stringBetter1.orange();
      StringBetter stringBetter2 = stringBetter1.append("\u001B[1m");
      StringBetter stringBetter3 = stringBetter2.grey();
      StringBetter stringBetter4 = stringBetter3.repeat(2815);
      // Undeclared exception!
      stringBetter4.repeat(2784);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.grey();
      StringBetter stringBetter2 = stringBetter1.green();
      StringBetter stringBetter3 = stringBetter2.hide_cursor();
      StringBetter stringBetter4 = stringBetter3.under();
      StringBetter stringBetter5 = stringBetter4.bold();
      stringBetter5.green();
      stringBetter3.black();
      stringBetter0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blink();
      StringBetter stringBetter2 = stringBetter1.hide_cursor();
      stringBetter1.blue();
      StringBetter stringBetter3 = stringBetter1.show_cursor();
      StringBetter stringBetter4 = stringBetter0.cyan();
      stringBetter2.white();
      stringBetter4.repeat(1);
      stringBetter3.hide_cursor();
      stringBetter0.getStr();
      stringBetter0.blue();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.grey();
      StringBetter stringBetter2 = stringBetter1.bold();
      StringBetter stringBetter3 = stringBetter2.blue();
      stringBetter2.cyan();
      StringBetter stringBetter4 = stringBetter3.under();
      StringBetter stringBetter5 = stringBetter4.under();
      stringBetter5.bold();
      StringBetter stringBetter6 = stringBetter3.append(".=A");
      StringBetter stringBetter7 = stringBetter6.blue();
      StringBetter stringBetter8 = stringBetter3.append((String) null);
      int int0 = 5138;
      StringBetter stringBetter9 = stringBetter8.repeat(5138);
      stringBetter9.white();
      StringBetter stringBetter10 = stringBetter6.orange();
      stringBetter10.cyan();
      StringBetter stringBetter11 = stringBetter10.black();
      stringBetter11.white();
      // Undeclared exception!
      stringBetter7.repeat(5138);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blink();
      StringBetter stringBetter2 = stringBetter1.append("y2B)9-");
      StringBetter stringBetter3 = stringBetter2.cyan();
      StringBetter stringBetter4 = stringBetter3.roxo();
      stringBetter4.cyan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.cyan();
      StringBetter stringBetter2 = stringBetter1.white();
      StringBetter stringBetter3 = stringBetter2.bold();
      stringBetter3.show_cursor();
      stringBetter3.bold();
      stringBetter1.under();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.black();
      StringBetter stringBetter2 = stringBetter1.repeat(177);
      StringBetter stringBetter3 = stringBetter2.red();
      StringBetter stringBetter4 = stringBetter3.under();
      StringBetter stringBetter5 = stringBetter4.cyan();
      stringBetter5.show_cursor();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.hide_cursor();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[?25l", stringBetter1.getStr());
      assertEquals("\u001B[?25l", stringBetter1.toString());
      assertNotNull(stringBetter1);
      
      StringBetter stringBetter2 = stringBetter1.repeat((-1));
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertEquals("", stringBetter0.toString());
      assertEquals("", stringBetter0.getStr());
      assertEquals("\u001B[?25l", stringBetter1.getStr());
      assertEquals("\u001B[?25l", stringBetter1.toString());
      assertEquals("", stringBetter2.toString());
      assertEquals("", stringBetter2.getStr());
      assertNotNull(stringBetter2);
      
      StringBetter stringBetter3 = stringBetter0.append((String) null);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertSame(stringBetter3, stringBetter0);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertEquals("null", stringBetter0.getStr());
      assertEquals("null", stringBetter0.toString());
      assertEquals("null", stringBetter3.getStr());
      assertEquals("null", stringBetter3.toString());
      assertNotNull(stringBetter3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blue();
      StringBetter stringBetter2 = stringBetter1.green();
      StringBetter stringBetter3 = stringBetter2.orange();
      StringBetter stringBetter4 = stringBetter3.red();
      StringBetter stringBetter5 = stringBetter4.show_cursor();
      stringBetter5.blue();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.orange();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
      assertNotNull(stringBetter1);
      
      StringBetter stringBetter2 = stringBetter1.bold();
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertNotNull(stringBetter2);
      
      String string0 = stringBetter2.toString();
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", string0);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertNotNull(string0);
      
      StringBetter stringBetter3 = stringBetter2.roxo();
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[35m\u001B[1m\u001B[33m\u001B[0m\u001B[0m\u001B[0m", stringBetter3.toString());
      assertEquals("\u001B[35m\u001B[1m\u001B[33m\u001B[0m\u001B[0m\u001B[0m", stringBetter3.getStr());
      assertNotNull(stringBetter3);
      
      String string1 = stringBetter1.getStr();
      assertEquals("\u001B[33m\u001B[0m", string1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("p 'De");
      StringBetter stringBetter1 = stringBetter0.blink();
      stringBetter1.bold();
      stringBetter1.hide_cursor();
      stringBetter1.roxo();
      stringBetter1.bold();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      stringBetter0.show_cursor();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.black();
      StringBetter stringBetter2 = stringBetter1.blue();
      stringBetter2.blink();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("47UB&]Mu*7k7}qD-h");
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.toString());
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.under();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.toString());
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.toString());
      assertNotNull(stringBetter1);
      
      StringBetter stringBetter2 = stringBetter1.under();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.toString());
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertNotNull(stringBetter2);
      
      StringBetter stringBetter3 = stringBetter2.roxo();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter1);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.toString());
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[35m\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m\u001B[0m", stringBetter3.toString());
      assertEquals("\u001B[35m\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m\u001B[0m", stringBetter3.getStr());
      assertNotNull(stringBetter3);
      
      StringBetter stringBetter4 = stringBetter3.green();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter1);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.toString());
      assertEquals("47UB&]Mu*7k7}qD-h", stringBetter0.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[35m\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m\u001B[0m", stringBetter3.toString());
      assertEquals("\u001B[35m\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[32m\u001B[35m\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertEquals("\u001B[32m\u001B[35m\u001B[4m\u001B[4m47UB&]Mu*7k7}qD-h\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertNotNull(stringBetter4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("");
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.hide_cursor();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[?25l", stringBetter1.toString());
      assertEquals("\u001B[?25l", stringBetter1.getStr());
      assertNotNull(stringBetter1);
      
      StringBetter stringBetter2 = stringBetter0.grey();
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[37m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[37m\u001B[0m", stringBetter2.toString());
      assertNotNull(stringBetter2);
      
      StringBetter stringBetter3 = stringBetter2.white();
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertEquals("", stringBetter0.getStr());
      assertEquals("", stringBetter0.toString());
      assertEquals("\u001B[37m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[37m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[38m\u001B[37m\u001B[0m\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[38m\u001B[37m\u001B[0m\u001B[0m", stringBetter3.toString());
      assertNotNull(stringBetter3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("1#*");
      assertEquals("1#*", stringBetter0.toString());
      assertEquals("1#*", stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.black();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertEquals("1#*", stringBetter0.toString());
      assertEquals("1#*", stringBetter0.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.toString());
      assertNotNull(stringBetter1);
      
      StringBetter stringBetter2 = stringBetter1.green();
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertEquals("1#*", stringBetter0.toString());
      assertEquals("1#*", stringBetter0.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m", stringBetter2.toString());
      assertNotNull(stringBetter2);
      
      StringBetter stringBetter3 = stringBetter2.bold();
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter0);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertEquals("1#*", stringBetter0.toString());
      assertEquals("1#*", stringBetter0.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[1m\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m\u001B[0m", stringBetter3.toString());
      assertNotNull(stringBetter3);
      
      StringBetter stringBetter4 = stringBetter3.grey();
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter0, stringBetter4);
      assertNotSame(stringBetter0, stringBetter3);
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter3);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter4);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter0);
      assertNotSame(stringBetter2, stringBetter3);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter4);
      assertNotSame(stringBetter3, stringBetter1);
      assertNotSame(stringBetter3, stringBetter2);
      assertNotSame(stringBetter3, stringBetter4);
      assertNotSame(stringBetter3, stringBetter0);
      assertNotSame(stringBetter4, stringBetter3);
      assertNotSame(stringBetter4, stringBetter2);
      assertNotSame(stringBetter4, stringBetter0);
      assertNotSame(stringBetter4, stringBetter1);
      assertFalse(stringBetter0.equals((Object)stringBetter2));
      assertFalse(stringBetter0.equals((Object)stringBetter3));
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter3));
      assertFalse(stringBetter1.equals((Object)stringBetter2));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter3));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter1));
      assertFalse(stringBetter3.equals((Object)stringBetter2));
      assertFalse(stringBetter3.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter3));
      assertFalse(stringBetter4.equals((Object)stringBetter2));
      assertFalse(stringBetter4.equals((Object)stringBetter0));
      assertFalse(stringBetter4.equals((Object)stringBetter1));
      assertEquals("1#*", stringBetter0.toString());
      assertEquals("1#*", stringBetter0.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[30m1#*\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertEquals("\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[1m\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m\u001B[0m", stringBetter3.getStr());
      assertEquals("\u001B[1m\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m\u001B[0m", stringBetter3.toString());
      assertEquals("\u001B[37m\u001B[1m\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter4.toString());
      assertEquals("\u001B[37m\u001B[1m\u001B[32m\u001B[30m1#*\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter4.getStr());
      assertNotNull(stringBetter4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertNotNull(stringBetter0);
      
      StringBetter stringBetter1 = stringBetter0.cyan();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter1, stringBetter0);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[36mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[36mnull\u001B[0m", stringBetter1.getStr());
      assertNotNull(stringBetter1);
      
      StringBetter stringBetter2 = stringBetter1.red();
      assertNotSame(stringBetter0, stringBetter1);
      assertNotSame(stringBetter0, stringBetter2);
      assertNotSame(stringBetter1, stringBetter2);
      assertNotSame(stringBetter1, stringBetter0);
      assertNotSame(stringBetter2, stringBetter1);
      assertNotSame(stringBetter2, stringBetter0);
      assertFalse(stringBetter0.equals((Object)stringBetter1));
      assertFalse(stringBetter1.equals((Object)stringBetter0));
      assertFalse(stringBetter2.equals((Object)stringBetter1));
      assertFalse(stringBetter2.equals((Object)stringBetter0));
      assertNull(stringBetter0.toString());
      assertNull(stringBetter0.getStr());
      assertEquals("\u001B[36mnull\u001B[0m", stringBetter1.toString());
      assertEquals("\u001B[36mnull\u001B[0m", stringBetter1.getStr());
      assertEquals("\u001B[31m\u001B[36mnull\u001B[0m\u001B[0m", stringBetter2.toString());
      assertEquals("\u001B[31m\u001B[36mnull\u001B[0m\u001B[0m", stringBetter2.getStr());
      assertNotNull(stringBetter2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.append((String) null);
      StringBetter stringBetter2 = stringBetter1.roxo();
      StringBetter stringBetter3 = stringBetter1.blue();
      StringBetter stringBetter4 = stringBetter0.orange();
      StringBetter stringBetter5 = stringBetter1.under();
      assertEquals("\u001B[4mnull\u001B[0m", stringBetter5.toString());
      
      StringBetter stringBetter6 = stringBetter0.cyan();
      String string0 = stringBetter4.getStr();
      assertEquals("\u001B[33mnull\u001B[0m", string0);
      
      StringBetter stringBetter7 = stringBetter6.green();
      StringBetter stringBetter8 = stringBetter7.hide_cursor();
      StringBetter stringBetter9 = stringBetter8.repeat(1);
      assertEquals("\u001B[32m\u001B[36mnull\u001B[0m\u001B[0m\u001B[?25l", stringBetter9.toString());
      
      stringBetter7.toString();
      StringBetter stringBetter10 = stringBetter7.black();
      StringBetter stringBetter11 = stringBetter10.black();
      assertEquals("\u001B[30m\u001B[30m\u001B[32m\u001B[36mnull\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter11.toString());
      
      stringBetter2.repeat((-2816));
      assertEquals("\u001B[35mnull\u001B[0m", stringBetter2.toString());
      
      StringBetter stringBetter12 = stringBetter0.blink();
      assertEquals("\u001B[5mnull\u001B[0m", stringBetter12.toString());
      
      stringBetter3.blue();
      assertEquals("\u001B[34mnull\u001B[0m", stringBetter3.getStr());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.white();
      StringBetter stringBetter2 = stringBetter1.cyan();
      StringBetter stringBetter3 = stringBetter2.red();
      StringBetter stringBetter4 = stringBetter0.black();
      assertEquals("\u001B[30m\u001B[0m", stringBetter4.getStr());
      
      StringBetter stringBetter5 = stringBetter3.roxo();
      StringBetter stringBetter6 = stringBetter5.bold();
      assertEquals("\u001B[1m\u001B[35m\u001B[31m\u001B[36m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
      
      StringBetter stringBetter7 = stringBetter2.blue();
      StringBetter stringBetter8 = stringBetter2.show_cursor();
      StringBetter stringBetter9 = stringBetter8.grey();
      assertEquals("\u001B[37m\u001B[36m\u001B[38m\u001B[0m\u001B[0m\u001B[?25h\u001B[0m", stringBetter9.toString());
      
      stringBetter1.getStr();
      StringBetter stringBetter10 = stringBetter7.white();
      assertEquals("\u001B[38m\u001B[34m\u001B[36m\u001B[38m\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter10.getStr());
      
      String string0 = stringBetter1.getStr();
      assertEquals("\u001B[38m\u001B[0m", string0);
  }
}
