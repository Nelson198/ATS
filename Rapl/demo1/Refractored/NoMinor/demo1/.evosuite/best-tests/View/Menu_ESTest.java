/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 15:40:25 GMT 2019
 */

package view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import view.Menu;
import view.view_model.RateOwnerCar;
import view.view_model.TimeInterval;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Menu_ESTest extends Menu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("2");
      // Undeclared exception!
      try { 
        menu0.pendingRateShow("(P>s", "(P>s", 0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("3");
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.AddCar;
      menu0.selectOption(menu_MenuInd0);
      menu0.parser();
      assertEquals(Menu.MenuInd.AddCar, menu0.getMenu());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.walkingDistanceRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.top10ClientsShow(linkedList0, "");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("NOwi:3A8[s5=o`+q");
      // Undeclared exception!
      try { 
        menu0.specificCarRent("\u001B[1m");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("Organizado por dist\u00E2ncia");
      Menu menu0 = new Menu();
      menu0.showString((String) null);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Menu menu0 = new Menu();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      SystemInUtil.addInputLine("|Cj;0=*G+ofnG");
      menu0.rentalHistoryShow(timeInterval0, linkedList0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("%k?1r&gK<Iq");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("%k?1r&gK<Iq");
      SystemInUtil.addInputLine("d/aG8");
      SystemInUtil.addInputLine("d/aG8");
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("d/aG8");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine("L3m");
      SystemInUtil.addInputLine("L3m");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("7qnuu9@qdz8");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.autonomyCarRent("(");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      menu0.showRentalRate("Client Rating");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("3");
      menu0.showRentalRate("Client RaNting");
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Menu menu0 = new Menu();
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      menu1.selectOption(menu_MenuInd0);
      assertFalse(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("6C6fU8&hN*|[7Px");
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.reviewRentShow("_Gx_ :@6@N[S8I9)*", (-4265), linkedList0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("");
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.reviewRentShow("taK4>X1kYq*(", (-2038), linkedList0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("");
      Menu menu0 = new Menu();
      menu0.newLogin((String) null);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine("l/4oq[GHlJ");
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.carOverviewShow("", linkedList0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.carOverviewShow("", linkedList0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemInUtil.addInputLine(",`");
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("m(U8}5");
      try { 
        menu0.walkingDistanceRent("D6`");
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, "");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.add(list0);
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, "Inicio da Viagem");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine("s`g<$`M@6");
      Menu menu0 = new Menu();
      // Undeclared exception!
      menu0.showRentalRate((String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.selectOption((Menu.MenuInd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.reviewRentShow(",4wiu8}0>dJhaF8", 13, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      linkedList0.push(list0);
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("4/x", (-2117960770), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow((TimeInterval) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Menu menu0 = new Menu();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      linkedList0.push(list0);
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemInUtil.addInputLine("\"-KS");
      Menu menu0 = new Menu();
      try { 
        menu0.pendingRateShow("\"-KS", "q~jAFqIdBAUyUDdp9h", 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("iXO)5tw.;xBS}M;vB");
      try { 
        menu0.getTimeInterval((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("Client rating:", (List<List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedHashSet0);
      linkedList0.add(list0);
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("[O!", linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SystemInUtil.addInputLine(", <*Az}$@{m#f#");
      SystemInUtil.addInputLine("ZaB2n");
      Menu menu0 = new Menu();
      try { 
        menu0.autonomyCarRent(", <*Az}$@{m#f#");
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Rentals;
      menu0.selectOption(menu_MenuInd0);
      menu0.selectOption(menu_MenuInd0);
      Menu menu1 = menu0.back();
      assertTrue(menu1.getRun());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Top10Clients;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Owner;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      linkedList0.add((List<String>) null);
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Menu menu0 = new Menu();
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      boolean boolean0 = menu1.getRun();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      RateOwnerCar rateOwnerCar0 = menu0.pendingRateShow("(", "(", 671);
      assertEquals(0, rateOwnerCar0.getOwnerRate());
      assertEquals(0, rateOwnerCar0.getCarRate());
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      Menu menu1 = menu0.parser();
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("3");
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Rentals;
      menu0.selectOption(menu_MenuInd0);
      menu0.parser();
      assertEquals(Menu.MenuInd.CheapestNear, menu0.getMenu());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("3");
      Menu menu1 = menu0.parser();
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SystemInUtil.addInputLine("e");
      Menu menu0 = new Menu();
      assertTrue(menu0.getRun());
      
      menu0.parser();
      assertFalse(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("W]te05 Qer.)2a!EN[", 481, (List<List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Menu menu0 = new Menu();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Menu menu0 = new Menu();
      boolean boolean0 = menu0.getRun();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.getTimeInterval("0g");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.showString("%.2f");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Menu menu0 = new Menu();
      menu0.getMenu();
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      menu0.selectOption(menu_MenuInd0);
      String string0 = menu0.toString();
      assertEquals("\u001Bc\u001B[31m\t--Initial/Client--\n\u001B[0m\n\n1- Hist\u00F3rico de alugueres\n2- Avalia\u00E7\u00F5es pendentes\n3- Alugar um carro\n4- UMCarroJ\u00E1 Challenge\n", string0);
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("[O!", linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.newLogin("electric");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.showRentalRate("Z#+@T+K[G");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SystemInUtil.addInputLine("Za2n");
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.simpleCarRent("Za2n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }
}
