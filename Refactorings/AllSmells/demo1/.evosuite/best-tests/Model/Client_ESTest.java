/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 15:40:22 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Utils.Point;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double((-2874.9158446));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "sm", "RPg'N;z[J(sBx!HWF]*", "RPg'N;z[J(sBx!HWF]*", "C >Pi;]B9PH[", (-800));
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("RPg'N;z[J(sBx!HWF]*", (Owner) null, car_CarType0, 0.0, 0.0, (-800), (-1), point0, "sm");
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        client0.rate(rental0, (-800), 967);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double((-171.220339381));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "vT.", "vT.", "vT.", "vT.", 3948);
      Point point1 = client0.getPos();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Custo Estimado: ", "Custo Estimado: ", "Custo Estimado: ", "Custo Estimado: ", 0);
      Owner owner0 = new Owner("|Z", "s.@GDRqp3RX N!n!0z+", "s.@GDRqp3RX N!n!0z+", 0, "9kwyzbbl1\"ULD@P");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("(0.00, 0.00)", owner0, car_CarType0, 0.0, (-654.6350730333326), 0, 0, point0, "Custo Estimado: ");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      List<Rental> list0 = client0.getPendingRates();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "O carro necessita de ser abastecido\n", "sN?.?.yXV", "O carro necessita de ser abastecido\n", "", 8);
      client0.rate(0);
      Client client1 = client0.clone();
      assertNotSame(client0, client1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "y-", "Tempo a p\u00E9      ", "", " Gcf9mwcd9(5%P?", (-59));
      client0.rate((-59));
      Client client1 = client0.clone();
      assertNotSame(client0, client1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Client client0 = new Client((Point) null, "", "", "U Td9R", "", 0);
      // Undeclared exception!
      try { 
        client0.getPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double((-170.43247241536568));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "vT.", "vT.", "vT.", "vT.", 3934);
      Client client1 = client0.clone();
      client1.setPos(point0);
      Owner owner0 = new Owner("(-170.43, -170.43)", "(-170.43, -170.43)", "(-170.43, -170.43)", 3934, "(-170.43, -170.43)");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("(-170.43, -170.43)", owner0, car_CarType0, (-170.43247241536568), (-170.43247241536568), (-170.43247241536568), 3934, point0, "vT.");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, client1, point0);
      client1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        client1.equals(client0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Model.Client", "Model.Client", "Model.Client", "Model.Client", 2933);
      client0.setPos((Point) null);
      Client client1 = new Client(point0, "Model.Client", "Model.Client", "(1.00, 1.00)", "(1.00, 1.00)", 2737);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Client client0 = new Client((Point) null, "", "", "", "", (-762));
      // Undeclared exception!
      try { 
        client0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double((-171.220339381));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "vT.", "vT.", "vT.", "vT.", 3948);
      Client client1 = client0.clone();
      client1.setPos(point0);
      Owner owner0 = new Owner("xL`S&%", "tt:L:9`pfY1", "1|V\rj0,G", 3948, "D`clOx");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("", owner0, car_CarType0, (-171.220339381), (-979.6437555479166), 1866.42, 0, point0, "vT.");
      Rental rental0 = new Rental(car0, client1, point0);
      client1.addPendingRental(rental0);
      boolean boolean0 = client1.equals(client0);
      assertFalse(client1.equals((Object)client0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double((-171.220339381));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "vT.", "vT.", "vT.", "vT.", 3948);
      Client client1 = client0.clone();
      assertFalse(client1.equals((Object)client0));
      
      client1.setPos(point0);
      boolean boolean0 = client1.equals(client0);
      assertTrue(client1.equals((Object)client0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-170.43247241536568));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "vT.", "vT.", "vT.", "vT.", 3934);
      boolean boolean0 = client0.equals("vT.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double(778.181828);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", (String) null, "", (-1615));
      boolean boolean0 = client0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Model.Client", "Model.Client", "Model.Client", "Model.Client", 2933);
      boolean boolean0 = client0.equals(client0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Model.Client", "Model.Client", "Model.Client", "Model.Client", 2933);
      List<Rental> list0 = client0.getPendingRates();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(778.181828);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", (String) null, "", (-1615));
      Owner owner0 = new Owner("P`%(-:r", (String) null, "P`%(-:r", (-1615), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("Dono:           ", owner0, car_CarType0, 2385.671150049484, 0.0, 778.181828, (-1615), point0, (String) null);
      Rental rental0 = new Rental(car0, client0, point0);
      client0.rate(rental0, (-1615), (-1615));
      assertEquals((-1615), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double((-170.43247241536568));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "vT.", "vT.", "vT.", "vT.", 3934);
      Client client1 = client0.clone();
      boolean boolean0 = client1.equals(client0);
      assertFalse(boolean0);
  }
}
