/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 15:41:37 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Model.UMCarroJa;
import Model.User;
import Utils.Point;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UMCarroJa_ESTest extends UMCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Rental rental0 = null;
      // Undeclared exception!
      try { 
        uMCarroJa0.rent((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 1638, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      owner0.addCar((Car) null);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, 0, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "p7e/NeX";
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "CKgPh+]253Xm";
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1.0));
      try { 
        uMCarroJa0.save("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      int int0 = (-31);
      Owner owner0 = new Owner("", "", ",*'7d~SB?*WD~*", (-31), "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-31));
      Car.CarType car_CarType1 = Car.CarType.hybrid;
      Double double1 = new Double(0.0);
      Point point0 = new Point(double1, double0);
      Car car0 = new Car("", owner0, car_CarType1, (-31), (-31), 3694.0, (-31), point0, "");
      Car car1 = car0.clone();
      Client client0 = new Client(point0, (String) null, "", ",*'7d~SB?*WD~*", "Na'OZikd>)*C#{", (-31));
      Point point1 = point0.clone();
      Rental rental0 = new Rental(car1, client0, point1);
      owner0.refuse(rental0);
      Double double2 = new Double((-3154.840844125));
      Point point2 = new Point(double0, double2);
      Car car2 = new Car("", owner0, car_CarType0, (-31), (-31), (-31), (-31), point2, "z@6fh 6-eWm65jG}");
      Car car3 = car2.clone();
      Client client1 = new Client(point2, "z@6fh 6-eWm65jG}", "z@6fh 6-eWm65jG}", "", "", (-31));
      client1.clone();
      Rental rental1 = new Rental(car3, (Client) null, point0);
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(owner0, rental1, 1207);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("~'h_08?}0n/C8zd", "ac@@\u0006$Tlm`", "ac@@\u0006$Tlm`", 0, "%.2f Horas");
      Owner owner1 = owner0.clone();
      Owner owner2 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("ac@@\u0006$Tlm`", owner1, car_CarType0, 0, 0.0, 0, (-2833), point0, "S])Zo");
      owner2.addCar(car0);
      uMCarroJa0.getRentalListOwner(owner1);
      uMCarroJa0.refil(owner2, 0);
      assertNotSame(owner0, owner2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Model.UMCarroJa");
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = Double.valueOf(911.51147);
      Double double1 = new Double(0.0);
      Point point0 = new Point(double0, double1);
      Double.isFinite(1739.0);
      Client client0 = new Client(point0, "Model.UMCarroJa", "Model.UMCarroJa", "k", "Model.UMCarroJa", 9);
      Client client1 = client0.clone();
      client1.getPendingRates();
      uMCarroJa0.getRentalListClient(client1);
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.3);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Client client0 = new Client(point1, "", "bP", "", "bP", 161);
      point0.toString();
      point0.toString();
      Double.min(954.927397, 954.927397);
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      double double0 = 3497.88924242725;
      Double double1 = new Double(3497.88924242725);
      Double double2 = new Double(6082.323485596163);
      Point point0 = new Point(double1, double2);
      int int0 = 2171;
      Client client0 = new Client(point0, "", "", "", "", 2171);
      uMCarroJa0.addUser(client0);
      String string0 = "!) v";
      Owner owner0 = new Owner("", "@gmail.com", "!) v", 2171, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      point0.toString();
      int int1 = 2669;
      Car car0 = new Car("@gmail.com", owner0, car_CarType0, 0.1, 0.1, 0.1, 2669, point0, "");
      car0.swapState();
      Car car1 = car0.clone();
      Rental rental0 = new Rental(car1, client0, point0);
      rental0.toParsableUserString();
      uMCarroJa0.rate(client0, rental0, 2669, 2171);
      uMCarroJa0.getRentalListClient(client0);
      uMCarroJa0.getBestClients();
      car1.warnings();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      uMCarroJa0.getTotalBilledCar(car1, localDateTime0, localDateTime0);
      uMCarroJa0.getBestClientsTravel();
      Double double3 = new Double(0.0);
      Point point1 = new Point(double2, double3);
      try { 
        uMCarroJa0.rental("", point1, "!) v", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      uMCarroJa0.getBestClientsTimes();
      String string0 = "/b;B]";
      String string1 = "Exceptions.InvalidUserException";
      int int0 = (-1723);
      Owner owner0 = new Owner("/b;B]", "/b;B]", "Exceptions.InvalidUserException", (-1723), "/b;B]");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil((Owner) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("GUTDbcmG");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "GUTDbcmG";
      try { 
        UMCarroJa.read("GUTDbcmG");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 21003700
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(2732.51087923);
      Double double1 = new Double(2732.51087923);
      Point point0 = new Point(double0, double1);
      Client client0 = new Client(point0, "eja", "eja", "eja", "i$'|", (-2126));
      Client client1 = client0.clone();
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(client1, (Rental) null, (-2126), (-2126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1700;
      Owner owner0 = new Owner("mg]Uvw XY8hxL=q7Jf", "mg]Uvw XY8hxL=q7Jf", "mg]Uvw XY8hxL=q7Jf", 1700, "mg]Uvw XY8hxL=q7Jf");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, (-1682), 1700);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(3497.88924242725);
      Double double1 = new Double(6082.323485596163);
      Point point0 = new Point(double0, double1);
      Client client0 = new Client(point0, "", "", "", "", 2171);
      uMCarroJa0.addUser(client0);
      String string0 = "!) v";
      Owner owner0 = new Owner("", ";do", "!) v", 2171, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      point0.toString();
      Car car0 = new Car(";do", owner0, car_CarType0, 0.1, 0.1, 0.1, 2669, point0, "");
      car0.swapState();
      Car car1 = car0.clone();
      Rental rental0 = new Rental(car1, client0, point0);
      uMCarroJa0.rate(client0, rental0, 2669, 2171);
      uMCarroJa0.getRentalListClient(client0);
      uMCarroJa0.getBestClients();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      car1.warnings();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      uMCarroJa0.getTotalBilledCar(car1, localDateTime0, localDateTime0);
      uMCarroJa0.getBestClientsTravel();
      String string1 = "`~JHSILRW5oh1>";
      Double double2 = new Double(0.0);
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar(owner0, "", car_CarType0, 0.0, 2669, 2669, 2669, point0, "`~JHSILRW5oh1>");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Model.Client cannot be cast to Model.Owner
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "^";
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string1 = ":M[xv@";
      Owner owner0 = new Owner("$o[", ":M[xv@", ":M[xv@", (-4137), "$o[");
      Owner owner1 = owner0.clone();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      uMCarroJa0.getRentalListOwner(owner1, localDateTime0, localDateTime0);
      Owner owner2 = new Owner("$o[", ":M[xv@", ":M[xv@", 112, "");
      owner2.clone();
      Point point0 = null;
      try {
        point0 = new Point((Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertTrue(list0.isEmpty());
      
      uMCarroJa0.getBestClients();
      double double0 = (-621.79105);
      Double double1 = new Double((-621.79105));
      Point point0 = new Point(double1, double1);
      Point point1 = point0.clone();
      point1.clone();
      String string0 = "_FsXC0Ji7~GXr";
      int int0 = 0;
      point0.toString();
      Client client0 = new Client(point1, "_FsXC0Ji7~GXr", "electric", "electric", "Exceptions.UnknownCompareTypeException", 0);
      client0.clone();
      // Undeclared exception!
      try { 
        uMCarroJa0.save((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("cdg&|5&FnY~", "(v69o:/%(iZ-dYh9td", "(v69o:/%(iZ-dYh9td", (-2644), "@gmail.com");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, (-558));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "xy", "PU=%", 0, "xy");
      Owner owner1 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Dono:           ", owner0, car_CarType0, 0.0, 678.88, (-191.0), 0, point0, "@gmail.com");
      Car car1 = car0.clone();
      Rental rental0 = new Rental(car1, (Client) null, point0);
      uMCarroJa0.refuse(owner1, rental0);
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState((Owner) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "electric", "`>C[v_i", "N%0:", "Model.UMCarroJa", (-2227));
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      uMCarroJa0.getRentalListClient(client0, localDateTime0, localDateTime0);
      double double1 = 1.0;
      Car.CarType car_CarType0 = Car.CarType.any;
      try { 
        uMCarroJa0.rental(client0, point0, 0.0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "(";
      try { 
        uMCarroJa0.save("(");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("@gmail.com");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Point point0 = null;
      int int0 = (-899);
      Client client0 = new Client((Point) null, "]g+Vi?Uc%Y", "$=P*(MikmIrs/Mg)h", "$=P*(MikmIrs/Mg)h", "", (-899));
      Car.CarType car_CarType0 = Car.CarType.electric;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental(client0, (Point) null, "\"&9", car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "Oct AMWR\"s";
      String string1 = null;
      String string2 = "Exceptions.CarExistsException";
      try { 
        uMCarroJa0.logIn("Exceptions.CarExistsException", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "<*t\\oJ1sDTv4)R9)T";
      String string1 = "8mI>J{7jLRQ/lJ";
      int int0 = (-1488);
      String string2 = "";
      Owner owner0 = new Owner("t1.H", "<*toJ1sDTv4)R9)T", "8mI>J{7jLRQ/lJ", (-1488), "");
      Owner owner1 = owner0.clone();
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner1, (-1488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("~'h_08?}0n/C8zd", "ac@@\u0006$Tlm`", "ac@@\u0006$Tlm`", 0, "%.2f Horas");
      Owner owner1 = owner0.clone();
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "";
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1296.02194));
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.addCar("Exceptions.CarExistsException", "", car_CarType0, (-1313.5228118943), (-1313.5228118943), 0.0, 1342, point0, "Exceptions.CarExistsException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("@gmail.com", "I5}yQX", "", (-2809), "I5}yQX");
      owner0.clone();
      Double double0 = new Double((-2809));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Car.CarType car_CarType0 = Car.CarType.electric;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Client) null, point1, 0.15, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", ",*'7d~SB?*WD~*", 0, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0);
      Double double1 = new Double((-3154.840844125));
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, "z@6fh 6-eWm65jG}");
      Car car1 = car0.clone();
      Client client0 = new Client(point0, "z@6fh 6-eWm65jG}", "z@6fh 6-eWm65jG}", "", "", 0);
      Client client1 = client0.clone();
      Rental rental0 = new Rental(car1, client1, point0);
      uMCarroJa0.rate(owner0, rental0, 1207);
      assertEquals(1207, client1.getRates());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Model.Rentals", "Model.Rentals", "Model.Rentals", 0, (String) null);
      Owner owner1 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.15);
      Double double1 = new Double(0);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("", owner0, car_CarType0, 0, 1.0, 0, 0, point0, (String) null);
      Client client0 = new Client(point0, (String) null, "Model.Rentals", (String) null, "@gmail.com", (-114));
      Client client1 = client0.clone();
      Rental rental0 = new Rental(car0, client1, point0);
      owner0.refuse(rental0);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner1, 1309, 0.1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1309, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Model.Rentals", "Model.Rentals", "Model.Rentals", 0, (String) null);
      Owner owner1 = new Owner((String) null, "Model.Rentals", "Model.Rentals", 0, "Model.Rentals");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.15);
      Double double1 = new Double(0);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("", owner0, car_CarType0, 0, 1.0, 0, 0, point0, (String) null);
      Client client0 = new Client(point0, (String) null, "Model.Rentals", (String) null, "@gmail.com", (-114));
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.refuse(rental0);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner1, 1309, 0.1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1309, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "";
      String string1 = "oq[Mp4>PN";
      Car.CarType car_CarType0 = Car.CarType.gas;
      int int0 = 0;
      Double double0 = new Double((-1099.6));
      Double double1 = new Double((-1099.6));
      Point point0 = new Point(double0, double1);
      point0.toString();
      point0.clone();
      Point point1 = point0.clone();
      try { 
        uMCarroJa0.addCar("", "oq[Mp4>PN", car_CarType0, 0.0, 0.0, 0.0, 0, point1, "oq[Mp4>PN");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "";
      try { 
        uMCarroJa0.logIn("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(1305.5);
      Double double1 = new Double(0.0);
      Point point0 = new Point(double0, double1);
      Point point1 = point0.clone();
      try { 
        uMCarroJa0.addCar("Z", "Z", car_CarType0, (-1.0), 1.2, 1.2, (-1930), point1, "Z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "Exceptions.UnknownCarTypeException";
      try { 
        uMCarroJa0.logIn("Exceptions.UnknownCarTypeException", "Exceptions.UnknownCarTypeException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        UMCarroJa.read((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("MaisPerto", "", (String) null, 1812, "MaisPerto");
      uMCarroJa0.getRentalListOwner(owner0);
      owner0.clone();
      Double double0 = new Double(1812);
      Double double1 = new Double(1812);
      Point point0 = new Point(double0, double1);
      Client client0 = new Client(point0, "Sv'jvB2", (String) null, "d", "", (-2640));
      Client client1 = client0.clone();
      try { 
        uMCarroJa0.rental(point0, "Tempo Total: ", client1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Model.UMCarroJa", (Owner) null, car_CarType0, (-3025.6), (-3025.6), (-3025.6), 0, point0, "SG{5u[Bm:W4bJ;");
      Point point1 = point0.clone();
      Client client0 = new Client(point1, "", "Model.Rentals", "SG{5u[Bm:W4bJ;", (String) null, 0);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        uMCarroJa0.refuse((Owner) null, rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-2560.289533));
      Point point0 = new Point(double0, double0);
      int int0 = 2359;
      Client client0 = new Client(point0, "", "VFtj8Y@M-F &s", "", "", 2359);
      UMCarroJa uMCarroJa1 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.gas;
      try { 
        uMCarroJa1.rental(client0, point0, 747.757220044, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner(";<rMnV?mKsJ)2bFQ+Z'", ";<rMnV?mKsJ)2bFQ+Z'", ";<rMnV?mKsJ)2bFQ+Z'", (-71), ";<rMnV?mKsJ)2bFQ+Z'");
      String string0 = "=P/v291Q,\"T?f&dH";
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(2424.4448282);
      Point point0 = new Point(double0, double0);
      try { 
        uMCarroJa0.addCar(owner0, "=P/v291Q,\"T?f&dH", car_CarType0, (-71), (-71), (-71), (-71), point0, ";<rMnV?mKsJ)2bFQ+Z'");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Client client0 = null;
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Point point0 = new Point(double0, double1);
      Point point1 = point0.clone();
      double double2 = 0.0;
      Car.CarType car_CarType0 = Car.CarType.electric;
      try { 
        uMCarroJa0.rental(point1, 0.0, car_CarType0, (Client) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(2873.48560329042);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Client client0 = new Client(point0, "vKBkZEci ~=RUT", "", (String) null, "", 3);
      Client client1 = client0.clone();
      try { 
        uMCarroJa0.rental(point0, 332.0119099, car_CarType0, client1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(3497.88924242725);
      Double double1 = new Double(6082.323485596163);
      Point point0 = new Point(double0, double1);
      Client client0 = new Client(point0, "", "", "", "", 2171);
      uMCarroJa0.addUser(client0);
      Owner owner0 = new Owner("", "9@PCDkMY`<*Vv&3&K", "!) v", 2171, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      point0.toString();
      Car car0 = new Car("9@PCDkMY`<*Vv&3&K", owner0, car_CarType0, 0.1, 0.1, 0.1, 2669, point0, "");
      car0.swapState();
      Car car1 = car0.clone();
      Rental rental0 = new Rental(car1, client0, point0);
      uMCarroJa0.rate(client0, rental0, 2669, 2171);
      uMCarroJa0.getRentalListClient(client0);
      uMCarroJa0.getBestClients();
      car1.warnings();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      uMCarroJa0.getTotalBilledCar(car1, localDateTime0, localDateTime0);
      uMCarroJa0.getBestClientsTravel();
      Double double2 = new Double(0.0);
      Point point1 = new Point(double1, double2);
      try { 
        uMCarroJa0.rental("`~JHSILRW5oh1>", point1, "!) v", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      String string0 = "@gmail.com";
      Point point2 = new Point(double0, double0);
      Client client0 = new Client(point2, "MaisBarato", "@gmail.com", "MaisBarato", "wL$ ESB", (-2744));
      Owner owner0 = new Owner("vvC\"Y7539", "MaisPerto", "2;OLj:s*Os]:Nj9q", 3582, "vvC\"Y7539");
      Car.CarType car_CarType0 = Car.CarType.any;
      Point point3 = point1.clone();
      Car car0 = new Car("MaisBarato", owner0, car_CarType0, 1534.5106191, 1.0, 0.0, (-2744), point3, "R6Oz");
      Car car1 = car0.clone();
      Rental rental0 = new Rental(car1, client0, point3);
      uMCarroJa0.rate(client0, rental0, 3582, (-2744));
      Car.CarType car_CarType1 = Car.CarType.gas;
      try { 
        uMCarroJa0.rental("MaisBarato", point1, "@gmail.com", car_CarType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(2397.6771);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Client client0 = new Client(point1, "", "o^i}S7T;;LHQJ,S", "", "", 414);
      uMCarroJa0.addUser(client0);
      Double double1 = new Double((-936.17));
      Point point2 = new Point(double1, double1);
      Car.CarType car_CarType0 = Car.CarType.any;
      try { 
        uMCarroJa0.rental("any", point2, "any", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = "";
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Car.CarType car_CarType0 = Car.CarType.electric;
      try { 
        uMCarroJa0.rental("", point1, "", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      uMCarroJa0.getBestClients();
      Double double0 = new Double((-3641.4559));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Client client0 = new Client(point0, "&ak=>g}aD*=n%r", "CZ](tOOi:`Y4 yo'6Df", (String) null, "Xf/%.5T IcUtNz3^=jf", 0);
      Client client1 = client0.clone();
      try { 
        uMCarroJa0.rental(point1, "&ak=>g}aD*=n%r", client1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(1.0);
      Double double1 = new Double(2691.2762775);
      Point point0 = new Point(double0, double1);
      Point point1 = point0.clone();
      Client client0 = new Client(point0, "", "", "=rr", "", 0);
      Client client1 = client0.clone();
      try { 
        uMCarroJa0.rental(point1, "", client1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "]r#8$!+gm_x", "Model.UMCarroJa", "Ti", "Ti", 0);
      try { 
        uMCarroJa0.rental(point0, "]r#8$!+gm_x", client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = null;
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-1492.79));
      Double double1 = new Double(0.0);
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("~D%y5nW3}|,!K(T", (Owner) null, car_CarType0, (-1492.79), (-1698.495428072994), (-1.0), (-1522788922), point0, "");
      Car car1 = car0.clone();
      uMCarroJa0.getTotalBilledCar(car1);
      Client client0 = new Client(point0, "Model.UMCarroJa", "Model.UMCarroJa", "", "~D%y5nW3}|,!K(T", (-1522788922));
      Client client1 = client0.clone();
      Car.CarType car_CarType1 = Car.CarType.electric;
      try { 
        uMCarroJa0.rental(client1, point0, "~D%y5nW3}|,!K(T", car_CarType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = ">ib";
      int int0 = 1302;
      try { 
        uMCarroJa0.rate(">ib", 1302);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      try { 
        UMCarroJa.read("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "3j\"M0j%F", 0, "|)");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0.0, 0, 0.0, 0, point0, "");
      Point point1 = point0.clone();
      Client client0 = new Client(point1, "3j\"M0j%F", (String) null, "-W!(_OU6D2", "", 1408);
      Client client1 = client0.clone();
      Rental rental0 = new Rental(car0, client1, point0);
      uMCarroJa0.rent(rental0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("cAu7i75[LtpEnQd+", "cAu7i75[LtpEnQd+", "-*Q]|yh1uipUi", 3670, "-*Q]|yh1uipUi");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Car car0 = new Car("-*Q]|yh1uipUi", owner0, car_CarType0, 0.4, 0.4, 0.4, 3670, point1, "Tempo Estimado: ");
      double double1 = uMCarroJa0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-770.113723074));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Client client0 = new Client(point1, "", "pf/;", "TU;SY", "i", 2716);
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      try { 
        uMCarroJa0.rental(client0, point1, "#Y{GJ(qY(jvm", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string0 = null;
      int int0 = 0;
      try { 
        uMCarroJa0.rate((String) null, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        UMCarroJa.read("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1.0));
      Double double1 = new Double(961.0);
      Point point0 = new Point(double0, double1);
      String string0 = "Exceptions.UnknownCarTypeException";
      Client client0 = new Client(point0, "Fall", "", "Fall", "Exceptions.UnknownCarTypeException", (-1));
      Car.CarType car_CarType0 = Car.CarType.any;
      try { 
        uMCarroJa0.rental(client0, point0, 961.0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.any;
      Client client0 = new Client((Point) null, "!,WRz>-ua`Y|-0.1G;z", "!,WRz>-ua`Y|-0.1G;z", "", "", 622);
      try { 
        uMCarroJa0.rental((Point) null, 748.507, car_CarType0, client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "^";
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      String string1 = ":M[xv@";
      Owner owner0 = new Owner("$o[", ":M[xv@", ":M[xv@", (-4137), "$o[");
      Owner owner1 = owner0.clone();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      uMCarroJa0.getRentalListOwner(owner1, localDateTime0, localDateTime0);
      Owner owner2 = new Owner("$o[", ":M[xv@", ":M[xv@", 112, "^");
      owner2.clone();
      Point point0 = null;
      try {
        point0 = new Point((Double) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utils.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(2168.228782304386);
      Point point0 = new Point(double0, double0);
      String string0 = ")=|*>j+3>q0Mv~JP";
      Client client0 = new Client(point0, ")=|*>j+3>q0Mv~JP", ")=|*>j+3>q0Mv~JP", "#3vX", "#3vX", 0);
      client0.getPos();
      uMCarroJa0.getRentalListClient(client0);
      uMCarroJa0.getBestClients();
      Random.setNextRandom(0);
      String string1 = "Exceptions.InvalidUserException";
      try { 
        uMCarroJa0.rate("Exceptions.InvalidUserException", (-1348));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      point0.clone();
      double double1 = 299.8604994;
      Car.CarType car_CarType0 = Car.CarType.electric;
      String string0 = "h~xdzrCC";
      Client client0 = null;
      try { 
        uMCarroJa0.rental(point0, "h~xdzrCC", (Client) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "Q";
      try { 
        UMCarroJa.read("Q");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", ",*'7d~SB?*WD~*", (-31), "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-31));
      Car.CarType car_CarType1 = Car.CarType.hybrid;
      Double double1 = new Double(0.0);
      Point point0 = new Point(double1, double0);
      Car car0 = new Car("", owner0, car_CarType1, (-31), (-31), 3694.0, (-31), point0, "");
      point0.clone();
      Car car1 = car0.clone();
      owner0.getCars();
      Client client0 = new Client(point0, (String) null, "", ",*'7d~SB?*WD~*", "Na'OZikd>)*C#{", (-31));
      Point point1 = point0.clone();
      Rental rental0 = new Rental(car1, client0, point1);
      owner0.refuse(rental0);
      Double double2 = new Double((-3154.840844125));
      Point point2 = new Point(double0, double2);
      Car car2 = new Car("", owner0, car_CarType0, (-31), (-31), (-31), (-31), point2, "z@6fh 6-eWm65jG}");
      Car car3 = car2.clone();
      Client client1 = new Client(point2, "z@6fh 6-eWm65jG}", "z@6fh 6-eWm65jG}", "", "", (-31));
      Client client2 = client1.clone();
      Rental rental1 = new Rental(car3, client2, point2);
      uMCarroJa0.rate(owner0, rental1, 1207);
      Random.setNextRandom((-31));
      uMCarroJa0.getTotalBilledCar(car0);
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, (-31));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "", (String) null, (-730), "CKgPh+]253Xm");
      Month month0 = Month.APRIL;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-792), month0, (-792), (-730), (-792), 60);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -792
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.3);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      String string0 = "";
      point0.toString();
      Client client0 = new Client(point1, "", "bP", "", "", 161);
      point0.toString();
      point0.toString();
      Double.min(954.927397, 954.927397);
      uMCarroJa0.getRentalListClient(client0, (LocalDateTime) null, (LocalDateTime) null);
      Car.CarType car_CarType0 = Car.CarType.electric;
      try { 
        uMCarroJa0.rental(client0, point1, "", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.electric;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Double double0 = Double.valueOf((-2096.36652595));
      Double double1 = new Double(29.895876);
      Point point0 = new Point(double0, double1);
      Double.isFinite(144.3794689);
      try { 
        uMCarroJa0.addCar("OW-%f", "OW-%f", car_CarType0, 1.0, (-2096.36652595), (-2096.36652595), 868, point0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("0>m", "0>m", (String) null, 944, "Model.UMCarroJa");
      Double double0 = new Double(0.0);
      Double double1 = new Double(169);
      Point point0 = new Point(double0, double1);
      double double2 = 0.0;
      double double3 = 1023.464;
      try { 
        uMCarroJa0.logIn("%.2f", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("~'h_08?}0n/C8zd", "ac@@\u0006$Tlm`", "ac@@\u0006$Tlm`", 0, "%.2f Horas");
      Owner owner1 = owner0.clone();
      Owner owner2 = owner0.clone();
      uMCarroJa0.getRentalListOwner(owner1);
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner2, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 1638, (String) null);
      owner0.addCar((Car) null);
      Owner owner1 = new Owner((String) null, (String) null, (String) null, 1638, (String) null);
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner1, 100, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("Dono:           ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(3497.88924242725);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 2171);
      uMCarroJa0.addUser(client0);
      Owner owner0 = new Owner("", "9@PCDkMY`<*Vv&3&K", "9@PCDkMY`<*Vv&3&K", 2171, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      point0.toString();
      Car car0 = new Car("9@PCDkMY`<*Vv&3&K", owner0, car_CarType0, 0.1, 0.1, 0.1, 2697, point0, "");
      car0.swapState();
      Car car1 = car0.clone();
      Rental rental0 = new Rental(car1, client0, point0);
      uMCarroJa0.rate(client0, rental0, 2697, 2171);
      uMCarroJa0.getRentalListClient(client0);
      uMCarroJa0.getBestClients();
      car1.warnings();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      uMCarroJa0.getTotalBilledCar(car1, localDateTime0, localDateTime0);
      uMCarroJa0.getBestClientsTravel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Double double1 = new Double(0.0);
      Point point1 = new Point(double0, double1);
      try { 
        uMCarroJa0.rental("`~JHSILRW5oh1>", point1, "", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      uMCarroJa0.getBestClientsTimes();
      String string0 = "/b;B]";
      String string1 = "Exceptions.InvalidUserException";
      int int0 = (-1723);
      Owner owner0 = new Owner("/b;B]", "/b;B]", "Exceptions.InvalidUserException", (-1723), "/b;B]");
      Owner owner1 = owner0.clone();
      int int1 = 739;
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner1, 739);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 739, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
