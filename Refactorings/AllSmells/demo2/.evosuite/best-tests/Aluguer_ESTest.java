/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:35:21 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aluguer_ESTest extends Aluguer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setEstadoClassificacao((-1));
      aluguer0.equals(aluguer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setCustoViagem((-1710.3));
      aluguer1.equals(aluguer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2494, 2494, 2523, 2523, (-383));
      Coordinate coordinate0 = new Coordinate(0.0, 1.0);
      Aluguer aluguer0 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 0, 2494, coordinate0, 0.0, true, true, true, true, 1130);
      aluguer0.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3758), (-3758), (-3758));
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Aluguer aluguer0 = new Aluguer("\n", "", mockGregorianCalendar0, mockGregorianCalendar0, (-1664.0), (-3758), (-90), coordinate0, 0.0, false, false, false, true, (-3758));
      aluguer0.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-934), (-934), 0, (-1), (-934));
      Coordinate coordinate0 = new Coordinate((-934), 1406.45);
      Aluguer aluguer0 = new Aluguer("Matr\u00EDcula do Ve\u00EDculo: ", "The parameter did not pass validation as defined by the CoordinateManager class", mockGregorianCalendar0, mockGregorianCalendar0, (-3151.966179623), 381, 1412, coordinate0, 1.0, false, false, false, false, 1412);
      aluguer0.getTempoAteVeiculo();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-699), (-1), (-699));
      Coordinate coordinate0 = new Coordinate((-1), 1.0);
      Aluguer aluguer0 = new Aluguer(".XF2naAvvJ6S,^7", ".XF2naAvvJ6S,^7", mockGregorianCalendar0, mockGregorianCalendar0, 1636.6669417183462, (-699), (-1), coordinate0, 1.0, false, false, true, true, 0);
      aluguer0.getTempoAteVeiculo();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(175.184, 175.184);
      Aluguer aluguer0 = new Aluguer("", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-791.0), 0, 0, coordinate0, 2143.4974496002, false, false, true, true, 0);
      aluguer0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1750), (-1750), (-1750), (-947), (-1750), (-2276));
      Coordinate coordinate0 = new Coordinate(0.0, (-5424));
      Aluguer aluguer0 = new Aluguer(", ", ", ", mockGregorianCalendar0, mockGregorianCalendar0, (-947), (-1750), (-5424), coordinate0, 0.0, true, true, true, true, (-1750));
      aluguer0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(1711);
      aluguer0.getEstadoClassificacao();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1696), (-1696), (-1447), (-1696), (-1696));
      Coordinate coordinate0 = new Coordinate(0.0, (-1447));
      Aluguer aluguer0 = new Aluguer("*****    ALUGUER    *****\n", "*****    ALUGUER    *****\n", mockGregorianCalendar0, mockGregorianCalendar0, (-1696), (-1447), (-393), coordinate0, (-921.0), false, false, false, false, (-1696));
      aluguer0.getEstadoClassificacao();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
      Coordinate coordinate0 = new Coordinate(0.0, 1);
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 1, 4451, coordinate0, 2041.135, true, false, false, true, 4451);
      aluguer0.getEmail();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2399), 0, 0);
      Coordinate coordinate0 = new Coordinate((-2387), (-2399));
      Aluguer aluguer0 = new Aluguer(" yjDj_T)REm'{", " yjDj_T)REm'{", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, (-2387), coordinate0, (-93.22210869), false, false, true, false, 0);
      aluguer0.getEmail();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-934), (-934), 0, (-1), (-934));
      Coordinate coordinate0 = new Coordinate((-934), 1406.45);
      Aluguer aluguer0 = new Aluguer("Matr\u00EDcula do Ve\u00EDculo: ", "The parameter did not pass validation as defined by the CoordinateManager class", mockGregorianCalendar0, mockGregorianCalendar0, (-3151.966179623), 381, 1412, coordinate0, 1.0, false, false, false, false, 1412);
      aluguer0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1696), (-1696), (-1447), (-1696), (-1696));
      Coordinate coordinate0 = new Coordinate(0.0, (-1447));
      Aluguer aluguer0 = new Aluguer("*****    ALUGUER    *****\n", "*****    ALUGUER    *****\n", mockGregorianCalendar0, mockGregorianCalendar0, (-1696), (-1447), (-393), coordinate0, (-921.0), false, false, false, false, (-1696));
      aluguer0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, (-162.26068), 1, 1, (Coordinate) null, (-4546.0), true, true, true, true, 0);
      aluguer0.getDestino();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, (-321));
      Coordinate coordinate0 = new Coordinate(3723.4, (-1));
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 0, (-1), (-321), coordinate0, 3723.4, true, true, true, true, 0);
      aluguer0.getDestino();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-699), (-1), (-699));
      Coordinate coordinate0 = new Coordinate((-1), 1.0);
      Aluguer aluguer0 = new Aluguer(".XF2naAvvJ6S,^7", ".XF2naAvvJ6S,^7", mockGregorianCalendar0, mockGregorianCalendar0, 1636.6669417183462, (-699), (-1), coordinate0, 1.0, false, false, true, true, 0);
      aluguer0.getDestino();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Aluguer aluguer0 = new Aluguer("", "", (GregorianCalendar) null, (GregorianCalendar) null, (-382.37619839), 0, 1, coordinate0, 0L, true, false, false, false, (-2133));
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2399), 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2399,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Coordinate coordinate0 = new Coordinate((-2387), (-2399));
      assertEquals((-2387.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2399.0), coordinate0.getLongitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer(" yjDj_T)REm'{", " yjDj_T)REm'{", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, (-2387), coordinate0, (-93.22210869), false, false, true, false, 0);
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2399,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2387.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2399.0), coordinate0.getLongitude(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(" yjDj_T)REm'{", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals((-2387), aluguer0.getTempoViagem());
      assertEquals(" yjDj_T)REm'{", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals((-93.22210869), aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2399,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2387.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2399.0), coordinate0.getLongitude(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(" yjDj_T)REm'{", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals((-2387), aluguer0.getTempoViagem());
      assertEquals(" yjDj_T)REm'{", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals((-93.22210869), aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2399,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3232.2061826553), 0.0);
      assertEquals((-3232.2061826553), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer((String) null, "?hX(34GqQ#Y_", (GregorianCalendar) null, (GregorianCalendar) null, (-2207), (-2207), 1, coordinate0, 1, false, true, true, true, 0);
      assertEquals((-3232.2061826553), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-2207.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(1, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertEquals((-2207), aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertEquals("?hX(34GqQ#Y_", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertNull(aluguer0.getEmail());
      assertNotNull(aluguer0);
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertEquals((-3232.2061826553), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-2207.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(1, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertEquals((-2207), aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertEquals("?hX(34GqQ#Y_", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertNull(aluguer0.getEmail());
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "B}dG:2.0a");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("B}dG:2.0a", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2862));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("B}dG:2.0a", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-2862), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=-2862,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Coordinate coordinate0 = new Coordinate(0, 1851.5735);
      assertEquals(1851.5735, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer("_J_xJ0RU", "", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, 0, coordinate0, 0, false, true, true, false, 0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("B}dG:2.0a", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-2862), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=-2862,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1851.5735, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("_J_xJ0RU", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getRealizado());
      assertNotNull(aluguer0);
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("B}dG:2.0a", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-2862), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=-2862,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1851.5735, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("_J_xJ0RU", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getRealizado());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=B}dG:2.0a,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=-2862,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals((-2862), gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertNotNull(aluguer0);
      
      aluguer0.setCustoViagem(1.0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3758), (-3758), (-3758));
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer("\n", "", mockGregorianCalendar0, mockGregorianCalendar0, (-1664.0), (-3758), (-90), coordinate0, 0.0, false, false, false, true, (-3758));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3758,MONTH=-3758,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3758,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals((-3758), aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-3758), aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals("\n", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals((-1664.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals((-90), aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertNotNull(aluguer0);
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals((-1664.0), double0, 0.01);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3758,MONTH=-3758,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3758,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals((-3758), aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-3758), aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals("\n", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals((-1664.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals((-90), aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertNotNull(aluguer0);
      
      aluguer0.setAlteraPreco(true);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertTrue(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      aluguer0.setAceite(true);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      boolean boolean0 = aluguer0.getAceite();
      assertTrue(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(16, 0.0);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(16.0, coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer(", ", "", (GregorianCalendar) null, (GregorianCalendar) null, (-890.4291542636), 16, (-1), coordinate0, 0.0, false, false, false, true, 16);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(16.0, coordinate0.getLatitude(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(16, aluguer0.getEstadoClassificacao());
      assertEquals(16, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(", ", aluguer0.getEmail());
      assertEquals((-890.4291542636), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-1), aluguer0.getTempoViagem());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(16.0, coordinate0.getLatitude(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(16, aluguer0.getEstadoClassificacao());
      assertEquals(16, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(", ", aluguer0.getEmail());
      assertEquals((-890.4291542636), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-1), aluguer0.getTempoViagem());
      assertEquals((-890.4291542636), aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertEquals(", ", aluguer1.getEmail());
      assertEquals(16, aluguer1.getTempoAteVeiculo());
      assertEquals((-1), aluguer1.getTempoViagem());
      assertEquals(16, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(175.184, 175.184);
      assertEquals(175.184, coordinate0.getLongitude(), 0.01);
      assertEquals(175.184, coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer("", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-791.0), 0, 0, coordinate0, 2143.4974496002, false, false, true, true, 0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(175.184, coordinate0.getLongitude(), 0.01);
      assertEquals(175.184, coordinate0.getLatitude(), 0.01);
      assertEquals((-791.0), aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNull(aluguer0.getMatricula());
      assertEquals(2143.4974496002, aluguer0.getDistancia(), 0.01);
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(175.184, coordinate0.getLongitude(), 0.01);
      assertEquals(175.184, coordinate0.getLatitude(), 0.01);
      assertEquals((-791.0), aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNull(aluguer0.getMatricula());
      assertEquals(2143.4974496002, aluguer0.getDistancia(), 0.01);
      assertEquals((-791.0), aluguer1.getCustoViagem(), 0.01);
      assertEquals(2143.4974496002, aluguer1.getDistancia(), 0.01);
      assertTrue(aluguer1.getRealizado());
      assertTrue(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getTempoViagem());
      assertNull(aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-3692.28087), (-3092.0));
      assertEquals((-3092.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-3692.28087), coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer("Data de in\u00EDcio do aluguer: ", "", mockGregorianCalendar0, mockGregorianCalendar0, (-3692.28087), (-124), 1, coordinate0, (-126.0), false, true, false, false, (-124));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-3092.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-3692.28087), coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals((-126.0), aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals("Data de in\u00EDcio do aluguer: ", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-3692.28087), aluguer0.getCustoViagem(), 0.01);
      assertEquals((-124), aluguer0.getEstadoClassificacao());
      assertEquals((-124), aluguer0.getTempoAteVeiculo());
      assertEquals(1, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-3092.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-3692.28087), coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals((-126.0), aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals("Data de in\u00EDcio do aluguer: ", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-3692.28087), aluguer0.getCustoViagem(), 0.01);
      assertEquals((-124), aluguer0.getEstadoClassificacao());
      assertEquals((-124), aluguer0.getTempoAteVeiculo());
      assertEquals(1, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("Data de in\u00EDcio do aluguer: ", aluguer1.getEmail());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals(1, aluguer1.getTempoViagem());
      assertEquals((-126.0), aluguer1.getDistancia(), 0.01);
      assertEquals((-124), aluguer1.getEstadoClassificacao());
      assertEquals((-124), aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals((-3692.28087), aluguer1.getCustoViagem(), 0.01);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      aluguer0.setCustoViagem(1708.492);
      assertEquals(1708.492, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals(1708.492, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(1708.492, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      aluguer0.setAceite(true);
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2268), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(1.0, 1106.6277905);
      assertEquals(1106.6277905, coordinate0.getLongitude(), 0.01);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer("NW", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, 0, coordinate0, (-85.9265605131013), false, true, true, false, 0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-2268,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1106.6277905, coordinate0.getLongitude(), 0.01);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("NW", aluguer0.getEmail());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals((-85.9265605131013), aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNull(aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = new Aluguer("NW", "xZmyc>N<+", mockGregorianCalendar0, mockGregorianCalendar0, (-1190.1787), (-1), 1, coordinate0, (-85.9265605131013), false, true, true, false, (-1));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-2268,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1106.6277905, coordinate0.getLongitude(), 0.01);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("NW", aluguer1.getEmail());
      assertEquals((-1190.1787), aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals((-1), aluguer1.getEstadoClassificacao());
      assertEquals(1, aluguer1.getTempoViagem());
      assertEquals((-85.9265605131013), aluguer1.getDistancia(), 0.01);
      assertEquals("xZmyc>N<+", aluguer1.getMatricula());
      assertTrue(aluguer1.getListaEspera());
      assertEquals((-1), aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getRealizado());
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      
      // Undeclared exception!
      try { 
        aluguer0.equals(aluguer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Aluguer aluguer0 = null;
      try {
        aluguer0 = new Aluguer((Aluguer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Aluguer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertNotNull(aluguer0);
      
      Coordinate coordinate0 = aluguer0.getDestino();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertNotNull(coordinate0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertFalse(boolean0);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertNotNull(aluguer0);
      
      int int0 = aluguer0.getTempoViagem();
      assertEquals(0, int0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertNotNull(aluguer0);
      
      String string0 = aluguer0.getEmail();
      assertEquals("", string0);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNotNull(aluguer0);
      
      int int0 = aluguer0.getTempoAteVeiculo();
      assertEquals(0, int0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      String string0 = aluguer0.getMatricula();
      assertEquals("", string0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNotNull(aluguer0);
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertNotNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertNotNull(aluguer0);
      
      boolean boolean0 = aluguer0.getRealizado();
      assertFalse(boolean0);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertNotNull(aluguer0);
      
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals(0, int0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertNotNull(aluguer0);
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNotNull(aluguer0);
      
      boolean boolean0 = aluguer0.getAceite();
      assertFalse(boolean0);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
      assertNotNull(aluguer0);
      
      boolean boolean0 = aluguer0.getListaEspera();
      assertFalse(boolean0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertNotNull(aluguer0);
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNotNull(aluguer0);
      
      double double0 = aluguer0.getDistancia();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      
      aluguer1.setEstadoClassificacao(1105);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(1105, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(1105, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      
      aluguer0.setAlteraPreco(true);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertNotSame(aluguer0, aluguer1);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      
      aluguer1.setRealizado(true);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getMatricula());
      assertTrue(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getMatricula());
      assertTrue(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertTrue(boolean0);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertTrue(aluguer0.equals((Object)aluguer1));
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = new Aluguer();
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      
      aluguer1.setCustoViagem(931L);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(931.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer1, aluguer0);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(931.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(1809, 1);
      assertEquals(1809.0, coordinate0.getLatitude(), 0.01);
      assertEquals(1.0, coordinate0.getLongitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer1 = new Aluguer("", "A:p", mockGregorianCalendar0, mockGregorianCalendar0, 1809, 1809, 1809, coordinate0, 1809, true, true, true, false, 1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1809.0, coordinate0.getLatitude(), 0.01);
      assertEquals(1.0, coordinate0.getLongitude(), 0.01);
      assertEquals(1809.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(1809, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getAceite());
      assertTrue(aluguer1.getRealizado());
      assertEquals(1, aluguer1.getEstadoClassificacao());
      assertTrue(aluguer1.getListaEspera());
      assertEquals("A:p", aluguer1.getMatricula());
      assertEquals(1809, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getEmail());
      assertEquals(1809.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1809.0, coordinate0.getLatitude(), 0.01);
      assertEquals(1.0, coordinate0.getLongitude(), 0.01);
      assertEquals(1809.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(1809, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getAceite());
      assertTrue(aluguer1.getRealizado());
      assertEquals(1, aluguer1.getEstadoClassificacao());
      assertTrue(aluguer1.getListaEspera());
      assertEquals("A:p", aluguer1.getMatricula());
      assertEquals(1809, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getEmail());
      assertEquals(1809.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-729), (-2178));
      assertEquals((-729.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2178.0), coordinate0.getLongitude(), 0.01);
      assertNotNull(coordinate0);
      
      Aluguer aluguer0 = new Aluguer("q", "q", mockGregorianCalendar0, mockGregorianCalendar0, (-1120L), (-729), (-2178), coordinate0, (-1120L), true, true, true, false, (-729));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-729.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2178.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-729), aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-729), aluguer0.getEstadoClassificacao());
      assertEquals((-2178), aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("q", aluguer0.getEmail());
      assertEquals("q", aluguer0.getMatricula());
      assertEquals((-1120.0), aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals((-1120.0), aluguer0.getCustoViagem(), 0.01);
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = new Aluguer();
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-729.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2178.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-729), aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-729), aluguer0.getEstadoClassificacao());
      assertEquals((-2178), aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("q", aluguer0.getEmail());
      assertEquals("q", aluguer0.getMatricula());
      assertEquals((-1120.0), aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals((-1120.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertNotNull(aluguer0);
      
      boolean boolean0 = aluguer0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertNotNull(aluguer0);
      
      boolean boolean0 = aluguer0.equals(aluguer0);
      assertTrue(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertNotNull(aluguer0);
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      
      aluguer1.setListaEspera(true);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer1.getListaEspera());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer1.getListaEspera());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertNotNull(aluguer0);
      
      String string0 = aluguer0.toString();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertNotNull(string0);
      
      boolean boolean0 = aluguer0.equals(string0);
      assertFalse(boolean0);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertNotNull(aluguer0);
      
      aluguer0.setListaEspera(true);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      boolean boolean0 = aluguer0.getListaEspera();
      assertTrue(boolean0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      Coordinate coordinate0 = new Coordinate(1, (-1727.19056096278));
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 1, 2145984973, 2145984973, coordinate0, (-1710.3), true, true, true, false, 1);
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(2145984973, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(1, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      assertEquals(2145984973, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals((-1710.3), aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(boolean0);
      assertFalse(aluguer1.getListaEspera());
      assertTrue(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getRealizado());
      
      aluguer0.setRealizado(true);
      boolean boolean0 = aluguer0.getRealizado();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setAceite(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer1.getAceite());
  }
}
