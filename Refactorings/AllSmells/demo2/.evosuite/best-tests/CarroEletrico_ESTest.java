/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:41:18 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CarroEletrico_ESTest extends CarroEletrico_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2255, (-2759.4277));
      CarroEletrico carroEletrico0 = new CarroEletrico();
      List<ParDatas> list0 = carroEletrico0.getDatasAlugueres();
      CarroEletrico carroEletrico1 = new CarroEletrico("!f49D851!.6?", "u", "lIYzh6q'", 2255, 2255, 0.0, 2255, coordinate0, false, 2255, list0);
      CarroEletrico carroEletrico2 = carroEletrico1.clone();
      assertEquals("lIYzh6q'", carroEletrico2.getNIF());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      carroEletrico0.setClassificacao(3013);
      CarroEletrico carroEletrico1 = carroEletrico0.clone();
      assertEquals(0.0, carroEletrico1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3430), (-1909.7960720649));
      CarroEletrico carroEletrico0 = new CarroEletrico();
      List<ParDatas> list0 = carroEletrico0.getDatasAlugueres();
      CarroEletrico carroEletrico1 = new CarroEletrico("(CnxB[?", "By5", "Dispon\u00EDvel: ", (-3430), (-3430), (-1909.7960720649), (-3430), coordinate0, true, (-4118), list0);
      CarroEletrico carroEletrico2 = new CarroEletrico(carroEletrico1);
      CarroEletrico carroEletrico3 = carroEletrico2.clone();
      assertTrue(carroEletrico3.equals((Object)carroEletrico1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1), 0.15);
      CarroEletrico carroEletrico0 = new CarroEletrico();
      List<ParDatas> list0 = carroEletrico0.getDatasAlugueres();
      CarroEletrico carroEletrico1 = new CarroEletrico((String) null, (String) null, (String) null, (-1), (-1), 0.15, 1532, coordinate0, false, (-1), list0);
      CarroEletrico carroEletrico2 = carroEletrico1.clone();
      // Undeclared exception!
      try { 
        carroEletrico2.equals(carroEletrico1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 2.0);
      CarroEletrico carroEletrico0 = null;
      try {
        carroEletrico0 = new CarroEletrico((String) null, (String) null, "CarroEletrico", 0, 0, 0, 0, coordinate0, true, (-613), (List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CarroEletrico carroEletrico0 = null;
      try {
        carroEletrico0 = new CarroEletrico((CarroEletrico) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      ParDatas parDatas0 = new ParDatas();
      boolean boolean0 = carroEletrico0.equals(parDatas0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      CarroEletrico carroEletrico0 = new CarroEletrico("brLL{`j?rd[f", "brLL{`j?rd[f", "brLL{`j?rd[f", 0, 0, 0, 0, coordinate0, true, 0, linkedList0);
      boolean boolean0 = carroEletrico0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      boolean boolean0 = carroEletrico0.equals(carroEletrico0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1), 0.15);
      CarroEletrico carroEletrico0 = new CarroEletrico();
      CarroEletrico carroEletrico1 = carroEletrico0.clone();
      assertTrue(carroEletrico1.equals((Object)carroEletrico0));
      
      carroEletrico0.setPosicao(coordinate0);
      boolean boolean0 = carroEletrico0.equals(carroEletrico1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      String string0 = carroEletrico0.toString();
      assertEquals("***** Carro El\u00E9trico *****\n*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      List<ParDatas> list0 = carroEletrico0.getDatasAlugueres();
      CarroEletrico carroEletrico1 = new CarroEletrico((String) null, (String) null, (String) null, (-8232), (-8232), (-8232), 0, (Coordinate) null, true, 0, list0);
      // Undeclared exception!
      try { 
        carroEletrico1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }
}
