/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:41:37 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CarroHibrido_ESTest extends CarroHibrido_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      List<ParDatas> list0 = carroHibrido0.getDatasAlugueres();
      CarroHibrido carroHibrido1 = new CarroHibrido("?{EzXEPYeM", "?{EzXEPYeM", "?{EzXEPYeM", 380, 380, 380, 0, (Coordinate) null, false, 0, list0);
      CarroHibrido carroHibrido2 = carroHibrido1.clone();
      assertNotSame(carroHibrido2, carroHibrido1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1, (-1048));
      CarroHibrido carroHibrido0 = new CarroHibrido();
      List<ParDatas> list0 = carroHibrido0.getDatasAlugueres();
      CarroHibrido carroHibrido1 = new CarroHibrido("", "", "", 1, 0.0, 0.05, (-1048), coordinate0, false, (-181), list0);
      CarroHibrido carroHibrido2 = carroHibrido1.clone();
      assertEquals("", carroHibrido2.getNIF());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3040.04856641643), 0.0);
      CarroHibrido carroHibrido0 = new CarroHibrido();
      List<ParDatas> list0 = carroHibrido0.getDatasAlugueres();
      CarroHibrido carroHibrido1 = new CarroHibrido("stmZ8< i", "stmZ8< i", (String) null, 0, (-789.0665015452519), (-1.0), 1, coordinate0, false, 0, list0);
      CarroHibrido carroHibrido2 = carroHibrido1.clone();
      assertEquals(0, carroHibrido2.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-646), (-646));
      CarroHibrido carroHibrido0 = new CarroHibrido();
      List<ParDatas> list0 = carroHibrido0.getDatasAlugueres();
      CarroHibrido carroHibrido1 = new CarroHibrido((String) null, "DGy2", "DGy2", (-2716), 0.0, 0.0, (-646), coordinate0, true, 864, list0);
      CarroHibrido carroHibrido2 = carroHibrido1.clone();
      assertNull(carroHibrido2.getMarca());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-646), (-646));
      CarroHibrido carroHibrido0 = new CarroHibrido();
      List<ParDatas> list0 = carroHibrido0.getDatasAlugueres();
      CarroHibrido carroHibrido1 = new CarroHibrido((String) null, "DGy2", "DGy2", (-2716), 0.0, 0.0, (-646), coordinate0, true, 864, list0);
      // Undeclared exception!
      try { 
        carroHibrido1.equals(carroHibrido0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2318.58), 0.0);
      CarroHibrido carroHibrido0 = null;
      try {
        carroHibrido0 = new CarroHibrido("!`/{B", "!`/{B", "?", 0, (-2318.58), (-1812.0), (-523), coordinate0, true, 0, (List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      CarroHibrido carroHibrido1 = new CarroHibrido(carroHibrido0);
      assertEquals(0, carroHibrido1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      boolean boolean0 = carroHibrido0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      boolean boolean0 = carroHibrido0.equals(carroHibrido0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      ParDatas parDatas0 = new ParDatas();
      boolean boolean0 = carroHibrido0.equals(parDatas0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      List<ParDatas> list0 = carroHibrido0.getDatasAlugueres();
      CarroHibrido carroHibrido1 = new CarroHibrido("?{EzXEPYeM", "?{EzXEPYeM", "?{EzXEPYeM", 380, 380, 380, 0, (Coordinate) null, false, 0, list0);
      // Undeclared exception!
      try { 
        carroHibrido1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      String string0 = carroHibrido0.toString();
      assertEquals("***** Carro H\u00EDbrido *****\n*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CarroHibrido carroHibrido0 = null;
      try {
        carroHibrido0 = new CarroHibrido((CarroHibrido) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }
}
