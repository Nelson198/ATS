/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:39:58 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cliente_ESTest extends Cliente_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setNKM(78.3284017614364);
      cliente0.equals(cliente1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setNAlugueres((-404));
      cliente1.equals(cliente0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1000, (-2120412843), 1000, (-1), (-2120412843), (-1));
      Coordinate coordinate0 = new Coordinate(1000, (-1));
      Cliente cliente0 = new Cliente("Qx*!;%2am@Wobsw+v", "Qx*!;%2am@Wobsw+v", "Qx*!;%2am@Wobsw+v", "Qx*!;%2am@Wobsw+v", "Qx*!;%2am@Wobsw+v", mockGregorianCalendar0, coordinate0, 0, (-2120412843), (-2140.7233506697));
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setClassificacao(1000);
      cliente1.equals(cliente0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2359, 2359, 2359, 2359, 5);
      Coordinate coordinate0 = new Coordinate((-2705.7536), 2359);
      Cliente cliente0 = new Cliente("", "", "", "Classifica\u00E7\u00E3o do cliente: ", "Classifica\u00E7\u00E3o do cliente: ", mockGregorianCalendar0, coordinate0, 2359, 0, 2359);
      cliente0.getPosicao();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate(2.0, 0.0);
      cliente0.setPosicao(coordinate0);
      cliente0.getPosicao();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-521.03), (-521.03));
      Cliente cliente0 = new Cliente("-c97\"Od;}c", "-c97\"Od;}c", "N\u00FAmero de alugueres efetuados: ", "o5E45wQ|bMh2.?7", "o5E45wQ|bMh2.?7", mockGregorianCalendar0, coordinate0, 0, 0, (-521.03));
      cliente0.getPosicao();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2359, 2359, 2359, 2359, 5);
      Coordinate coordinate0 = new Coordinate((-2705.7536), 2359);
      Cliente cliente0 = new Cliente("", "", "", "Classifica\u00E7\u00E3o do cliente: ", "Classifica\u00E7\u00E3o do cliente: ", mockGregorianCalendar0, coordinate0, 2359, 0, 2359);
      cliente0.getNKm();
      assertEquals(2359, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-521.03), (-521.03));
      Cliente cliente0 = new Cliente("-c97\"Od;}c", "-c97\"Od;}c", "N\u00FAmero de alugueres efetuados: ", "o5E45wQ|bMh2.?7", "o5E45wQ|bMh2.?7", mockGregorianCalendar0, coordinate0, 0, 0, (-521.03));
      double double0 = cliente0.getNKm();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals((-521.03), double0, 0.01);
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(1209);
      int int0 = cliente0.getNAlugueres();
      assertEquals(1209, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("LcI+Yu\"4#:7Bs#1!Ze");
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Coordinate coordinate0 = new Coordinate(2283.8395011283224, 2283.8395011283224);
      Cliente cliente0 = new Cliente("Q@BIB\u0005M:?x #}e,>", "A|f{", (String) null, (String) null, ";e34Z@7WbDHZ9", mockGregorianCalendar0, coordinate0, (-1176), (-3320), (-1176));
      int int0 = cliente0.getNAlugueres();
      assertEquals((-1176), cliente0.getClassificacao());
      assertEquals((-3320), int0);
      assertEquals((-1176.0), cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Cliente cliente0 = new Cliente("`Ywx3Ah", (String) null, "!.UP;67<zq#sg", "", "!.UP;67<zq#sg", mockGregorianCalendar0, coordinate0, 1, (-1), (-1));
      int int0 = cliente0.getClassificacao();
      assertEquals((-1), cliente0.getNAlugueres());
      assertEquals(1, int0);
      assertEquals((-1.0), cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao((-2555));
      int int0 = cliente0.getClassificacao();
      assertEquals((-2555), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1628), (-1628), (-1628), (-1628), 2552);
      Coordinate coordinate0 = new Coordinate((-1628), (-1.0));
      Cliente cliente0 = new Cliente("n'0-", "d", "K{/h/2%Wk^;tx-Y^", "K{/h/2%Wk^;tx-Y^", "n'0-", mockGregorianCalendar0, coordinate0, 2552, (-1628), (-1.0));
      Cliente cliente1 = cliente0.clone();
      assertEquals((-1628), cliente1.getNAlugueres());
      assertEquals((-1628), cliente0.getNAlugueres());
      assertEquals(2552, cliente0.getClassificacao());
      assertEquals((-1.0), cliente1.getNKm(), 0.01);
      assertEquals((-1.0), cliente0.getNKm(), 0.01);
      assertEquals(2552, cliente1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(4257);
      cliente0.clone();
      assertEquals(4257, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2359, 2359, 2359, 2359, 5);
      Coordinate coordinate0 = new Coordinate((-2705.7536), 2359);
      Cliente cliente0 = new Cliente("", "", "", "Classifica\u00E7\u00E3o do cliente: ", "Classifica\u00E7\u00E3o do cliente: ", mockGregorianCalendar0, coordinate0, 2359, 0, 2359);
      Cliente cliente1 = cliente0.clone();
      assertEquals(2359.0, cliente1.getNKm(), 0.01);
      assertEquals(2359, cliente0.getClassificacao());
      assertEquals(0, cliente1.getNAlugueres());
      assertEquals(2359, cliente1.getClassificacao());
      assertEquals(2359.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao((-2555));
      cliente0.clone();
      assertEquals((-2555), cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1.0, 1.0);
      Cliente cliente0 = new Cliente("T", "T", "T", "{)[(FmZb;", "", (GregorianCalendar) null, coordinate0, 2731, 0, 2731);
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.getPosicao();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNome((String) null);
      Cliente cliente1 = cliente0.clone();
      // Undeclared exception!
      try { 
        cliente1.equals(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2273, 2273, 0, 0, (-1532), 2278);
      Cliente cliente0 = new Cliente("S:GJ1xY+*,^b", "S:GJ1xY+*,^b", "S:GJ1xY+*,^b", (String) null, "S:GJ1xY+*,^b", mockGregorianCalendar0, (Coordinate) null, 0, 0, 2077.6);
      // Undeclared exception!
      try { 
        cliente0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cliente cliente0 = null;
      try {
        cliente0 = new Cliente((Cliente) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = cliente0.getPosicao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      double double0 = cliente0.getNKm();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getNAlugueres();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getClassificacao();
      assertEquals(0, int0);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setNKM(3.141592653589793);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(3.141592653589793, cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente1.setNAlugueres(4257);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(4257, cliente1.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente1.setClassificacao(2005);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(2005, cliente1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(0, cliente1.getClassificacao());
      assertEquals(0, cliente1.getNAlugueres());
      assertTrue(cliente0.equals((Object)cliente1));
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setEmail("&[0-YQO0^}Ub");
      boolean boolean0 = cliente1.equals(cliente0);
      assertFalse(cliente1.equals((Object)cliente0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals("");
      assertFalse(boolean0);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals((Object) null);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente0);
      assertTrue(boolean0);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      String string0 = cliente0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      assertTrue(cliente1.equals((Object)cliente0));
      
      Coordinate coordinate0 = new Coordinate((-1907.07052031498), 0.0);
      cliente1.setPosicao(coordinate0);
      boolean boolean0 = cliente1.equals(cliente0);
      assertFalse(cliente1.equals((Object)cliente0));
      assertFalse(boolean0);
  }
}
