/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:35:21 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoordinateManager_ESTest extends CoordinateManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Coordinate> hashMap0 = CoordinateManager.getBoundingBox((-1.0), 0.0, 579);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(1.0, 1.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest(0.0, (-25.84463336662), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(0.0, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(0.0, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(79.54100377992562, (-180.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoordinateManager.EARTH_DIAMETER = (-1.0);
      double double0 = CoordinateManager.longitudeConstant((-1.0));
      assertEquals((-0.004715027096758259), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CoordinateManager.EARTH_DIAMETER = (-7.205262885288626);
      double double0 = CoordinateManager.latitudeConstant();
      assertEquals((-0.06287778041001651), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(0.0, 0.0, 189);
      assertEquals((-1.6978158869858955), coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(0.0, 2.0, 1);
      assertEquals(1.9910168471588048, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest((-1.0), 30.603499322155933, 1);
      assertEquals(30.58687316168312, coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth((-1.0), (-1.0), 2145);
      assertEquals((-1.0192688628443638), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(0.0, 0.0, 1);
      assertEquals((-8.983152841195216E-6), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth(0.0, 2.0, 1);
      assertEquals(8.983152841195216E-6, coordinate0.getLatitude(), 0.01);
      assertEquals(2.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth((-1.0), (-1.0), 1);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-0.9999910168471589), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast(3.141592653589793, (-170.32913388894892), 464);
      assertEquals((-166.16095097063433), coordinate0.getLongitude(), 0.01);
      assertEquals(3.141592653589793, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast(0.0, 0.0, 411);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(3.692075817731233, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(90.0, 102.6989038469, 1000);
      assertEquals(90.0, coordinate0.getLatitude(), 0.01);
      assertEquals(82.65051778302258, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast((-90.0), 79.54100377992562, 4349);
      assertEquals(166.73143477172852, coordinate0.getLongitude(), 0.01);
      assertEquals((-90.0), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(1.0, 180.0, 205);
      assertEquals(0.998158453667555, coordinate0.getLatitude(), 0.01);
      assertEquals(180.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth(0.0, 0.0, 579);
      assertEquals(0.005201245495052029, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude(2801);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude((-2621.5907810435456));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude((-980.7363));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude(319.65873332);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = CoordinateManager.latitudeConstant();
      assertEquals(111.31949079327356, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(0.0, 0.0, (-2207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(180.0, (-90.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest((-1.0), (-1.0), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest((-35.398), 1865.4862551368294, (-3822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(1.0, 1.0, (-4680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(3.5198839660474874, 553.335, 1534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(331.4001694116304, 2470.5934, (-937));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth((-90.0), (-90.0), (-2032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(90.0, 90.0, (-2802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth((-4.94201259487794), 2146299731, 2146299731);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth((-2227.20819014906), (-2227.20819014906), 1003);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(2.0, 356, 356);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(73.88886991600454, (-1449.119181579651), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest(111.31949079327356, 111.31949079327356, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth((-180.0), 12756.274, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CoordinateManager coordinateManager0 = new CoordinateManager();
      assertEquals(12756.274, CoordinateManager.EARTH_DIAMETER, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Coordinate> hashMap0 = CoordinateManager.getBoundingBox(2.0, 2.0, 356);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = CoordinateManager.longitudeConstant((-1449.119181579651));
      assertEquals(73.88886991600454, double0, 0.01);
  }
}
