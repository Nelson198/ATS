/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:40:01 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UmCarroJa_ESTest extends UmCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2622.416667905);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      try { 
        umCarroJa0.maisPertoJa(coordinate0, coordinate1, (ParDatas) null, "J (K5{#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem ve\u00EDculos dispon\u00EDveis para alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0, 4.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 171, 0, 0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.maisBaratoNoPerimetro(coordinate0, coordinate1, parDatas0, 924.453416, 607);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      ParDatas parDatas0 = new ParDatas();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("VOf}0H.V-p6K", "VOf}0H.V-p6K", "Olfh2Gi/'qz:E", 21, 0.0, 0.0, 21, coordinate0, true, (-725), linkedList0);
      umCarroJa0.registarVeiculo(veiculo0);
      List<Veiculo> list0 = umCarroJa0.maisBarato(coordinate0, parDatas0, 5);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.guardarEstado("MA2h )off* ", (GregorianCalendar) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      int int0 = umCarroJa0.getNUsers();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        umCarroJa0.totalFactBDates("The parameter did not pass validation as defined by the CoordinateManager class", mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.respostaProp(false, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarVeiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.registaAluguer(aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1773, (-3237), 20, 337, (-3237), 1);
      // Undeclared exception!
      try { 
        umCarroJa0.guardarEstado((String) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 73);
      try { 
        umCarroJa0.guardarEstado("", mockGregorianCalendar0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getUserNIF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getEmailUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculoJa("][", 1930);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculo((Aluguer) null, (-245));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, (-454));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Cliente
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, 1339);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.getAlugueresProp("V)EB1");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getUtilizador("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getUserNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      String string0 = umCarroJa0.toStringUser();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringAlugs();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNAlugs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(21, 208, 1594);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.maisBaratoJa((Coordinate) null, parDatas0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresCliente("p~k?'OT]](e!'!&)jy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o efetuou nenhum aluguer.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.determinadaAutonomia((Coordinate) null, parDatas0, (-1), (-479), 813);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0, (-291.046320031));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2061584300), 0, (-2061584300), (-2138422533), 0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.veiculoEspecifico(coordinate0, parDatas0, ";eZJ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ;eZJ
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 1.0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisProximo(coordinate0, parDatas0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      ParDatas parDatas0 = new ParDatas();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("VOf}0H.V-p6K", "VOf}0H.V-p6K", "Olfh2Gi/'qz:E", 21, 0.0, 0.0, 0, coordinate0, true, (-725), linkedList0);
      umCarroJa0.registarVeiculo(veiculo0);
      List<Veiculo> list0 = umCarroJa0.maisBarato(coordinate0, parDatas0, 5);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      ParDatas parDatas0 = new ParDatas();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("VOf}0H.V-p6K", "VOf}0H.V-p6K", "Olfh2Gi/'qz:E", 21, 0.0, 0.0, (-7), coordinate0, true, (-725), linkedList0);
      umCarroJa0.registarVeiculo(veiculo0);
      try { 
        umCarroJa0.maisBarato(coordinate0, parDatas0, 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1073741823), (-1073741823), (-1), (-1073741823), (-1779));
      umCarroJa0.alugueresEfetuados(mockGregorianCalendar0);
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.alugueresClassificarVeiculo();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      // Undeclared exception!
      try { 
        umCarroJa0.determinarListaAlugCli("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.determinarListaAlugCli("", "!Z!<'. JSr.]Gi]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // !Z!<'. JSr.]Gi]
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.altPrecoKm("ye>(>BH>NVKKw<C5o", (-1.0));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ye>(>BH>NVKKw<C5o
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.abastecerVeiculo("sdTyVG)Kq&f*", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // sdTyVG)Kq&f*
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.sinalizarDisponibilidade("WE}Zfop jwz4{bFAf", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // WE}Zfop jwz4{bFAf
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculo(aluguer0, 2674);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeVeiculo("J (K5{#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesAlugueres();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      List<Cliente> list0 = umCarroJa0.get10ClientesKm();
      assertTrue(list0.contains(cliente0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.get10ClientesKm();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringVeiculo();
      try { 
        umCarroJa0.getAlugueresVeiculo(string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeUtilizador((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      try { 
        umCarroJa0.iniciarSessao("", "bq|S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // bq|S
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.iniciarSessao("", "");
      Coordinate coordinate0 = umCarroJa0.getPosicaoCliente();
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.iniciarSessao("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n\n", "bq|S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // *****    UTILIZADOR    *****
         // Nome: 
         // NIF: 
         // Email: 
         // Password: 
         // Morada: 
         // Data de Nascimento: 14/2/2014
         // Posi\u00E7\u00E3o em que o cliente se encontra: 0, 0
         // Classifica\u00E7\u00E3o do cliente: 0
         // N\u00FAmero de alugueres efetuados: 0
         // N\u00FAmero de Km percorridos: 0.0
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      try { 
        umCarroJa0.registarUtilizador(cliente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesKm();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.classificarClienteJa("jlb#yZ.w<L_Y71}", (-2457));
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNUsers();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.altPrecoAluguer(3265.5269753913, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getEmailUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(154.373959, (-822.1437077737897));
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosCliente("x<Pn#=:SP", coordinate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNVeiculos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Cliente
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.determinarListaEspera((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosAutonomiaVeiculo("", coordinate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }
}
