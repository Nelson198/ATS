/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 07 16:37:19 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Veiculo_ESTest extends Veiculo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setClassificacao((-111));
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1842.07853115051, 0.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", 1846, 1842.07853115051, 1846, 1846, coordinate0, true, (-1), list0);
      Veiculo veiculo2 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", 1846, 1842.07853115051, 1846, (-1), coordinate0, true, 1846, list0);
      veiculo1.equals(veiculo2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      veiculo1.setConsumo(1842.07853115051);
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setPreco((-1387));
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(1816.1457276433, (-1894.4601886604));
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("", "", "", (-620), (-620), (-1894.4601886604), (-620), coordinate0, true, 0, list0);
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(978, 706, 978, (-2071), 921);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-2071));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
      veiculo0.addDatas(mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.verificaAutonomia(0, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), 1837.24);
      Veiculo veiculo0 = new Veiculo();
      Weather weather0 = new Weather();
      veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1365.0), 4.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("ZlPS{0&", "uL", "uL", (-152), 0.0, (-152), 0, coordinate0, false, (-284), list0);
      veiculo1.tempoViagemCarroJa(coordinate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-429), 0.15);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("QX0TN>\"g|1CdPS)e9", "i!8", "", (-429), 0.15, 2341.49264, 1783, coordinate0, false, (-2832), linkedList0);
      veiculo0.tempoAteVeiculoPéJa(coordinate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1025.0, (-904.4901295617329));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "", (-1), (-247.959537371), 3711.9751040947, (-1), coordinate0, false, (-921), linkedList0);
      int int0 = veiculo0.getVelocidade();
      assertEquals((-921), veiculo0.getClassificacao());
      assertEquals((-1), veiculo0.getAutonomia());
      assertEquals((-1), int0);
      assertEquals((-247.959537371), veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      double double0 = veiculo0.getPreco();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4000, 1276);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Autonomia: ", "", "Autonomia: ", 4000, 4000, (-3527.3), 1276, coordinate0, false, 296, linkedList0);
      double double0 = veiculo0.getPreco();
      assertEquals((-3527.3), veiculo0.getConsumo(), 0.01);
      assertEquals(296, veiculo0.getClassificacao());
      assertEquals("Autonomia: ", veiculo0.getMarca());
      assertEquals(1276, veiculo0.getAutonomia());
      assertEquals(4000, veiculo0.getVelocidade());
      assertEquals("", veiculo0.getMatricula());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("Autonomia: ", veiculo0.getNIF());
      assertEquals(4000.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo((String) null, (String) null, "com.google.gson.internal.bind.TypeAdapters$25", 1906, (-3155.282), (-2081.28991), 1906, (Coordinate) null, false, 1906, list0);
      veiculo1.getPosicao();
      assertEquals(1906, veiculo1.getClassificacao());
      assertEquals((-3155.282), veiculo1.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-2081.28991), veiculo1.getConsumo(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(1906, veiculo1.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(1906, veiculo1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1, (-2050.7219));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Coordinate", "Coordinate", "~n", (-1), (-3671.12), 0.0, 1, coordinate0, true, 0, linkedList0);
      veiculo0.getPosicao();
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-3671.12), veiculo0.getPreco(), 0.01);
      assertEquals("Coordinate", veiculo0.getMatricula());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(1, veiculo0.getAutonomia());
      assertEquals("~n", veiculo0.getNIF());
      assertEquals((-1), veiculo0.getVelocidade());
      assertEquals("Coordinate", veiculo0.getMarca());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-429), 0.15);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("QX0TN>\"g|1CdPS)e9", "i!8", "", (-429), 0.15, 2341.49264, 1783, coordinate0, false, (-2832), linkedList0);
      veiculo0.getPosicao();
      assertEquals(0.15, veiculo0.getPreco(), 0.01);
      assertEquals((-429), veiculo0.getVelocidade());
      assertEquals("", veiculo0.getNIF());
      assertEquals(2341.49264, veiculo0.getConsumo(), 0.01);
      assertEquals(1783, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("i!8", veiculo0.getMatricula());
      assertEquals((-2832), veiculo0.getClassificacao());
      assertEquals("QX0TN>\"g|1CdPS)e9", veiculo0.getMarca());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setNIF((String) null);
      veiculo0.getNIF();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getNIF();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1, 1);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("&YrVV$", "&YrVV$", "&YrVV$", 1, 1, 1, 1, coordinate0, false, 1, linkedList0);
      veiculo0.getMatricula();
      assertEquals(1.0, veiculo0.getPreco(), 0.01);
      assertEquals(1, veiculo0.getVelocidade());
      assertEquals(1.0, veiculo0.getConsumo(), 0.01);
      assertEquals(1, veiculo0.getAutonomia());
      assertEquals(1, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getMatricula();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca((String) null);
      veiculo0.getMarca();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), 1837.24);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("9!.G5-G\"(Gm=<]:} 6[", (String) null, "NIF do Propriet\u00E1rio: ", (-1873), 872.2, 872.2, (-1873), coordinate0, false, 2214, list0);
      String string0 = veiculo1.getMarca();
      assertEquals(2214, veiculo1.getClassificacao());
      assertEquals((-1873), veiculo1.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-1873), veiculo1.getVelocidade());
      assertEquals(872.2, veiculo1.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals("9!.G5-G\"(Gm=<]:} 6[", string0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertNotNull(string0);
      assertEquals(872.2, veiculo1.getConsumo(), 0.01);
      assertEquals("NIF do Propriet\u00E1rio: ", veiculo1.getNIF());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), (-2961.406873893181));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "q:v :*u", 0, 0, (-2961.406873893181), 0, coordinate0, true, 0, linkedList0);
      boolean boolean0 = veiculo0.getDisponibilidade();
      assertEquals("", veiculo0.getMatricula());
      assertEquals((-2961.406873893181), veiculo0.getConsumo(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals("", veiculo0.getMarca());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("q:v :*u", veiculo0.getNIF());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Locale locale0 = new Locale("http://api.openweathermap.org/data/2.5/weather?lat=", "http://api.openweathermap.org/data/2.5/weather?lat=", "http://api.openweathermap.org/data/2.5/weather?lat=");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      veiculo0.addDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      veiculo0.getDatasAlugueres();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      double double0 = veiculo0.getConsumo();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setConsumo((-630.698889589145));
      double double0 = veiculo0.getConsumo();
      assertEquals((-630.698889589145), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      assertEquals(0, veiculo0.getClassificacao());
      
      veiculo0.setClassificacao(1);
      int int0 = veiculo0.getClassificacao();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1365.0), 4.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("ZlPS{0&", "uL", "uL", (-152), 0.0, (-152), 0, coordinate0, false, (-284), list0);
      int int0 = veiculo1.getClassificacao();
      assertEquals("ZlPS{0&", veiculo1.getMarca());
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo1.getDisponibilidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals((-284), int0);
      assertEquals((-152), veiculo1.getVelocidade());
      assertEquals("uL", veiculo1.getMatricula());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals((-152.0), veiculo1.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("uL", veiculo1.getNIF());
      assertEquals(0, veiculo1.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("[u", "[u", "[u", (-1077), (-1077), (-1077), 1, (Coordinate) null, true, 0, linkedList0);
      int int0 = veiculo0.getAutonomia();
      assertEquals((-1077.0), veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(1, int0);
      assertEquals((-1077.0), veiculo0.getPreco(), 0.01);
      assertEquals((-1077), veiculo0.getVelocidade());
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), 1837.24);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("9!.G5-G\"(Gm=<]:} 6[", (String) null, "NIF do Propriet\u00E1rio: ", (-1873), 872.2, 872.2, (-1873), coordinate0, false, 2214, list0);
      int int0 = veiculo1.getAutonomia();
      assertEquals(872.2, veiculo1.getPreco(), 0.01);
      assertEquals(872.2, veiculo1.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals("9!.G5-G\"(Gm=<]:} 6[", veiculo1.getMarca());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals((-1873), veiculo1.getVelocidade());
      assertEquals("NIF do Propriet\u00E1rio: ", veiculo1.getNIF());
      assertEquals((-1873), int0);
      assertEquals(2214, veiculo1.getClassificacao());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1.0, (-1));
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("", "", "", (-1), (-1), (-1), (-1), coordinate0, false, (-1), list0);
      double double0 = veiculo1.custoViagem((-1));
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(1.0, double0, 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-1.0), veiculo1.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals((-1), veiculo1.getVelocidade());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals((-1), veiculo1.getAutonomia());
      assertEquals((-1), veiculo1.getClassificacao());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-991.2211561), 0.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("N~ 1Y|Ra^ZXGAYYAv", "", "N~ 1Y|Ra^ZXGAYYAv", (-2192), (-2192), (-2192), (-561), coordinate0, true, (-561), list0);
      Veiculo veiculo2 = new Veiculo(veiculo1);
      double double0 = veiculo2.custoViagem(257.7725482);
      assertEquals("N~ 1Y|Ra^ZXGAYYAv", veiculo2.getMarca());
      assertTrue(veiculo1.equals((Object)veiculo2));
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-565037.4256544), double0, 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertTrue(veiculo2.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals((-561), veiculo1.getAutonomia());
      assertEquals((-2192), veiculo1.getVelocidade());
      assertEquals((-2192.0), veiculo1.getConsumo(), 0.01);
      assertEquals("", veiculo2.getMatricula());
      assertEquals((-561), veiculo1.getClassificacao());
      assertEquals("N~ 1Y|Ra^ZXGAYYAv", veiculo2.getNIF());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4684.096353173, 392.850088946572);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("dIV.K;OQ~lg}>N!HnM", "dIV.K;OQ~lg}>N!HnM", "dIV.K;OQ~lg}>N!HnM", 1486, 1486, 1486, 1486, coordinate0, false, (-3492), linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(1486, veiculo1.getAutonomia());
      assertEquals(1486.0, veiculo0.getPreco(), 0.01);
      assertEquals((-3492), veiculo0.getClassificacao());
      assertEquals(1486, veiculo1.getVelocidade());
      assertEquals(1486.0, veiculo0.getConsumo(), 0.01);
      assertEquals((-3492), veiculo1.getClassificacao());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(1486, veiculo0.getVelocidade());
      assertTrue(veiculo1.equals((Object)veiculo0));
      assertEquals(1486, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(943, 943);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("http://api.openweathermap.org/data/2.5/weather?lat=", "http://api.openweathermap.org/data/2.5/weather?lat=", "http://api.openweathermap.org/data/2.5/weather?lat=", 943, 943, 0.0, 0, coordinate0, false, 443, list0);
      Veiculo veiculo2 = veiculo1.clone();
      assertEquals(0, veiculo2.getAutonomia());
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo2.getDisponibilidade());
      assertEquals(443, veiculo1.getClassificacao());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo2.getConsumo(), 0.01);
      assertEquals(943, veiculo2.getVelocidade());
      assertEquals(943.0, veiculo2.getPreco(), 0.01);
      assertEquals(943, veiculo1.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(443, veiculo2.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1773), (-2897.0));
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo((String) null, "Zma7)`9+|v,u%< ", (String) null, (-1773), (-1773), (-1773), 483, coordinate0, true, 0, list0);
      Veiculo veiculo2 = veiculo1.clone();
      assertEquals(483, veiculo2.getAutonomia());
      assertEquals(483, veiculo1.getAutonomia());
      assertEquals((-1773.0), veiculo2.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals((-1773), veiculo1.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-1773.0), veiculo2.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo2.getClassificacao());
      assertTrue(veiculo2.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals((-1773), veiculo2.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("", "", "`<O#PzXl5;K\"\nP$", 831, 2006.5483275263, 0.0, (-1), (Coordinate) null, false, 831, list0);
      // Undeclared exception!
      try { 
        veiculo1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarroJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Weather weather0 = new Weather();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro((Coordinate) null, weather0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=0.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ":2V AfA");
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Weather weather0 = new Weather();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro(coordinate0, weather0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPéJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("[u", "[u", "[u", (-1077), (-1077), (-1077), 1, (Coordinate) null, true, 0, linkedList0);
      Coordinate coordinate0 = new Coordinate(1, 1);
      Weather weather0 = new Weather();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1405.28758258), 2.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Posi\u00E7\u00E3o (latitude e longitude): ", "Posi\u00E7\u00E3o (latitude e longitude): ", "+/pXB@)_)]WXW", (-270), (-270), (-270), (-270), coordinate0, true, (-270), linkedList0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=-1405.28758258&lon=2.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "+/pXB@)_)]WXW");
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPé(coordinate0, (Weather) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), (-2961.406873893181));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "q:v :*u", 0, 0, (-2961.406873893181), 0, coordinate0, true, 0, linkedList0);
      linkedList0.add((ParDatas) null);
      // Undeclared exception!
      try { 
        veiculo0.setDatasAlugueres(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMatricula((String) null);
      Veiculo veiculo1 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.equals(veiculo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-578.2595569205), (-77.2));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Autonomia: ", "&appid=", "B>}{WLZ5C7` ~=V", 883, (-1202.309536), (-1202.309536), 883, coordinate0, false, (-3348), linkedList0);
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo(2019.7507909207523);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo("/fkdj/M'{", "/fkdj/M'{", "", (-1), (-1), (-1), (-1), (Coordinate) null, true, 0, (List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.getClassificacao();
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, int0);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1643, 70.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("wind", "wind", "wind", 1643, 0.0, 1011.8839, 1643, coordinate0, true, 1643, linkedList0);
      double double0 = veiculo0.getConsumo();
      assertEquals(1643, veiculo0.getVelocidade());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(1643, veiculo0.getAutonomia());
      assertEquals(1011.8839, double0, 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(1643, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 0.15);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("main", (String) null, (String) null, 0, 0, 0, (-1), coordinate0, false, 0, linkedList0);
      String string0 = veiculo0.getMatricula();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals((-1), veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertNull(string0);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Sq<\r>VG", "Posi\u00E7\u00E3o (latitude e longitude): ", "Posi\u00E7\u00E3o (latitude e longitude): ", 2004, 0.0, 2004, 1, coordinate0, true, 1, linkedList0);
      String string0 = veiculo0.getNIF();
      assertEquals(2004, veiculo0.getVelocidade());
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getMatricula());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(1, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(2004.0, veiculo0.getConsumo(), 0.01);
      assertEquals("Sq<\r>VG", veiculo0.getMarca());
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", string0);
      assertEquals(1, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1405.28758258), 2.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Posi\u00E7\u00E3o (latitude e longitude): ", "Posi\u00E7\u00E3o (latitude e longitude): ", "+/pXB@)_)]WXW", (-270), (-270), (-270), (-270), coordinate0, true, (-270), linkedList0);
      double double0 = veiculo0.getPreco();
      assertEquals((-270), veiculo0.getAutonomia());
      assertEquals((-270), veiculo0.getVelocidade());
      assertEquals("+/pXB@)_)]WXW", veiculo0.getNIF());
      assertEquals((-270.0), double0, 0.01);
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getMarca());
      assertEquals((-270), veiculo0.getClassificacao());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals((-270.0), veiculo0.getConsumo(), 0.01);
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getMarca();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Sq<\r>VG", "Posi\u00E7\u00E3o (latitude e longitude): ", "Posi\u00E7\u00E3o (latitude e longitude): ", 2004, 0.0, 2004, 1, coordinate0, true, 1, linkedList0);
      int int0 = veiculo0.getVelocidade();
      assertEquals(1, veiculo0.getAutonomia());
      assertEquals("Sq<\r>VG", veiculo0.getMarca());
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getNIF());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(1, veiculo0.getClassificacao());
      assertEquals(2004.0, veiculo0.getConsumo(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getMatricula());
      assertEquals(2004, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.getDisponibilidade();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(boolean0);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = veiculo0.getPosicao();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.getAutonomia();
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setClassificacao((-111));
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals((-111), veiculo1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setDisponibilidade(true);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertTrue(veiculo1.getDisponibilidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      Coordinate coordinate0 = new Coordinate(0.0, 1056.0);
      veiculo0.setPosicao(coordinate0);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-767), (-767));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", (-767), (-767), (-767), (-767), coordinate0, false, 450, linkedList0);
      Veiculo veiculo1 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", (-767), (-767), (-767), 450, coordinate0, false, (-767), linkedList0);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals((-767), veiculo1.getVelocidade());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals((-767), veiculo0.getVelocidade());
      assertEquals((-767.0), veiculo1.getConsumo(), 0.01);
      assertEquals(450, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertEquals((-767.0), veiculo1.getPreco(), 0.01);
      assertEquals(450, veiculo1.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      veiculo0.setConsumo(3027);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(3027.0, veiculo0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1842.07853115051, 4026.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", (-767), 1842.07853115051, (-767), (-767), coordinate0, false, (-1), list0);
      veiculo1.setPreco((-1548.399));
      Veiculo veiculo2 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", (-767), 1842.07853115051, (-767), (-1), coordinate0, false, (-767), list0);
      boolean boolean0 = veiculo1.equals(veiculo2);
      assertEquals((-1548.399), veiculo1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1611), (-1611));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("[,F", "x@D*", "x@D*", (-1611), 0.0, (-1611), (-1611), coordinate0, false, (-1478), linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals((-1611), veiculo0.getVelocidade());
      
      veiculo0.setVelocidade((-1478));
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1611), (-1611));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("[,F", "x@D*", "x@D*", (-1611), 0.0, (-1611), (-1611), coordinate0, false, (-1478), linkedList0);
      Veiculo veiculo1 = new Veiculo("[,F", "x@D*", "[,F", (-4133), (-34.03182228027415), (-1.0), (-1383), coordinate0, false, 0, linkedList0);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(boolean0);
      assertEquals("[,F", veiculo0.getMarca());
      assertEquals((-1.0), veiculo1.getConsumo(), 0.01);
      assertEquals((-1478), veiculo0.getClassificacao());
      assertEquals("x@D*", veiculo1.getMatricula());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals("[,F", veiculo1.getNIF());
      assertEquals("x@D*", veiculo0.getNIF());
      assertEquals((-34.03182228027415), veiculo1.getPreco(), 0.01);
      assertEquals((-1383), veiculo1.getAutonomia());
      assertEquals((-4133), veiculo1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      veiculo1.setMatricula("Matr{cuqa7>");
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertFalse(veiculo1.equals((Object)veiculo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1891, 1891);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("Ey", "{serializeNulls:", "{serializeNulls:", 84, 60.0, 60.0, 1891, coordinate0, false, (-284), list0);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("{serializeNulls:", veiculo1.getMatricula());
      assertEquals(84, veiculo1.getVelocidade());
      assertEquals((-284), veiculo1.getClassificacao());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(1891, veiculo1.getAutonomia());
      assertEquals(60.0, veiculo1.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("Ey", veiculo1.getMarca());
      assertEquals(60.0, veiculo1.getPreco(), 0.01);
      assertEquals("{serializeNulls:", veiculo1.getNIF());
      assertFalse(boolean0);
      assertFalse(veiculo1.getDisponibilidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Integer integer0 = new Integer(39);
      boolean boolean0 = veiculo0.equals(integer0);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertTrue(boolean0);
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals(0, veiculo1.getVelocidade());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals(0.0, veiculo1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.equals(veiculo0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.equals((Object) null);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(boolean0);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1405.28758258), 2.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Posi\u00E7\u00E3o (latitude e longitude): ", "Posi\u00E7\u00E3o (latitude e longitude): ", "+/pXB@)_)]WXW", (-270), (-270), (-270), (-270), coordinate0, true, (-270), linkedList0);
      boolean boolean0 = veiculo0.verificaAutonomia((-270), 2168);
      assertEquals((-270), veiculo0.getVelocidade());
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getMarca());
      assertEquals((-270.0), veiculo0.getPreco(), 0.01);
      assertEquals((-270), veiculo0.getAutonomia());
      assertEquals((-270.0), veiculo0.getConsumo(), 0.01);
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getMatricula());
      assertTrue(veiculo0.getDisponibilidade());
      assertTrue(boolean0);
      assertEquals("+/pXB@)_)]WXW", veiculo0.getNIF());
      assertEquals((-270), veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia((-1794), (-284));
      assertFalse(boolean0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia(1609, 1609);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(boolean0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1365.0), 4.0);
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.tempoViagemCarroJa(coordinate0);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(81900, int0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      double double0 = veiculo0.custoViagem(0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals(0, veiculo1.getVelocidade());
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1239, 0.0);
      Veiculo veiculo0 = new Veiculo();
      Weather weather0 = new Weather();
      int int0 = veiculo0.tempoViagemCarro(coordinate0, weather0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, int0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      String string0 = veiculo0.toString();
      assertEquals("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1239, 0.0);
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.tempoAteVeiculoPéJa(coordinate0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(18585, int0);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1405.28758258), 2.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Posi\u00E7\u00E3o (latitude e longitude): ", "Posi\u00E7\u00E3o (latitude e longitude): ", "+/pXB@)_)]WXW", (-270), (-270), (-270), (-270), coordinate0, true, (-270), linkedList0);
      veiculo0.abastecerVeiculo((-270));
      assertEquals((-269), veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      veiculo0.setDatasAlugueres(list0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setAutonomia(1886);
      assertEquals(1886, veiculo0.getAutonomia());
  }
}
