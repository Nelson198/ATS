{"version":3,"sources":["webpack:///./src/main/js/components/common/CodeSnippet.css?2955","webpack:///./src/main/js/components/common/CodeSnippet.css","webpack:///./src/main/js/api/web-api.ts","webpack:///./src/main/js/apps/overview/badges/styles.css?8eeb","webpack:///./src/main/js/apps/overview/badges/styles.css","webpack:///./src/main/js/apps/overview/badges/utils.ts","webpack:///./src/main/js/apps/overview/badges/BadgeButton.tsx","webpack:///./src/main/js/apps/overview/badges/BadgeParams.tsx","webpack:///./src/main/js/apps/overview/badges/BadgesModal.tsx","webpack:///./src/main/js/components/common/CodeSnippet.tsx"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","d","__webpack_exports__","fetchWebApi","fetchResponseExample","sonar_ui_common_helpers_request__WEBPACK_IMPORTED_MODULE_0__","_app_utils_throwGlobalError__WEBPACK_IMPORTED_MODULE_1__","showInternal","Object","include_internals","then","r","webServices","catch","domain","action","controller","BadgeType","getBadgeSnippet","type","url","getBadgeUrl","branch","_a","format","_b","metric","project","label","projectUrl","marketing","measure","l10n","key","qualityGate","urls","helpers_urls","mdImage","color","_c","pullRequest","querystring_es3","request","_super","BadgeButton","_this","apply","this","arguments","handleClick","props","onClick","__extends","prototype","render","selected","width","index_js_exposed","buttons","className","classnames","alt","src","BadgeParams","mounted","state","badgeMetrics","getColorOptions","map","value","getFormatOptions","getMetricOptions","metrics","handleColorChange","updateOptions","handleFormatChange","handleMetricChange","renderBadgeType","htmlFor","Select_default","a","clearable","name","onChange","searchable","BadgeParams_extends","componentDidMount","fetchBadgeMetrics","componentWillUnmount","web_api","webservices","find","path","ws","actions","param","params","possibleValues","setState","big-spacer-left","BadgesModal_BadgesModal","BadgesModal","open","selectedType","badgeOptions","handleClose","handleOpen","handleSelectBadge","handleUpdateOptions","__assign","BadgesModal_extends","branchLike","qualifier","header","fullBadgeOptions","branches","badges","system","Modal_default","contentLabel","onRequestClose","badges_BadgeButton","badges_BadgeParams","CodeSnippet","isOneLine","snippet","classnames__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","sonar_ui_common_components_controls_clipboard__WEBPACK_IMPORTED_MODULE_2__","s","noCopy","wrap","snippetArray","Array","isArray","filter","line","finalSnippet","join","code-snippet-oneline","code-snippet-wrap","copyValue"],"mappings":"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","file":"js/341.1570825310815.chunk.js","sourcesContent":["\nvar content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./CodeSnippet.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./CodeSnippet.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./CodeSnippet.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".code-snippet{position:relative;margin:8px 0;background:#404040;color:#f0f0f0;border-radius:3px}.code-snippet pre{padding:16px;overflow:auto}.code-snippet>button{position:absolute;top:16px;right:16px;line-height:18px;border:1px solid #fff;color:#fff;font-size:11px;font-weight:400;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.code-snippet>button:active,.code-snippet>button:focus,.code-snippet>button:hover{background-color:#fff;color:#404040}.code-snippet-oneline pre{padding-bottom:40px}.code-snippet-oneline>button{top:auto;bottom:16px}.code-snippet-wrap pre{white-space:pre-wrap;word-break:break-all}.code-snippet .highlight{font-weight:700;color:#f4b1b0}.code-snippet .button-icon{color:#fff!important}.code-snippet .button-icon:active svg,.code-snippet .button-icon:focus svg,.code-snippet .button-icon:hover svg{background-color:#fff;color:#404040}\", \"\"]);\n\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\ninterface RawDomain {\n  actions: T.WebApi.Action[];\n  deprecatedSince?: string;\n  description: string;\n  internal: boolean;\n  path: string;\n  since?: string;\n}\n\nexport function fetchWebApi(showInternal = true): Promise<RawDomain[]> {\n  return getJSON('/api/webservices/list', { include_internals: showInternal })\n    .then(r => r.webServices)\n    .catch(throwGlobalError);\n}\n\nexport function fetchResponseExample(domain: string, action: string): Promise<T.WebApi.Example> {\n  return getJSON('/api/webservices/response_example', { controller: domain, action }).catch(\n    throwGlobalError\n  );\n}\n","\nvar content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".badges-list{display:flex;justify-content:space-around;justify-content:space-evenly;flex-wrap:nowrap}.badge-button{display:flex;justify-content:center;padding:8px;min-width:146px;height:116px;background-color:#f3f3f3;border:1px solid #e6e6e6;border-radius:3px;transition:all .3s ease}.badge-button:active,.badge-button:focus,.badge-button:hover{background-color:#f3f3f3;border-color:#4b9fd5;box-shadow:none}.badge-button.selected{background-color:#cae3f2;border-color:#236a97}\", \"\"]);\n\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { stringify } from 'querystring';\nimport { getLocalizedMetricName } from 'sonar-ui-common/helpers/l10n';\nimport { omitNil } from 'sonar-ui-common/helpers/request';\nimport { getHostUrl, getPathUrlAsString } from 'sonar-ui-common/helpers/urls';\nimport { getProjectUrl } from '../../../helpers/urls';\n\nexport type BadgeColors = 'white' | 'black' | 'orange';\nexport type BadgeFormats = 'md' | 'url';\n\nexport interface BadgeOptions {\n  branch?: string;\n  color?: BadgeColors;\n  format?: BadgeFormats;\n  project?: string;\n  metric?: string;\n  pullRequest?: string;\n}\n\nexport enum BadgeType {\n  measure = 'measure',\n  qualityGate = 'quality_gate',\n  marketing = 'marketing'\n}\n\nexport function getBadgeSnippet(type: BadgeType, options: BadgeOptions) {\n  const url = getBadgeUrl(type, options);\n  const { branch, format = 'md', metric = 'alert_status', project } = options;\n\n  if (format === 'url') {\n    return url;\n  } else {\n    let label;\n    let projectUrl;\n\n    switch (type) {\n      case BadgeType.marketing:\n        label = 'SonarCloud';\n        break;\n      case BadgeType.measure:\n        label = getLocalizedMetricName({ key: metric });\n        break;\n      case BadgeType.qualityGate:\n      default:\n        label = 'Quality gate';\n        break;\n    }\n\n    if (project) {\n      projectUrl = getPathUrlAsString(getProjectUrl(project, branch), false);\n    }\n\n    const mdImage = `![${label}](${url})`;\n    return projectUrl ? `[${mdImage}](${projectUrl})` : mdImage;\n  }\n}\n\nexport function getBadgeUrl(\n  type: BadgeType,\n  { branch, project, color = 'white', metric = 'alert_status', pullRequest }: BadgeOptions\n) {\n  switch (type) {\n    case BadgeType.marketing:\n      return `${getHostUrl()}/images/project_badges/sonarcloud-${color}.svg`;\n    case BadgeType.qualityGate:\n      return `${getHostUrl()}/api/project_badges/quality_gate?${stringify(\n        omitNil({ branch, project, pullRequest })\n      )}`;\n    case BadgeType.measure:\n    default:\n      return `${getHostUrl()}/api/project_badges/measure?${stringify(\n        omitNil({ branch, project, metric, pullRequest })\n      )}`;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { BadgeType } from './utils';\n\ninterface Props {\n  onClick: (type: BadgeType) => void;\n  selected: boolean;\n  type: BadgeType;\n  url: string;\n}\n\nexport default class BadgeButton extends React.PureComponent<Props> {\n  handleClick = () => {\n    this.props.onClick(this.props.type);\n  };\n\n  render() {\n    const { selected, type, url } = this.props;\n    const width = type !== BadgeType.measure ? '128px' : undefined;\n    return (\n      <Button className={classNames('badge-button', { selected })} onClick={this.handleClick}>\n        <img alt={translate('overview.badges', type, 'alt')} src={url} width={width} />\n      </Button>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { fetchWebApi } from '../../../api/web-api';\nimport { BadgeColors, BadgeFormats, BadgeOptions, BadgeType } from './utils';\n\ninterface Props {\n  className?: string;\n  metrics: T.Dict<T.Metric>;\n  options: BadgeOptions;\n  type: BadgeType;\n  updateOptions: (options: Partial<BadgeOptions>) => void;\n}\n\ninterface State {\n  badgeMetrics: string[];\n}\n\nexport default class BadgeParams extends React.PureComponent<Props> {\n  mounted = false;\n\n  state: State = { badgeMetrics: [] };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBadgeMetrics();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchBadgeMetrics() {\n    fetchWebApi(false).then(\n      webservices => {\n        if (this.mounted) {\n          const domain = webservices.find(domain => domain.path === 'api/project_badges');\n          const ws = domain && domain.actions.find(ws => ws.key === 'measure');\n          const param = ws && ws.params && ws.params.find(param => param.key === 'metric');\n          if (param && param.possibleValues) {\n            this.setState({ badgeMetrics: param.possibleValues });\n          }\n        }\n      },\n      () => {}\n    );\n  }\n\n  getColorOptions = () => {\n    return ['white', 'black', 'orange'].map(color => ({\n      label: translate('overview.badges.options.colors', color),\n      value: color\n    }));\n  };\n\n  getFormatOptions = () => {\n    return ['md', 'url'].map(format => ({\n      label: translate('overview.badges.options.formats', format),\n      value: format\n    }));\n  };\n\n  getMetricOptions = () => {\n    return this.state.badgeMetrics.map(key => {\n      const metric = this.props.metrics[key];\n      return {\n        value: key,\n        label: metric ? getLocalizedMetricName(metric) : key\n      };\n    });\n  };\n\n  handleColorChange = ({ value }: { value: BadgeColors }) => {\n    this.props.updateOptions({ color: value });\n  };\n\n  handleFormatChange = ({ value }: { value: BadgeFormats }) => {\n    this.props.updateOptions({ format: value });\n  };\n\n  handleMetricChange = ({ value }: { value: string }) => {\n    this.props.updateOptions({ metric: value });\n  };\n\n  renderBadgeType = (type: BadgeType, options: BadgeOptions) => {\n    if (type === BadgeType.marketing) {\n      return (\n        <>\n          <label className=\"spacer-right\" htmlFor=\"badge-color\">\n            {translate('color')}:\n          </label>\n          <Select\n            className=\"input-medium\"\n            clearable={false}\n            name=\"badge-color\"\n            onChange={this.handleColorChange}\n            options={this.getColorOptions()}\n            searchable={false}\n            value={options.color}\n          />\n        </>\n      );\n    } else if (type === BadgeType.measure) {\n      return (\n        <>\n          <label className=\"spacer-right\" htmlFor=\"badge-metric\">\n            {translate('overview.badges.metric')}:\n          </label>\n          <Select\n            className=\"input-medium\"\n            clearable={false}\n            name=\"badge-metric\"\n            onChange={this.handleMetricChange}\n            options={this.getMetricOptions()}\n            searchable={false}\n            value={options.metric}\n          />\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  render() {\n    const { className, options, type } = this.props;\n    return (\n      <div className={className}>\n        {this.renderBadgeType(type, options)}\n\n        <label\n          className={classNames('spacer-right', {\n            'big-spacer-left': type !== BadgeType.qualityGate\n          })}\n          htmlFor=\"badge-format\">\n          {translate('format')}:\n        </label>\n        <Select\n          className=\"input-medium\"\n          clearable={false}\n          name=\"badge-format\"\n          onChange={this.handleFormatChange}\n          options={this.getFormatOptions()}\n          searchable={false}\n          value={this.props.options.format || 'md'}\n        />\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button, ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport CodeSnippet from '../../../components/common/CodeSnippet';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\nimport { isSonarCloud } from '../../../helpers/system';\nimport BadgeButton from './BadgeButton';\nimport BadgeParams from './BadgeParams';\nimport './styles.css';\nimport { BadgeOptions, BadgeType, getBadgeSnippet, getBadgeUrl } from './utils';\n\ninterface Props {\n  branchLike?: T.BranchLike;\n  metrics: T.Dict<T.Metric>;\n  project: string;\n  qualifier: string;\n}\n\ninterface State {\n  open: boolean;\n  selectedType: BadgeType;\n  badgeOptions: BadgeOptions;\n}\n\nexport default class BadgesModal extends React.PureComponent<Props, State> {\n  state: State = {\n    open: false,\n    selectedType: BadgeType.measure,\n    badgeOptions: { color: 'white', metric: 'alert_status' }\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleSelectBadge = (selectedType: BadgeType) => {\n    this.setState({ selectedType });\n  };\n\n  handleUpdateOptions = (options: Partial<BadgeOptions>) => {\n    this.setState(state => ({ badgeOptions: { ...state.badgeOptions, ...options } }));\n  };\n\n  render() {\n    const { branchLike, project, qualifier } = this.props;\n    const { selectedType, badgeOptions } = this.state;\n    const header = translate('overview.badges.title');\n    const fullBadgeOptions = { project, ...badgeOptions, ...getBranchLikeQuery(branchLike) };\n    const badges = isSonarCloud()\n      ? [BadgeType.measure, BadgeType.qualityGate, BadgeType.marketing]\n      : [BadgeType.measure, BadgeType.qualityGate];\n    return (\n      <div className=\"overview-meta-card\">\n        <Button className=\"js-project-badges\" onClick={this.handleOpen}>\n          {translate('overview.badges.get_badge', qualifier)}\n        </Button>\n        {this.state.open && (\n          <Modal contentLabel={header} onRequestClose={this.handleClose}>\n            <header className=\"modal-head\">\n              <h2>{header}</h2>\n            </header>\n            <div className=\"modal-body\">\n              <p className=\"huge-spacer-bottom\">\n                {translate('overview.badges.description', qualifier)}\n              </p>\n              <div className=\"badges-list spacer-bottom\">\n                {badges.map(type => (\n                  <BadgeButton\n                    key={type}\n                    onClick={this.handleSelectBadge}\n                    selected={type === selectedType}\n                    type={type}\n                    url={getBadgeUrl(type, fullBadgeOptions)}\n                  />\n                ))}\n              </div>\n              <p className=\"text-center note huge-spacer-bottom\">\n                {translate('overview.badges', selectedType, 'description', qualifier)}\n              </p>\n              <BadgeParams\n                className=\"big-spacer-bottom\"\n                metrics={this.props.metrics}\n                options={badgeOptions}\n                type={selectedType}\n                updateOptions={this.handleUpdateOptions}\n              />\n              <CodeSnippet\n                isOneLine={true}\n                snippet={getBadgeSnippet(selectedType, fullBadgeOptions)}\n              />\n            </div>\n            <footer className=\"modal-foot\">\n              <ResetButtonLink className=\"js-modal-close\" onClick={this.handleClose}>\n                {translate('close')}\n              </ResetButtonLink>\n            </footer>\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport './CodeSnippet.css';\n\ninterface Props {\n  className?: string;\n  isOneLine?: boolean;\n  noCopy?: boolean;\n  render?: () => JSX.Element;\n  snippet: string | (string | undefined)[];\n  wrap?: boolean;\n}\n\n// keep this \"useless\" concatentation for the readability reason\n// eslint-disable-next-line no-useless-concat\nconst s = ' \\\\' + '\\n  ';\n\nexport default function CodeSnippet({\n  className,\n  isOneLine,\n  noCopy,\n  render,\n  snippet,\n  wrap\n}: Props) {\n  const snippetArray = Array.isArray(snippet)\n    ? snippet.filter(line => line !== undefined)\n    : [snippet];\n  const finalSnippet = isOneLine ? snippetArray.join(' ') : snippetArray.join(s);\n  return (\n    <div\n      className={classNames(\n        'code-snippet',\n        { 'code-snippet-oneline': isOneLine, 'code-snippet-wrap': wrap },\n        className\n      )}>\n      <pre>{render ? render() : finalSnippet}</pre>\n      {!noCopy && <ClipboardButton copyValue={finalSnippet} />}\n    </div>\n  );\n}\n"],"sourceRoot":""}