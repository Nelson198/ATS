{"version":3,"sources":["webpack:///./src/main/js/apps/overview/pullRequests/AfterMergeEstimate.tsx","webpack:///./src/main/js/apps/overview/pullRequests/IssueLabel.tsx","webpack:///./src/main/js/apps/overview/pullRequests/IssueRating.tsx","webpack:///./src/main/js/apps/overview/pullRequests/LargeQualityGateBadge.tsx","webpack:///./src/main/js/apps/overview/pullRequests/MeasurementLabel.tsx","webpack:///./src/main/js/apps/overview/pullRequests/ReviewApp.tsx"],"names":["AfterMergeEstimate","_a","className","measures","type","afterMergeMetric","utils","measure","Object","js_helpers_measures","undefined","value","index_js_exposed","classnames","helpers_measures","l10n","IssueLabel","branchLike","component","docTooltip","_b","metric","iconClass","measure_utils","params","__assign","branches","resolved","types","react_router_es","to","urls","key","DocTooltip","doc","IssueRating","rating","tooltip","Number","Tooltip_default","a","overlay","DrilldownLink","Rating_default","LargeQualityGateBadge","path","level","success","system","qualityGate","organization","failed","HelpTooltip_default","index_es","defaultMessage","id","values","link","HelpIcon_default","fill","theme","transparentWhite","size","_super","MeasurementLabel","_this","apply","this","arguments","getLabelText","props","expandedLabelKey","linesMetric","labelKey","count","__extends","prototype","render","ReviewApp_ReviewApp","ReviewApp","mounted","state","loading","fetchBranchData","setState","Promise","all","api_measures","ReviewApp_assign","metricKeys","join","fetchBranchStatus","then","ReviewApp_extends","componentDidMount","componentWillUnmount","conditions","ignoredConditions","status","erroredConditions","filter","condition","has-conditions","length","Alert","display","variant","resolve","__webpack_require__","bind","QualityGateConditions","collapsible","map","pullRequests_MeasurementLabel","mapDispatchToProps","rootActions","__webpack_exports__","es","rootReducer"],"mappings":"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","file":"js/378.1570825310815.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { findMeasure } from '../../../helpers/measures';\nimport { MEASUREMENTS_MAP, MeasurementType } from '../utils';\n\ninterface Props {\n  className?: string;\n  measures: T.Measure[];\n  type: MeasurementType;\n}\n\nexport default function AfterMergeEstimate({ className, measures, type }: Props) {\n  const { afterMergeMetric } = MEASUREMENTS_MAP[type];\n\n  const measure = findMeasure(measures, afterMergeMetric);\n\n  if (!measure || measure.value === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(className, 'display-flex-center')}>\n      <span className=\"huge\">{formatMeasure(measure.value, 'PERCENT')}</span>\n      <span className=\"label flex-1\">\n        {translate('component_measures.facet_category.overall_category.estimated')}\n      </span>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport DocTooltip from '../../../components/docs/DocTooltip';\nimport { getLeakValue } from '../../../components/measure/utils';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\nimport { findMeasure } from '../../../helpers/measures';\nimport { getComponentIssuesUrl } from '../../../helpers/urls';\nimport { getMetricName, IssueType, ISSUETYPE_MAP } from '../utils';\n\nexport interface Props {\n  branchLike?: T.ShortLivingBranch | T.PullRequest;\n  className?: string;\n  component: T.Component;\n  docTooltip?: Promise<{ default: string }>;\n  measures: T.Measure[];\n  type: IssueType;\n}\n\nexport default function IssueLabel({\n  branchLike,\n  className,\n  component,\n  docTooltip,\n  measures,\n  type\n}: Props) {\n  const { metric, iconClass } = ISSUETYPE_MAP[type];\n  const measure = findMeasure(measures, metric);\n\n  let value;\n  if (measure) {\n    value = getLeakValue(measure);\n  }\n\n  const params = {\n    ...getBranchLikeQuery(branchLike),\n    resolved: 'false',\n    types: type\n  };\n\n  return (\n    <>\n      {value === undefined ? (\n        <span className={classNames(className, 'measure-empty')}>—</span>\n      ) : (\n        <Link className={className} to={getComponentIssuesUrl(component.key, params)}>\n          {formatMeasure(value, 'SHORT_INT')}\n        </Link>\n      )}\n      {React.createElement(iconClass, { className: 'big-spacer-left little-spacer-right' })}\n      {getMetricName(metric)}\n      {docTooltip && <DocTooltip className=\"little-spacer-left\" doc={docTooltip} />}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport Rating from 'sonar-ui-common/components/ui/Rating';\nimport { getLeakValue, getRatingTooltip } from '../../../components/measure/utils';\nimport DrilldownLink from '../../../components/shared/DrilldownLink';\nimport { findMeasure } from '../../../helpers/measures';\nimport { getRatingName, IssueType, ISSUETYPE_MAP } from '../utils';\n\ninterface Props {\n  branchLike?: T.ShortLivingBranch | T.PullRequest;\n  component: T.Component;\n  measures: T.Measure[];\n  type: IssueType;\n}\n\nexport default function IssueRating({ branchLike, component, measures, type }: Props) {\n  const { rating } = ISSUETYPE_MAP[type];\n  const measure = findMeasure(measures, rating);\n\n  if (!rating || !measure) {\n    return null;\n  }\n\n  const value = getLeakValue(measure);\n  const tooltip = value && getRatingTooltip(rating, Number(value));\n\n  return (\n    <>\n      <span className=\"big-spacer-right flex-1\">{getRatingName(type)}</span>\n      <Tooltip overlay={tooltip}>\n        <span>\n          <DrilldownLink\n            branchLike={branchLike}\n            className=\"link-no-underline\"\n            component={component.key}\n            metric={rating}>\n            <Rating value={value} />\n          </DrilldownLink>\n        </span>\n      </Tooltip>\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport HelpIcon from 'sonar-ui-common/components/icons/HelpIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { isSonarCloud } from '../../../helpers/system';\nimport { getQualityGatesUrl, getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  component: T.Component;\n  level?: T.Status;\n}\n\nexport default function LargeQualityGateBadge({ component, level }: Props) {\n  const success = level === 'OK';\n\n  let path;\n  if (isSonarCloud()) {\n    path =\n      component.qualityGate === undefined\n        ? getQualityGatesUrl(component.organization)\n        : getQualityGateUrl(component.qualityGate.key, component.organization);\n  } else {\n    path =\n      component.qualityGate === undefined\n        ? getQualityGatesUrl()\n        : getQualityGateUrl(component.qualityGate.key);\n  }\n\n  return (\n    <div\n      className={classNames('quality-gate-badge-large small', {\n        failed: !success,\n        success\n      })}>\n      <div className=\"display-flex-center\">\n        <span>{translate('overview.on_new_code_long')}</span>\n\n        <HelpTooltip\n          className=\"little-spacer-left\"\n          overlay={\n            <FormattedMessage\n              defaultMessage={translate('overview.quality_gate.conditions_on_new_code')}\n              id=\"overview.quality_gate.conditions_on_new_code\"\n              values={{\n                link: <Link to={path}>{translate('overview.quality_gate')}</Link>\n              }}\n            />\n          }>\n          <HelpIcon fill={colors.transparentWhite} size={12} />\n        </HelpTooltip>\n      </div>\n      {level !== undefined && (\n        <h4 className=\"huge-spacer-top huge\">{translate('metric.level', level)}</h4>\n      )}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { getLeakValue } from '../../../components/measure/utils';\nimport DrilldownLink from '../../../components/shared/DrilldownLink';\nimport { findMeasure } from '../../../helpers/measures';\nimport { MEASUREMENTS_MAP, MeasurementType } from '../utils';\n\ninterface Props {\n  branchLike?: T.BranchLike;\n  className?: string;\n  component: T.Component;\n  measures: T.Measure[];\n  type: MeasurementType;\n}\n\nexport default class MeasurementLabel extends React.Component<Props> {\n  getLabelText = () => {\n    const { branchLike, component, measures, type } = this.props;\n    const { expandedLabelKey, linesMetric, labelKey } = MEASUREMENTS_MAP[type];\n\n    const measure = findMeasure(measures, linesMetric);\n    if (!measure) {\n      return translate(labelKey);\n    } else {\n      return (\n        <FormattedMessage\n          defaultMessage={translate(expandedLabelKey)}\n          id={expandedLabelKey}\n          values={{\n            count: (\n              <DrilldownLink branchLike={branchLike} component={component.key} metric={linesMetric}>\n                {formatMeasure(getLeakValue(measure), 'SHORT_INT')}\n              </DrilldownLink>\n            )\n          }}\n        />\n      );\n    }\n  };\n\n  render() {\n    const { branchLike, className, component, measures, type } = this.props;\n    const { iconClass, metric } = MEASUREMENTS_MAP[type];\n\n    const measure = findMeasure(measures, metric);\n\n    let value;\n    if (measure) {\n      value = getLeakValue(measure);\n    }\n\n    return (\n      <>\n        {value === undefined ? (\n          <span className={classNames(className, 'measure-empty')}>—</span>\n        ) : (\n          <>\n            <span className=\"big-spacer-right\">\n              {React.createElement(iconClass, { size: 'big', value: Number(value) })}\n            </span>\n            <DrilldownLink\n              branchLike={branchLike}\n              className={className}\n              component={component.key}\n              metric={metric}>\n              {formatMeasure(value, 'PERCENT')}\n            </DrilldownLink>\n          </>\n        )}\n        <span className=\"big-spacer-left\">{this.getLabelText()}</span>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getMeasures } from '../../../api/measures';\nimport DocTooltip from '../../../components/docs/DocTooltip';\nimport { getBranchLikeQuery } from '../../../helpers/branches';\nimport { fetchBranchStatus } from '../../../store/rootActions';\nimport { getBranchStatusByBranchLike, Store } from '../../../store/rootReducer';\nimport QualityGateConditions from '../qualityGate/QualityGateConditions';\nimport '../styles.css';\nimport { IssueType, MeasurementType, PR_METRICS } from '../utils';\nimport AfterMergeEstimate from './AfterMergeEstimate';\nimport IssueLabel from './IssueLabel';\nimport IssueRating from './IssueRating';\nimport LargeQualityGateBadge from './LargeQualityGateBadge';\nimport MeasurementLabel from './MeasurementLabel';\n\ninterface OwnProps {\n  branchLike: T.PullRequest | T.ShortLivingBranch;\n  component: T.Component;\n}\n\ninterface StateProps {\n  conditions?: T.QualityGateStatusCondition[];\n  ignoredConditions?: boolean;\n  status?: T.Status;\n}\n\ninterface DispatchProps {\n  fetchBranchStatus: (branchLike: T.BranchLike, projectKey: string) => Promise<void>;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface State {\n  loading: boolean;\n  measures: T.Measure[];\n}\n\nexport class ReviewApp extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  state: State = {\n    loading: false,\n    measures: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranchData();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchBranchData = () => {\n    const { branchLike, component } = this.props;\n\n    this.setState({ loading: true });\n\n    Promise.all([\n      getMeasures({\n        component: component.key,\n        metricKeys: PR_METRICS.join(),\n        ...getBranchLikeQuery(branchLike)\n      }),\n      this.props.fetchBranchStatus(branchLike, component.key)\n    ]).then(\n      ([measures]) => {\n        if (this.mounted && measures) {\n          this.setState({\n            loading: false,\n            measures\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  render() {\n    const { branchLike, component, conditions, ignoredConditions, status } = this.props;\n    const { loading, measures } = this.state;\n\n    if (loading || !conditions) {\n      return (\n        <div className=\"page page-limited\">\n          <i className=\"spinner\" />\n        </div>\n      );\n    }\n\n    const erroredConditions = conditions.filter(condition => condition.level === 'ERROR');\n\n    return (\n      <div className=\"page page-limited\">\n        <div\n          className={classNames('pr-overview', {\n            'has-conditions': erroredConditions.length > 0\n          })}>\n          {ignoredConditions && (\n            <Alert className=\"big-spacer-bottom\" display=\"inline\" variant=\"info\">\n              <span className=\"text-middle\">\n                {translate('overview.quality_gate.ignored_conditions')}\n              </span>\n              <HelpTooltip\n                className=\"spacer-left\"\n                overlay={translate('overview.quality_gate.ignored_conditions.tooltip')}\n              />\n            </Alert>\n          )}\n          <div className=\"display-flex-row\">\n            <div className=\"pr-overview-quality-gate big-spacer-right\">\n              <h3 className=\"spacer-bottom small\">\n                {translate('overview.quality_gate')}\n                <DocTooltip\n                  className=\"spacer-left\"\n                  doc={import(/* webpackMode: \"eager\" */ 'Docs/tooltips/quality-gates/project-homepage-quality-gate.md')}\n                />\n              </h3>\n              <LargeQualityGateBadge component={component} level={status} />\n            </div>\n\n            {erroredConditions.length > 0 && (\n              <div className=\"pr-overview-failed-conditions big-spacer-right\">\n                <h3 className=\"spacer-bottom small\">{translate('overview.failed_conditions')}</h3>\n                <QualityGateConditions\n                  branchLike={branchLike}\n                  collapsible={true}\n                  component={component}\n                  conditions={erroredConditions}\n                />\n              </div>\n            )}\n\n            <div className=\"pr-overview-measurements flex-1\">\n              <h3 className=\"spacer-bottom small\">{translate('overview.metrics')}</h3>\n\n              {['BUG', 'VULNERABILITY', 'CODE_SMELL'].map((type: IssueType) => (\n                <div className=\"pr-overview-measurements-row display-flex-row\" key={type}>\n                  <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">\n                    <IssueLabel\n                      branchLike={branchLike}\n                      className=\"overview-domain-measure-value\"\n                      component={component}\n                      measures={measures}\n                      type={type}\n                    />\n                  </div>\n                  {type === 'VULNERABILITY' && (\n                    <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">\n                      <IssueLabel\n                        branchLike={branchLike}\n                        className=\"overview-domain-measure-value\"\n                        component={component}\n                        docTooltip={import(/* webpackMode: \"eager\" */ 'Docs/tooltips/metrics/security-hotspots.md')}\n                        measures={measures}\n                        type=\"SECURITY_HOTSPOT\"\n                      />\n                    </div>\n                  )}\n                  <div className=\"pr-overview-measurements-rating display-flex-center\">\n                    <IssueRating\n                      branchLike={branchLike}\n                      component={component}\n                      measures={measures}\n                      type={type}\n                    />\n                  </div>\n                </div>\n              ))}\n\n              {['COVERAGE', 'DUPLICATION'].map((type: MeasurementType) => (\n                <div className=\"pr-overview-measurements-row display-flex-row\" key={type}>\n                  <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">\n                    <MeasurementLabel\n                      branchLike={branchLike}\n                      className=\"overview-domain-measure-value\"\n                      component={component}\n                      measures={measures}\n                      type={type}\n                    />\n                  </div>\n\n                  <AfterMergeEstimate\n                    className=\"pr-overview-measurements-estimate\"\n                    measures={measures}\n                    type={type}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store, { branchLike, component }: OwnProps) => {\n  const { conditions, ignoredConditions, status } = getBranchStatusByBranchLike(\n    state,\n    component.key,\n    branchLike\n  );\n  return { conditions, ignoredConditions, status };\n};\n\nconst mapDispatchToProps = { fetchBranchStatus: fetchBranchStatus as any };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReviewApp);\n"],"sourceRoot":""}