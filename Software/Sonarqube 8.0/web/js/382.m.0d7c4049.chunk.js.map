{"version":3,"sources":["webpack:///./src/main/js/apps/settings/encryption/EncryptionForm.tsx","webpack:///./src/main/js/apps/settings/encryption/GenerateSecretKeyForm.tsx","webpack:///./src/main/js/apps/settings/encryption/EncryptionApp.tsx"],"names":["EncryptionForm_EncryptionForm","index_js_exposed","[object Object]","this","mounted","state","encrypting","generating","value","handleChange","event","setState","currentTarget","handleEncrypt","preventDefault","Object","settings","then","_ref","encryptedValue","handleGenerateSecretKey","props","generateSecretKey","stopGenerating","_this$state","id","className","l10n","onSubmit","autoFocus","onChange","required","rows","buttons","disabled","DeferredSpinner_default","a","loading","readOnly","type","clipboard","copyValue","index_es","defaultMessage","values","moreInformationLink","href","rel","target","GenerateSecretKeyForm_GenerateSecretKeyForm","submitting","handleSubmit","stopSubmitting","secretKey","secret_file","property","propreties_file","__webpack_require__","d","__webpack_exports__","EncryptionApp_EncryptionApp","checkSecretKey","secretKeyAvailable","_ref2","Helmet_default","title"],"mappings":"8LAsCe,MAAMA,UAAuBC,EAAA,cAA5CC,kCACEC,KAAAC,SAAU,EACVD,KAAAE,MAAe,CAAEC,YAAY,EAAOC,YAAY,EAAOC,MAAO,IAU9DL,KAAAM,aAAgBC,IACdP,KAAKQ,SAAS,CAAEH,MAAOE,EAAME,cAAcJ,SAG7CL,KAAAU,cAAiBH,IACfA,EAAMI,iBACNX,KAAKQ,SAAS,CAAEL,YAAY,IAC5BS,OAAAC,EAAA,EAAAD,CAAaZ,KAAKE,MAAMG,OAAOS,KAC7BC,IAAuB,IAApBC,EAAoBD,EAApBC,eACGhB,KAAKC,SACPD,KAAKQ,SAAS,CAAEQ,iBAAgBb,YAAY,KAGhD,KACMH,KAAKC,SACPD,KAAKQ,SAAS,CAAEL,YAAY,OAMpCH,KAAAiB,wBAA2BV,IACzBA,EAAMI,iBACNX,KAAKQ,SAAS,CAAEJ,YAAY,IAC5BJ,KAAKkB,MAAMC,oBAAoBL,KAAKd,KAAKoB,eAAgBpB,KAAKoB,iBAGhEpB,KAAAoB,eAAiB,KACXpB,KAAKC,SACPD,KAAKQ,SAAS,CAAEJ,YAAY,KArChCL,oBACEC,KAAKC,SAAU,EAGjBF,uBACEC,KAAKC,SAAU,EAoCjBF,SAAM,MAAAsB,EAC+CrB,KAAKE,MAAhDc,EADJK,EACIL,eAAgBb,EADpBkB,EACoBlB,WAAYC,EADhCiB,EACgCjB,WACpC,OACEN,EAAA,qBAAKwB,GAAG,6BACNxB,EAAA,qBAAKyB,UAAU,iBAAiBX,OAAAY,EAAA,UAAAZ,CAAU,0BAC1Cd,EAAA,sBAAMyB,UAAU,oBAAoBD,GAAG,kBAAkBG,SAAUzB,KAAKU,eACtEZ,EAAA,0BACE4B,WAAW,EACXH,UAAU,gBACVD,GAAG,wBACHK,SAAU3B,KAAKM,aACfsB,UAAU,EACVC,KAAM,EACNxB,MAAOL,KAAKE,MAAMG,QAEpBP,EAAA,qBAAKyB,UAAU,cACbzB,EAAA,cAACgC,EAAA,aAAY,CAACC,SAAU5B,GAAcC,GACnCQ,OAAAY,EAAA,UAAAZ,CAAU,uBAEbd,EAAA,cAACkC,EAAAC,EAAe,CAACV,UAAU,cAAcW,QAAS/B,MAIrDa,GACClB,EAAA,yBACEA,EAAA,sBAAMyB,UAAU,uBAAuBX,OAAAY,EAAA,UAAAZ,CAAU,+BACjDd,EAAA,uBACEyB,UAAU,2CACVD,GAAG,kBACHa,UAAU,EACVC,KAAK,OACL/B,MAAOW,IAETlB,EAAA,cAACuC,EAAA,gBAAe,CAACd,UAAU,qBAAqBe,UAAWtB,KAI/DlB,EAAA,sBACEyB,UAAU,+BACVD,GAAG,0BACHG,SAAUzB,KAAKiB,yBACfnB,EAAA,mBAAGyB,UAAU,gCACXzB,EAAA,cAACyC,EAAA,iBAAgB,CACfC,eAAgB5B,OAAAY,EAAA,UAAAZ,CAAU,wBAC1BU,GAAG,uBACHmB,OAAQ,CACNC,oBACE5C,EAAA,mBACE6C,KAAK,gEACLC,IAAI,sBACJC,OAAO,UACNjC,OAAAY,EAAA,UAAAZ,CAAU,yBAOrBd,EAAA,cAACgC,EAAA,aAAY,CAACC,SAAU3B,GAAcD,GACnCS,OAAAY,EAAA,UAAAZ,CAAU,sCAAuC,KAEpDd,EAAA,cAACkC,EAAAC,EAAe,CAACV,UAAU,cAAcW,QAAS9B,OC7G7C,MAAM0C,UAA8BhD,EAAA,cAAnDC,kCACEC,KAAAC,SAAU,EACVD,KAAAE,MAAe,CAAE6C,YAAY,GAU7B/C,KAAAgD,aAAgBzC,IACdA,EAAMI,iBACNX,KAAKQ,SAAS,CAAEuC,YAAY,IAC5B/C,KAAKkB,MAAMC,oBAAoBL,KAAKd,KAAKiD,eAAgBjD,KAAKiD,iBAGhEjD,KAAAiD,eAAiB,KACXjD,KAAKC,SACPD,KAAKQ,SAAS,CAAEuC,YAAY,KAhBhChD,oBACEC,KAAKC,SAAU,EAGjBF,uBACEC,KAAKC,SAAU,EAejBF,SAAM,MACImD,EAAclD,KAAKkB,MAAnBgC,UACAH,EAAe/C,KAAKE,MAApB6C,WACR,OACEjD,EAAA,qBAAKwB,GAAG,sCACL4B,EACCpD,EAAA,cAAAA,EAAA,cACEA,EAAA,qBAAKyB,UAAU,qBACbzB,EAAA,oBAAIyB,UAAU,iBAAiBX,OAAAY,EAAA,UAAAZ,CAAU,0BACzCd,EAAA,uBACEyB,UAAU,qCACVD,GAAG,aACHa,UAAU,EACVC,KAAK,OACL/B,MAAO6C,IAETpD,EAAA,cAACuC,EAAA,gBAAe,CAACd,UAAU,qBAAqBe,UAAWY,KAE7DpD,EAAA,oBAAIyB,UAAU,iBAAiBX,OAAAY,EAAA,UAAAZ,CAAU,0BACzCd,EAAA,qBAAKyB,UAAU,YACbzB,EAAA,wBACEA,EAAA,wBACEA,EAAA,cAACyC,EAAA,iBAAgB,CACfC,eAAgB5B,OAAAY,EAAA,UAAAZ,CAAU,kCAC1BU,GAAG,iCACHmB,OAAQ,CACNU,YAAarD,EAAA,uDACbsD,SAAUtD,EAAA,iDACVuD,gBAAiBvD,EAAA,uDAIvBA,EAAA,wBAAKc,OAAAY,EAAA,UAAAZ,CAAU,mCACfd,EAAA,wBACEA,EAAA,cAACyC,EAAA,iBAAgB,CACfC,eAAgB5B,OAAAY,EAAA,UAAAZ,CAAU,kCAC1BU,GAAG,iCACHmB,OAAQ,CACNW,SAAUtD,EAAA,qDAIhBA,EAAA,wBAAKc,OAAAY,EAAA,UAAAZ,CAAU,sCAKrBd,EAAA,sBAAMwB,GAAG,2BAA2BG,SAAUzB,KAAKgD,cACjDlD,EAAA,mBAAGyB,UAAU,iBACXzB,EAAA,cAACyC,EAAA,iBAAgB,CACfC,eAAgB5B,OAAAY,EAAA,UAAAZ,CAAU,qCAC1BU,GAAG,oCACHmB,OAAQ,CACNC,oBACE5C,EAAA,mBACE6C,KAAK,gEACLC,IAAI,sBACJC,OAAO,UACNjC,OAAAY,EAAA,UAAAZ,CAAU,yBAMrBd,EAAA,cAACgC,EAAA,aAAY,CAACC,SAAUgB,GACrBnC,OAAAY,EAAA,UAAAZ,CAAU,mCAEbd,EAAA,cAACkC,EAAAC,EAAe,CAACV,UAAU,cAAcW,QAASa,OC9H9DO,EAAAC,EAAAC,EAAA,4BAAAC,IAiCe,MAAMA,UAAsB3D,EAAA,cAA3CC,kCACEC,KAAAE,MAAe,CAAEgC,SAAS,GAC1BlC,KAAAC,SAAU,EAWVD,KAAA0D,eAAiB,KACf9C,OAAAC,EAAA,EAAAD,GAAiBE,KACfC,IAA2B,IAAxB4C,EAAwB5C,EAAxB4C,mBACG3D,KAAKC,SACPD,KAAKQ,SAAS,CAAE0B,SAAS,EAAOyB,wBAGpC,KACM3D,KAAKC,SACPD,KAAKQ,SAAS,CAAE0B,SAAS,OAMjClC,KAAAmB,kBAAoB,IACXP,OAAAC,EAAA,EAAAD,GAAoBE,KAAK8C,IAAkB,IAAfV,EAAeU,EAAfV,UAC7BlD,KAAKC,SACPD,KAAKQ,SAAS,CAAE0C,YAAWS,oBAAoB,MA3BrD5D,oBACEC,KAAKC,SAAU,EACfD,KAAK0D,iBAGP3D,uBACEC,KAAKC,SAAU,EA0BjBF,SAAM,MAAAsB,EAC+CrB,KAAKE,MAAhDgC,EADJb,EACIa,QAASgB,EADb7B,EACa6B,UAAWS,EADxBtC,EACwBsC,mBAC5B,OACE7D,EAAA,qBAAKyB,UAAU,oBAAoBD,GAAG,mBACpCxB,EAAA,cAAC+D,EAAA5B,EAAM,CAAC6B,MAAOlD,OAAAY,EAAA,UAAAZ,CAAU,2CACzBd,EAAA,wBAAQyB,UAAU,eAChBzB,EAAA,oBAAIyB,UAAU,cAAcX,OAAAY,EAAA,UAAAZ,CAAU,0CACtCd,EAAA,cAACkC,EAAAC,EAAe,CAACC,QAASA,MAG1BA,IAAYyB,GACZ7D,EAAA,cAACgD,EAAqB,CAAC3B,kBAAmBnB,KAAKmB,kBAAmB+B,UAAWA,IAG9ES,GAAsB7D,EAAA,cAACD,EAAc,CAACsB,kBAAmBnB,KAAKmB","file":"js/382.m.0d7c4049.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { encryptValue } from '../../../api/settings';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n}\n\ninterface State {\n  encryptedValue?: string;\n  encrypting: boolean;\n  generating: boolean;\n  value: string;\n}\n\nexport default class EncryptionForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { encrypting: false, generating: false, value: '' };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ value: event.currentTarget.value });\n  };\n\n  handleEncrypt = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ encrypting: true });\n    encryptValue(this.state.value).then(\n      ({ encryptedValue }) => {\n        if (this.mounted) {\n          this.setState({ encryptedValue, encrypting: false });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ encrypting: false });\n        }\n      }\n    );\n  };\n\n  handleGenerateSecretKey = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ generating: true });\n    this.props.generateSecretKey().then(this.stopGenerating, this.stopGenerating);\n  };\n\n  stopGenerating = () => {\n    if (this.mounted) {\n      this.setState({ generating: false });\n    }\n  };\n\n  render() {\n    const { encryptedValue, encrypting, generating } = this.state;\n    return (\n      <div id=\"encryption-form-container\">\n        <div className=\"spacer-bottom\">{translate('encryption.form_intro')}</div>\n        <form className=\"big-spacer-bottom\" id=\"encryption-form\" onSubmit={this.handleEncrypt}>\n          <textarea\n            autoFocus={true}\n            className=\"abs-width-600\"\n            id=\"encryption-form-value\"\n            onChange={this.handleChange}\n            required={true}\n            rows={5}\n            value={this.state.value}\n          />\n          <div className=\"spacer-top\">\n            <SubmitButton disabled={encrypting || generating}>\n              {translate('encryption.encrypt')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={encrypting} />\n          </div>\n        </form>\n\n        {encryptedValue && (\n          <div>\n            <span className=\"little-spacer-right\">{translate('encryption.encrypted_value')}</span>\n            <input\n              className=\"input-clear input-code input-super-large\"\n              id=\"encrypted-value\"\n              readOnly={true}\n              type=\"text\"\n              value={encryptedValue}\n            />\n            <ClipboardButton className=\"little-spacer-left\" copyValue={encryptedValue} />\n          </div>\n        )}\n\n        <form\n          className=\"huge-spacer-top bordered-top\"\n          id=\"encryption-new-key-form\"\n          onSubmit={this.handleGenerateSecretKey}>\n          <p className=\"big-spacer-top spacer-bottom\">\n            <FormattedMessage\n              defaultMessage={translate('encryption.form_note')}\n              id=\"encryption.form_note\"\n              values={{\n                moreInformationLink: (\n                  <a\n                    href=\"https://redirect.sonarsource.com/doc/settings-encryption.html\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    {translate('more_information')}\n                  </a>\n                )\n              }}\n            />\n          </p>\n\n          <SubmitButton disabled={generating || encrypting}>\n            {translate('encryption.generate_new_secret_key')}{' '}\n          </SubmitButton>\n          <DeferredSpinner className=\"spacer-left\" loading={generating} />\n        </form>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n  secretKey?: string;\n}\n\ninterface State {\n  submitting: boolean;\n}\n\nexport default class GenerateSecretKeyForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { submitting: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ submitting: true });\n    this.props.generateSecretKey().then(this.stopSubmitting, this.stopSubmitting);\n  };\n\n  stopSubmitting = () => {\n    if (this.mounted) {\n      this.setState({ submitting: false });\n    }\n  };\n\n  render() {\n    const { secretKey } = this.props;\n    const { submitting } = this.state;\n    return (\n      <div id=\"generate-secret-key-form-container\">\n        {secretKey ? (\n          <>\n            <div className=\"big-spacer-bottom\">\n              <h3 className=\"spacer-bottom\">{translate('encryption.secret_key')}</h3>\n              <input\n                className=\"input-clear input-code input-large\"\n                id=\"secret-key\"\n                readOnly={true}\n                type=\"text\"\n                value={secretKey}\n              />\n              <ClipboardButton className=\"little-spacer-left\" copyValue={secretKey} />\n            </div>\n            <h3 className=\"spacer-bottom\">{translate('encryption.how_to_use')}</h3>\n            <div className=\"markdown\">\n              <ul>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content1')}\n                    id=\"encryption.how_to_use.content1\"\n                    values={{\n                      secret_file: <code>~/.sonar/sonar-secret.txt</code>,\n                      property: <code>sonar.secretKeyPath</code>,\n                      propreties_file: <code>conf/sonar.properties</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content2')}</li>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content3')}\n                    id=\"encryption.how_to_use.content3\"\n                    values={{\n                      property: <code>sonar.secretKeyPath</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content4')}</li>\n              </ul>\n            </div>\n          </>\n        ) : (\n          <form id=\"generate-secret-key-form\" onSubmit={this.handleSubmit}>\n            <p className=\"spacer-bottom\">\n              <FormattedMessage\n                defaultMessage={translate('encryption.secret_key_description')}\n                id=\"encryption.secret_key_description\"\n                values={{\n                  moreInformationLink: (\n                    <a\n                      href=\"https://redirect.sonarsource.com/doc/settings-encryption.html\"\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\">\n                      {translate('more_information')}\n                    </a>\n                  )\n                }}\n              />\n            </p>\n            <SubmitButton disabled={submitting}>\n              {translate('encryption.generate_secret_key')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n          </form>\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { checkSecretKey, generateSecretKey } from '../../../api/settings';\nimport EncryptionForm from './EncryptionForm';\nimport GenerateSecretKeyForm from './GenerateSecretKeyForm';\n\ninterface State {\n  loading: boolean;\n  secretKey?: string;\n  secretKeyAvailable?: boolean;\n}\n\nexport default class EncryptionApp extends React.PureComponent<{}, State> {\n  state: State = { loading: true };\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n    this.checkSecretKey();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkSecretKey = () => {\n    checkSecretKey().then(\n      ({ secretKeyAvailable }) => {\n        if (this.mounted) {\n          this.setState({ loading: false, secretKeyAvailable });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  generateSecretKey = () => {\n    return generateSecretKey().then(({ secretKey }) => {\n      if (this.mounted) {\n        this.setState({ secretKey, secretKeyAvailable: false });\n      }\n    });\n  };\n\n  render() {\n    const { loading, secretKey, secretKeyAvailable } = this.state;\n    return (\n      <div className=\"page page-limited\" id=\"encryption-page\">\n        <Helmet title={translate('property.category.security.encryption')} />\n        <header className=\"page-header\">\n          <h1 className=\"page-title\">{translate('property.category.security.encryption')}</h1>\n          <DeferredSpinner loading={loading} />\n        </header>\n\n        {!loading && !secretKeyAvailable && (\n          <GenerateSecretKeyForm generateSecretKey={this.generateSecretKey} secretKey={secretKey} />\n        )}\n\n        {secretKeyAvailable && <EncryptionForm generateSecretKey={this.generateSecretKey} />}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}