{"version":3,"sources":["webpack:///./src/main/js/apps/settings/encryption/EncryptionForm.tsx","webpack:///./src/main/js/apps/settings/encryption/GenerateSecretKeyForm.tsx","webpack:///./src/main/js/apps/settings/encryption/EncryptionApp.tsx"],"names":["_super","EncryptionForm","_this","apply","this","arguments","mounted","state","encrypting","generating","value","handleChange","event","setState","currentTarget","handleEncrypt","preventDefault","Object","settings","then","_a","encryptedValue","handleGenerateSecretKey","props","generateSecretKey","stopGenerating","__extends","prototype","componentDidMount","componentWillUnmount","render","index_js_exposed","id","className","l10n","onSubmit","autoFocus","onChange","required","rows","buttons","disabled","DeferredSpinner_default","a","loading","readOnly","type","clipboard","copyValue","index_es","defaultMessage","values","moreInformationLink","href","rel","target","GenerateSecretKeyForm","submitting","handleSubmit","stopSubmitting","GenerateSecretKeyForm_extends","secretKey","secret_file","property","propreties_file","EncryptionApp_EncryptionApp","EncryptionApp","checkSecretKey","secretKeyAvailable","EncryptionApp_extends","Helmet_default","title","encryption_GenerateSecretKeyForm","encryption_EncryptionForm"],"mappings":"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","file":"js/383.1570825310815.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { encryptValue } from '../../../api/settings';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n}\n\ninterface State {\n  encryptedValue?: string;\n  encrypting: boolean;\n  generating: boolean;\n  value: string;\n}\n\nexport default class EncryptionForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { encrypting: false, generating: false, value: '' };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ value: event.currentTarget.value });\n  };\n\n  handleEncrypt = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ encrypting: true });\n    encryptValue(this.state.value).then(\n      ({ encryptedValue }) => {\n        if (this.mounted) {\n          this.setState({ encryptedValue, encrypting: false });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ encrypting: false });\n        }\n      }\n    );\n  };\n\n  handleGenerateSecretKey = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ generating: true });\n    this.props.generateSecretKey().then(this.stopGenerating, this.stopGenerating);\n  };\n\n  stopGenerating = () => {\n    if (this.mounted) {\n      this.setState({ generating: false });\n    }\n  };\n\n  render() {\n    const { encryptedValue, encrypting, generating } = this.state;\n    return (\n      <div id=\"encryption-form-container\">\n        <div className=\"spacer-bottom\">{translate('encryption.form_intro')}</div>\n        <form className=\"big-spacer-bottom\" id=\"encryption-form\" onSubmit={this.handleEncrypt}>\n          <textarea\n            autoFocus={true}\n            className=\"abs-width-600\"\n            id=\"encryption-form-value\"\n            onChange={this.handleChange}\n            required={true}\n            rows={5}\n            value={this.state.value}\n          />\n          <div className=\"spacer-top\">\n            <SubmitButton disabled={encrypting || generating}>\n              {translate('encryption.encrypt')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={encrypting} />\n          </div>\n        </form>\n\n        {encryptedValue && (\n          <div>\n            <span className=\"little-spacer-right\">{translate('encryption.encrypted_value')}</span>\n            <input\n              className=\"input-clear input-code input-super-large\"\n              id=\"encrypted-value\"\n              readOnly={true}\n              type=\"text\"\n              value={encryptedValue}\n            />\n            <ClipboardButton className=\"little-spacer-left\" copyValue={encryptedValue} />\n          </div>\n        )}\n\n        <form\n          className=\"huge-spacer-top bordered-top\"\n          id=\"encryption-new-key-form\"\n          onSubmit={this.handleGenerateSecretKey}>\n          <p className=\"big-spacer-top spacer-bottom\">\n            <FormattedMessage\n              defaultMessage={translate('encryption.form_note')}\n              id=\"encryption.form_note\"\n              values={{\n                moreInformationLink: (\n                  <a\n                    href=\"https://redirect.sonarsource.com/doc/settings-encryption.html\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    {translate('more_information')}\n                  </a>\n                )\n              }}\n            />\n          </p>\n\n          <SubmitButton disabled={generating || encrypting}>\n            {translate('encryption.generate_new_secret_key')}{' '}\n          </SubmitButton>\n          <DeferredSpinner className=\"spacer-left\" loading={generating} />\n        </form>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n  secretKey?: string;\n}\n\ninterface State {\n  submitting: boolean;\n}\n\nexport default class GenerateSecretKeyForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { submitting: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ submitting: true });\n    this.props.generateSecretKey().then(this.stopSubmitting, this.stopSubmitting);\n  };\n\n  stopSubmitting = () => {\n    if (this.mounted) {\n      this.setState({ submitting: false });\n    }\n  };\n\n  render() {\n    const { secretKey } = this.props;\n    const { submitting } = this.state;\n    return (\n      <div id=\"generate-secret-key-form-container\">\n        {secretKey ? (\n          <>\n            <div className=\"big-spacer-bottom\">\n              <h3 className=\"spacer-bottom\">{translate('encryption.secret_key')}</h3>\n              <input\n                className=\"input-clear input-code input-large\"\n                id=\"secret-key\"\n                readOnly={true}\n                type=\"text\"\n                value={secretKey}\n              />\n              <ClipboardButton className=\"little-spacer-left\" copyValue={secretKey} />\n            </div>\n            <h3 className=\"spacer-bottom\">{translate('encryption.how_to_use')}</h3>\n            <div className=\"markdown\">\n              <ul>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content1')}\n                    id=\"encryption.how_to_use.content1\"\n                    values={{\n                      secret_file: <code>~/.sonar/sonar-secret.txt</code>,\n                      property: <code>sonar.secretKeyPath</code>,\n                      propreties_file: <code>conf/sonar.properties</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content2')}</li>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content3')}\n                    id=\"encryption.how_to_use.content3\"\n                    values={{\n                      property: <code>sonar.secretKeyPath</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content4')}</li>\n              </ul>\n            </div>\n          </>\n        ) : (\n          <form id=\"generate-secret-key-form\" onSubmit={this.handleSubmit}>\n            <p className=\"spacer-bottom\">\n              <FormattedMessage\n                defaultMessage={translate('encryption.secret_key_description')}\n                id=\"encryption.secret_key_description\"\n                values={{\n                  moreInformationLink: (\n                    <a\n                      href=\"https://redirect.sonarsource.com/doc/settings-encryption.html\"\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\">\n                      {translate('more_information')}\n                    </a>\n                  )\n                }}\n              />\n            </p>\n            <SubmitButton disabled={submitting}>\n              {translate('encryption.generate_secret_key')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n          </form>\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { checkSecretKey, generateSecretKey } from '../../../api/settings';\nimport EncryptionForm from './EncryptionForm';\nimport GenerateSecretKeyForm from './GenerateSecretKeyForm';\n\ninterface State {\n  loading: boolean;\n  secretKey?: string;\n  secretKeyAvailable?: boolean;\n}\n\nexport default class EncryptionApp extends React.PureComponent<{}, State> {\n  state: State = { loading: true };\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n    this.checkSecretKey();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkSecretKey = () => {\n    checkSecretKey().then(\n      ({ secretKeyAvailable }) => {\n        if (this.mounted) {\n          this.setState({ loading: false, secretKeyAvailable });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  generateSecretKey = () => {\n    return generateSecretKey().then(({ secretKey }) => {\n      if (this.mounted) {\n        this.setState({ secretKey, secretKeyAvailable: false });\n      }\n    });\n  };\n\n  render() {\n    const { loading, secretKey, secretKeyAvailable } = this.state;\n    return (\n      <div className=\"page page-limited\" id=\"encryption-page\">\n        <Helmet title={translate('property.category.security.encryption')} />\n        <header className=\"page-header\">\n          <h1 className=\"page-title\">{translate('property.category.security.encryption')}</h1>\n          <DeferredSpinner loading={loading} />\n        </header>\n\n        {!loading && !secretKeyAvailable && (\n          <GenerateSecretKeyForm generateSecretKey={this.generateSecretKey} secretKey={secretKey} />\n        )}\n\n        {secretKeyAvailable && <EncryptionForm generateSecretKey={this.generateSecretKey} />}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}