{"version":3,"sources":["webpack:///./src/main/js/apps/documentation/documentation.directory-loader.js","webpack:///./src/main/js/apps/documentation/styles.css?9b9f","webpack:///./src/main/js/apps/documentation/styles.css","webpack:///./src/main/js/apps/documentation/navTreeUtils.ts","webpack:///./src/main/js/apps/documentation/pages.ts","webpack:///./src/main/js/apps/documentation/utils.ts","webpack:///./src/main/js/apps/documentation/components/MenuItem.tsx","webpack:///./src/main/js/apps/documentation/components/MenuBlock.tsx","webpack:///./src/main/js/apps/documentation/components/MenuExternalLink.tsx","webpack:///./src/main/js/apps/documentation/components/Menu.tsx","webpack:///./src/main/js/apps/documentation/components/SearchResultEntry.tsx","webpack:///./src/main/js/apps/documentation/components/SearchResults.tsx","webpack:///./src/main/js/apps/documentation/components/Sidebar.tsx","webpack:///./src/main/js/apps/documentation/components/App.tsx","webpack:///./src/main/js/api/static.ts","webpack:///./src/main/js/app/components/a11y/A11ySkipTarget.tsx","webpack:///./src/main/js/helpers/markdown.js","webpack:///./src/main/js/app/components/SimpleContainer.tsx","webpack:///./src/main/js/app/components/NotFound.tsx","webpack:///./src/main/js/components/common/ScreenPositionHelper.tsx","webpack:///./src/main/js/api/plugins.ts"],"names":["module","exports","path","content","__webpack_require__","i","options","hmr","transform","insertInto","undefined","locals","push","getUrlsList","navTree","flatten_default","map","leaf","isDocsNavigationBlock","children","isDocsNavigationExternalLink","url","getOpenChainFromPath","pathname","chain","found","forEach","walk","parents","concat","child","testPathAgainstUrl","_typeof","leadingRegEx","trailingRegEx","replace","getPages","parsedOverrides","pages","documentation_directory_loader","file","parsed","Object","markdown","parsedOverride","frontmatter","__assign","keys","_a","text","ast","remark_default","parse","texts","unist_util_visit_default","node","type","value","join","getText","relativeName","title","navTitle","nav","order","Number","scope","toLowerCase","getNodeFromUrl","find","p","WORDS","cutTrailingWords","str","words","length","test","substring","cutWords","tokens","result","highlightPos","findIndex","token","marked","cutLeadingWords","highlightMarks","marks","cuts","start","balance","_i","sortedMarks_1","sortBy_default","mark","pos","from","to","substr","MenuItem","_b","depth","splat","active","maxDepth","Math","min","index_js_exposed","es","className","classnames","_c","key","_super","MenuBlock","props","_this","call","this","handleClick","setState","prevState","open","renderMenuItems","block","openChain","item","openByDefault","includes","state","__extends","prototype","render","buttons","onClick","OpenCloseIcon_default","a","MenuExternalLink","href","target","DetachIcon_default","Menu","navigation","Menu_extends","componentWillReceiveProps","nextProps","components_MenuBlock","SearchResultEntry","page","SearchResultTitle","SearchResultText","titleWithMarks","titleHighlights","highlights","h","SearchResultTokens","style","fontWeight","textHighlights","exactMatch","pageText","index","indexOf","query","loopCount","SearchResults","lunr_default","use","tokenContextPlugin","ref","field","boost","metadataWhitelist","filter","add","SearchResults_extends","results","search","split","s","match","longestTerm","matchData","metadata","term","fieldName","positions","position","tokenContexts","tokenContext","types","sortedResults","builder","pipelineFunction","prevToken","nextToken","toString","Pipeline","registerFunction","pipeline","before","stemmer","Sidebar","apply","arguments","handleSearch","trim","Sidebar_extends","SearchBox_default","minLength","onChange","placeholder","components_SearchResults","components_Menu","LANGUAGES_BASE_URL","App_App","App","mounted","loading","tree","getLanguagePluginsDocumentation","api_plugins","then","plugins","Promise","all","plugin","documentationPath","matchArray","exec","pluginKey","staticFilePath","request","submit","response","contents","regex","RegExp","overridablePaths","parsedContent","App_extends","componentDidMount","helpers_pages","system","SonarCloudNavigationTree","SonarQubeNavigationTree","overrides","componentWillUnmount","params","DeferredSpinner_default","mainTitle","l10n","isIndex","Helmet_default","name","ScreenPositionHelper","top","A11ySkipTarget","anchor","label","weight","components_Sidebar","DocMarkdownBlock","stickyToc","NotFound","withContainer","react__WEBPACK_IMPORTED_MODULE_0__","_A11yContext__WEBPACK_IMPORTED_MODULE_2__","Consumer","addA11ySkipLink","removeA11ySkipLink","A11ySkipTargetInner","getLink","sonar_ui_common_helpers_l10n__WEBPACK_IMPORTED_MODULE_1__","id","getFrontMatterPosition","lines","firstLine","lastLine","parseFrontMatter","data","x","cutConditionalContent","tag","beginning","ending","newContent","end","getFrontMatter","slice","separateFrontMatter","content_1","filterContent","regexBase","isSonarCloud","getInstance","contentWithoutStatic","r","__webpack_exports__","d","SimpleContainer","sonar_ui_common_components_ui_NavBar__WEBPACK_IMPORTED_MODULE_1__","sonar_ui_common_components_ui_NavBar__WEBPACK_IMPORTED_MODULE_1___default","n","_theme__WEBPACK_IMPORTED_MODULE_2__","_GlobalFooterContainer__WEBPACK_IMPORTED_MODULE_3__","height","globalNavHeightRaw","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_router__WEBPACK_IMPORTED_MODULE_2__","sonar_ui_common_helpers_l10n__WEBPACK_IMPORTED_MODULE_3__","_SimpleContainer__WEBPACK_IMPORTED_MODULE_4__","Container","defaultTitle","defer","getPosition","containerPos","container","getBoundingClientRect","window","pageYOffset","left","pageXOffset","debouncedOnResize","lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default","forceUpdate","addEventListener","removeEventListener","react__WEBPACK_IMPORTED_MODULE_1__","getAvailablePlugins","sonar_ui_common_helpers_request__WEBPACK_IMPORTED_MODULE_1__","catch","_app_utils_throwGlobalError__WEBPACK_IMPORTED_MODULE_3__","getPendingPlugins","getLastUpdates","updates","status","lodash_findLastIndex__WEBPACK_IMPORTED_MODULE_0___default","update","sonar_ui_common_helpers_types__WEBPACK_IMPORTED_MODULE_2__","addChangelog","previousUpdates","getInstalledPlugins","f","getInstalledPluginsWithUpdates","installed","updatePlugin","getPluginUpdates","installPlugin","uninstallPlugin","cancelPendingPlugins"],"mappings":"u8LAAAA,EAAOC,QAAU,CAAC,CAACC,KAAO,MAAMC,QAAU,wGAAwG,CAACD,KAAO,+BAA+BC,QAAU,ytUAA6qU,CAACD,KAAO,4BAA4BC,QAAU,kpFAAspF,CAACD,KAAO,oBAAoBC,QAAU,+zSAAi0S,CAACD,KAAO,2BAA2BC,QAAU,u5LAAu5L,CAACD,KAAO,yBAAyBC,QAAU,6lFAAqrF,CAACD,KAAO,wBAAwBC,QAAU,ygIAAqmI,CAACD,KAAO,uBAAuBC,QAAU,6wFAAwxF,CAACD,KAAO,0BAA0BC,QAAU,k6BAAw3B,CAACD,KAAO,0BAA0BC,QAAU,s1BAA4yB,CAACD,KAAO,6BAA6BC,QAAU,y4QAA+0Q,CAACD,KAAO,2BAA2BC,QAAU,y6kBAAs3kB,CAACD,KAAO,4BAA4BC,QAAU,qqCAA2oC,CAACD,KAAO,yBAAyBC,QAAU,24BAA62B,CAACD,KAAO,0BAA0BC,QAAU,oqBAA0nB,CAACD,KAAO,wBAAwBC,QAAU,ouCAA8sC,CAACD,KAAO,0BAA0BC,QAAU,k4BAAo2B,CAACD,KAAO,0BAA0BC,QAAU,89ZAA67Z,CAACD,KAAO,gCAAgCC,QAAU,4/LAAs8L,CAACD,KAAO,4BAA4BC,QAAU,gmBAAkkB,CAACD,KAAO,8BAA8BC,QAAU,i3IAAi3I,CAACD,KAAO,yBAAyBC,QAAU,glKAAgiK,CAACD,KAAO,yBAAyBC,QAAU,45DAA83D,CAACD,KAAO,2BAA2BC,QAAU,gxDAAsuD,CAACD,KAAO,4BAA4BC,QAAU,m9CAAy7C,CAACD,KAAO,yBAAyBC,QAAU,6mNAAgmN,CAACD,KAAO,0BAA0BC,QAAU,mkBAAqiB,CAACD,KAAO,2BAA2BC,QAAU,+lBAAikB,CAACD,KAAO,2BAA2BC,QAAU,wlBAA0jB,CAACD,KAAO,0BAA0BC,QAAU,ylCAAuhC,CAACD,KAAO,gCAAgCC,QAAU,u2DAAy0D,CAACD,KAAO,yBAAyBC,QAAU,orBAA0oB,CAACD,KAAO,2BAA2BC,QAAU,yjDAA2hD,CAACD,KAAO,yBAAyBC,QAAU,miBAAyf,CAACD,KAAO,oBAAoBC,QAAU,s8MAAk6M,CAACD,KAAO,wBAAwBC,QAAU,+9KAA+9K,CAACD,KAAO,qCAAqCC,QAAU,21FAAu2F,CAACD,KAAO,8CAA8CC,QAAU,0jZAAs1Y,CAACD,KAAO,wCAAwCC,QAAU,04TAAg6T,CAACD,KAAO,yCAAyCC,QAAU,woVAAwoV,CAACD,KAAO,uCAAuCC,QAAU,mkIAAgkI,CAACD,KAAO,yCAAyCC,QAAU,2gdAA87c,CAACD,KAAO,6BAA6BC,QAAU,qrKAAqrK,CAACD,KAAO,2BAA2BC,QAAU,07HAA86H,CAACD,KAAO,kCAAkCC,QAAU,unVAAoqV,CAACD,KAAO,wCAAwCC,QAAU,qrFAAqrF,CAACD,KAAO,wBAAwBC,QAAU,2zEAAizE,CAACD,KAAO,+BAA+BC,QAAU,2nDAA+mD,CAACD,KAAO,oBAAoBC,QAAU,izIAAoyI,CAACD,KAAO,gCAAgCC,QAAU,2hDAA+gD,CAACD,KAAO,6BAA6BC,QAAU,+ytBAA03tB,CAACD,KAAO,oBAAoBC,QAAU,q5BAAs5B,CAACD,KAAO,sBAAsBC,QAAU,25EAA25E,CAACD,KAAO,kCAAkCC,QAAU,uvZAAuvZ,CAACD,KAAO,2BAA2BC,QAAU,orzBAAstzB,CAACD,KAAO,0BAA0BC,QAAU,45GAA65G,CAACD,KAAO,wBAAwBC,QAAU,6iMAA4jM,CAACD,KAAO,cAAcC,QAAU,o1JAAy1J,CAACD,KAAO,uBAAuBC,QAAU,mhCAAmhC,CAACD,KAAO,iBAAiBC,QAAU,muCAAmuC,CAACD,KAAO,MAAMC,QAAU,uuEAA2tE,CAACD,KAAO,QAAQC,QAAU,khGAA8+F,CAACD,KAAO,qDAAqDC,QAAU,m/EAAm/E,CAACD,KAAO,0CAA0CC,QAAU,0/CAA8/C,CAACD,KAAO,kCAAkCC,QAAU,0iKAA0iK,CAACD,KAAO,yCAAyCC,QAAU,kmkBAA2pkB,CAACD,KAAO,6CAA6CC,QAAU,wsHAA2sH,CAACD,KAAO,uCAAuCC,QAAU,qpDAAqpD,CAACD,KAAO,0CAA0CC,QAAU,kuFAAouF,CAACD,KAAO,wCAAwCC,QAAU,2yBAA+yB,CAACD,KAAO,sCAAsCC,QAAU,syFAAsyF,CAACD,KAAO,qCAAqCC,QAAU,o5NAAo5N,CAACD,KAAO,wCAAwCC,QAAU,w/CAAw/C,CAACD,KAAO,gDAAgDC,QAAU,wcAA4c,CAACD,KAAO,uCAAuCC,QAAU,o9FAAs9F,CAACD,KAAO,2CAA2CC,QAAU,q4PAAy3P,CAACD,KAAO,mCAAmCC,QAAU,8uYAA8uY,CAACD,KAAO,sCAAsCC,QAAU,qmHAAqmH,CAACD,KAAO,iEAAiEC,QAAU,iiKAAoiK,CAACD,KAAO,kDAAkDC,QAAU,g0DAAg0D,CAACD,KAAO,6CAA6CC,QAAU,69QAAg/Q,CAACD,KAAO,yCAAyCC,QAAU,q1HAAq1H,CAACD,KAAO,qDAAqDC,QAAU,2iCAA6iC,CAACD,KAAO,2CAA2CC,QAAU,q0GAAq0G,CAACD,KAAO,0CAA0CC,QAAU,6uFAA6uF,CAACD,KAAO,kCAAkCC,QAAU,ymLAAowL,CAACD,KAAO,wCAAwCC,QAAU,szJAAszJ,CAACD,KAAO,4BAA4BC,QAAU,ijZAAsiZ,CAACD,KAAO,8BAA8BC,QAAU,+sCAA+sC,CAACD,KAAO,wBAAwBC,QAAU,k/QAAu+Q,CAACD,KAAO,uBAAuBC,QAAU,47CAAo7C,CAACD,KAAO,uBAAuBC,QAAU,wySAAwyS,CAACD,KAAO,wBAAwBC,QAAU,20TAA20T,CAACD,KAAO,uBAAuBC,QAAU,mzNAAuyN,CAACD,KAAO,iBAAiBC,QAAU,w0BAA4zB,CAACD,KAAO,wBAAwBC,QAAU,w6IAA45I,CAACD,KAAO,sBAAsBC,QAAU,ihkBAAmikB,CAACD,KAAO,kBAAkBC,QAAU,kzIAAsyI,CAACD,KAAO,sBAAsBC,QAAU,ipHAAmpH,CAACD,KAAO,wDAAwDC,QAAU,6nEAA6nE,CAACD,KAAO,4DAA4DC,QAAU,kuEAAsuE,CAACD,KAAO,yCAAyCC,QAAU,24DAAi5D,CAACD,KAAO,iCAAiCC,QAAU,qxEAAiyE,CAACD,KAAO,+BAA+BC,QAAU,qnFAAqoF,CAACD,KAAO,iCAAiCC,QAAU,s2HAAs4H,CAACD,KAAO,uCAAuCC,QAAU,s2GAA62G,CAACD,KAAO,mDAAmDC,QAAU,6/CAAmgD,CAACD,KAAO,qBAAqBC,QAAU,qvJAAqvJ,CAACD,KAAO,sBAAsBC,QAAU,6tGAA8tG,CAACD,KAAO,gCAAgCC,QAAU,grBAAkrB,CAACD,KAAO,iCAAiCC,QAAU,kqDAAkqD,CAACD,KAAO,8BAA8BC,QAAU,4nCAA4nC,CAACD,KAAO,0BAA0BC,QAAU,q9FAAq9F,CAACD,KAAO,gCAAgCC,QAAU,8kIAA8kI,CAACD,KAAO,sBAAsBC,QAAU,k+PAAs9P,CAACD,KAAO,mCAAmCC,QAAU,mhHAAmhH,CAACD,KAAO,oBAAoBC,QAAU,6gYAA6gY,CAACD,KAAO,gCAAgCC,QAAU,mqEAAmqE,CAACD,KAAO,gCAAgCC,QAAU,+ngBAA+ngB,CAACD,KAAO,wBAAwBC,QAAU,i4GAAu4G,CAACD,KAAO,0BAA0BC,QAAU,05JAA05J,CAACD,KAAO,2BAA2BC,QAAU,2hHAA+gH,CAACD,KAAO,mBAAmBC,QAAU,qzOAAsxO,CAACD,KAAO,+BAA+BC,QAAU,q5HAAq5H,CAACD,KAAO,8BAA8BC,QAAU,4xFAA4xF,CAACD,KAAO,4BAA4BC,QAAU,09LAA09L,CAACD,KAAO,qCAAqCC,QAAU,2/BAAm+B,CAACD,KAAO,0BAA0BC,QAAU,yuDAAitD,CAACD,KAAO,wBAAwBC,QAAU,miCAAmiC,CAACD,KAAO,4BAA4BC,QAAU,8jECCn9wmB,IAAAA,EAAcC,EAAQ,MAEtB,iBAAAD,MAAA,EAA4CH,EAAAK,EAASF,EAAA,MAOrD,IAAAG,EAAA,CAAeC,KAAA,EAEfC,eAPAA,EAQAC,gBAAAC,GAEaN,EAAQ,IAARA,CAAoED,EAAAG,GAEjFH,EAAAQ,SAAAX,EAAAC,QAAAE,EAAAQ,+BCjBAX,EAAAC,QAA2BG,EAAQ,IAARA,EAAoE,IAE/FQ,KAAA,CAAcZ,EAAAK,EAAS,svEAAwvE,ydC6BzwE,SAAUQ,EAAYC,GAC1B,OAAOC,IACLD,EAAQE,IAAI,SAAAC,GACV,OAAIC,EAAsBD,GACjBJ,EAAYI,EAAKE,UAEtBC,EAA6BH,GACxB,CAACA,EAAKI,KAER,CAACJ,MAKR,SAAUK,EAAqBC,EAAkBT,GACrD,IAAIU,EAA6B,GAE7BC,GAAQ,EAyBZ,OAFAX,EAAQY,QAAQ,SAAAT,GAAQ,OAtBX,SAAPU,EAAQV,EAAyBW,QAAA,IAAAA,MAAA,IACjCH,IAIJG,EAAUA,EAAQC,OAAOZ,GAErBC,EAAsBD,GACxBA,EAAKE,SAASO,QAAQ,SAAAI,GACC,iBAAVA,GAAsBC,EAAmBD,EAAOP,IACzDC,EAAQI,EAAQC,OAAOC,GACvBL,GAAQ,GAERE,EAAKG,EAAOF,KAGS,iBAATX,GAAqBc,EAAmBd,EAAMM,KAC9DC,EAAQI,EACRH,GAAQ,IAIYE,CAAAV,KAEjBO,EAGH,SAAUN,EAAsBD,GACpC,MAAuB,WAAhBe,EAAOf,SAAgEP,IAA1CO,EAA6BE,SAG7D,SAAUC,EACdH,GAEA,MAAuB,WAAhBe,EAAOf,SAAkEP,IAA5CO,EAAoCI,IAGpE,SAAUU,EAAmB7B,EAAcmB,GAC/C,IAAMY,EAAe,MACfC,EAAgB,MACtB,OACEhC,EAAKiC,QAAQF,EAAc,IAAIE,QAAQD,EAAe,MACtDb,EAAIc,QAAQF,EAAc,IAAIE,QAAQD,EAAe,uQClE3C,SAAUE,EACtBC,QAAA,IAAAA,MAAA,IAGA,IAAMC,EAAUC,EAAA,IAAkE,SAAAC,GAChF,IAAIC,EAASC,OAAAC,EAAA,oBAAAD,CAAoBF,EAAKrC,SAEtC,GAAIkC,EAAgBG,EAAKtC,MAAO,CAC9B,IAAM0C,EAAiBP,EAAgBG,EAAKtC,MAC5CuC,EAAS,CACPtC,QAASyC,EAAezC,QACxB0C,YAAWC,EAAA,GAAOL,EAAOI,YAAgBD,EAAeC,qBAEnDR,EAAgBG,EAAKtC,MAG9B,MAAO,CAAEuC,OAAMA,EAAED,KAAIA,KAYvB,OARAE,OAAOK,KAAKV,GAAiBX,QAAQ,SAAAxB,GACnC,IAAMuC,EAASJ,EAAgBnC,GAC/BoC,EAAM1B,KAAK,CACT6B,OAAMA,EACND,KAAM,CAAErC,QAASsC,EAAOtC,QAASD,KAAIA,OAIlCoC,EAAMtB,IAAI,SAACgC,OAAEP,EAAAO,EAAAP,OAAQD,EAAAQ,EAAAR,KACpBrC,EAAUuC,OAAAC,EAAA,cAAAD,CAAcD,EAAOtC,SAC/B8C,EAiBV,SAAiB9C,GACf,IAAM+C,EAAMC,MAASC,MAAMjD,GACrBkD,EAAkB,GAMxB,OALAC,IAAMJ,EAAK,SAAAK,GACS,SAAdA,EAAKC,MAAiC,eAAdD,EAAKC,MAC/BH,EAAMzC,KAAK2C,EAAKE,SAGbJ,EAAMK,KAAK,KAAKvB,QAAQ,OAAQ,KAzBxBwB,CAAQxD,GAErB,MAAO,CACLyD,aAAcpB,EAAKtC,KACnBmB,IAAKoB,EAAOI,YAAYxB,KAAO,IAAImB,EAAKtC,KAAI,IAC5C2D,MAAOpB,EAAOI,YAAYgB,MAC1BC,SAAUrB,EAAOI,YAAYkB,UAAOrD,EACpCsD,MAAOC,OAAOxB,EAAOI,YAAYmB,QAAU,GAC3CE,MAAOzB,EAAOI,YAAYqB,MACrBzB,EAAOI,YAAYqB,MAAMC,mBAC1BzD,EACJuC,KAAIA,EACJ9C,QAAOA,qDCnCP,SAAUiE,EAAe9B,EAA6BjB,GAC1D,OAAOiB,EAAM+B,KAAK,SAAAC,GAAK,OAAAA,EAAEjD,MAAFA,IAGzB,IAAMkD,EAAQ,EAed,SAASC,EAAiBC,GAExB,IADA,IAAIC,EAAQ,EACHrE,EAAI,EAAGA,EAAIoE,EAAIE,OAAQtE,IAI9B,GAHI,KAAKuE,KAAKH,EAAIpE,KAChBqE,IAEEA,IAAUH,EACZ,OAAOlE,EAAIoE,EAAIE,OAAS,EAAOF,EAAII,UAAU,EAAGxE,GAAE,MAAQoE,EAG9D,OAAOA,EAGH,SAAUK,EAASC,GACvB,IAAMC,EAAmD,GACrDL,EAAS,EAEPM,EAAeF,EAAOG,UAAU,SAAAC,GAAS,OAAAA,EAAAC,SAC/C,GAAIH,EAAe,EAAG,CACpB,IAAMhC,EAhCV,SAAyBwB,GAEvB,IADA,IAAIC,EAAQ,EACHrE,EAAIoE,EAAIE,OAAS,EAAGtE,GAAK,EAAGA,IAInC,GAHI,KAAKuE,KAAKH,EAAIpE,KAChBqE,IAEEA,IAAUH,EACZ,OAAOlE,EAAI,EAAI,MAAMoE,EAAII,UAAUxE,EAAI,GAAOoE,EAGlD,OAAOA,EAsBQY,CAAgBN,EAAOE,EAAe,GAAGhC,MACtD+B,EAAOpE,KAAK,CAAEqC,KAAIA,EAAEmC,QAAQ,IAC5BT,GAAU1B,EAAK0B,OAGjBK,EAAOpE,KAAKmE,EAAOE,IACnBN,GAAUI,EAAOE,GAAchC,KAAK0B,OAEpC,IAAK,IAAItE,EAAI4E,EAAe,EAAG5E,EAAI0E,EAAOJ,OAAQtE,IAAK,CACrD,GAAIsE,EAASI,EAAO1E,GAAG4C,KAAK0B,OAAS,IAAK,CAClC1B,EAAOuB,EAAiBO,EAAO1E,GAAG4C,MAExC,OADA+B,EAAOpE,KAAK,CAAEqC,KAAIA,EAAEmC,QAAQ,IACrBJ,EAEPA,EAAOpE,KAAKmE,EAAO1E,IACnBsE,GAAUI,EAAO1E,GAAG4C,KAAK0B,OAI7B,OAAOK,EAGH,SAAUM,EAAeb,EAAac,GAc1C,IAbA,IASMC,EAAiD,GACnDC,EAAQ,EACRC,EAAU,EAEKC,EAAA,EAAAC,EAbCC,IAEbN,EAAMvE,IAAI,SAAA8E,GAAQ,MAAC,CAAEC,IAAKD,EAAKE,KAAMP,OAAnB,KAAkC5D,OACpD0D,EAAMvE,IAAI,SAAA8E,GAAQ,MAAC,CAAEC,IAAKD,EAAKG,GAAIR,OAAjB,MAEvB,SAAAK,GAAQ,OAAAA,EAAAC,KACR,SAAAD,GAAQ,OAAA7B,QAAQ6B,EAARL,SAOSE,EAAAC,EAAAjB,OAAAgB,IAAa,CAA3B,IAAMG,EAAIF,EAAAD,GACTG,EAAKL,OACS,IAAZC,GAAiBD,IAAUK,EAAKC,MAClCP,EAAK5E,KAAK,CAAEqC,KAAMwB,EAAII,UAAUY,EAAOK,EAAKC,KAAMX,QAAQ,IAC1DK,EAAQK,EAAKC,KAEfL,KAGgB,MADhBA,GACqBD,IAAUK,EAAKC,MAClCP,EAAK5E,KAAK,CAAEqC,KAAMwB,EAAII,UAAUY,EAAOK,EAAKC,KAAMX,QAAQ,IAC1DK,EAAQK,EAAKC,KASnB,OAJIN,EAAQhB,EAAIE,OAAS,GACvBa,EAAK5E,KAAK,CAAEqC,KAAMwB,EAAIyB,OAAOT,GAAQL,QAAQ,IAGxCI,0CC/FH,SAAUW,EAASnD,SAAEoD,EAAApD,EAAAqD,aAAA,IAAAD,EAAA,EAAAA,EAAW7C,EAAAP,EAAAO,KAAM+C,EAAAtD,EAAAsD,MAC1C,IAAK/C,EACH,OAAO,KAGT,IAAMgD,EAASxE,EAAmBwB,EAAKlC,IAAKiF,GACtCE,EAAWC,KAAKC,IAAIL,EAAO,GACjC,OACEM,EAAA,cAACC,EAAA,KAAI,CACHC,UAAWC,EAAW,mBAAiBC,EAAA,CAAIR,OAAMA,GAAEQ,EAAC,SAASP,GAAaH,EAAQ,EAACU,IACnFC,IAAKzD,EAAKlC,IACV4E,GAAI,iBAAmB1C,EAAKlC,KAC5BsF,EAAA,oBAAIE,UAAU,2BAA2BtD,EAAKO,UAAYP,EAAKM,oUCDrE,SAAAoD,GAGE,SAAAC,EAAYC,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YAMdF,EAAAG,YAAc,WACZH,EAAKI,SAAS,SAAAC,GAAa,MAAC,CAC1BC,MAAOD,EAAUC,SAIrBN,EAAAO,gBAAkB,SAACC,GACX,IAAA5E,EAAAoE,EAAAD,MAAEf,EAAApD,EAAAqD,aAAA,IAAAD,EAAA,EAAAA,EAAWyB,EAAA7E,EAAA6E,UAAWvF,EAAAU,EAAAV,MAAOgE,EAAAtD,EAAAsD,MACrC,OAAOsB,EAAMzG,SAASH,IAAI,SAAA8G,GACxB,MAAoB,iBAATA,EAEPnB,EAAA,cAACR,EAAQ,CAACE,MAAOA,EAAQ,EAAGW,IAAKc,EAAMvE,KAAMa,EAAe9B,EAAOwF,GAAOxB,MAAOA,IAE1EpF,EAAsB4G,GAE7BnB,EAAA,cAACO,EAAS,CACRU,MAAOE,EACPzB,MAAOA,EAAQ,EACfW,IAAKc,EAAKjE,MACVkE,cAAeF,EAAUG,SAASF,GAClCD,UAAWA,EACXvF,MAAOA,EACPgE,MAAOA,EACPzC,MAAOiE,EAAKjE,QAIT,QAhCXuD,EAAKa,MAAQ,CACXP,UAA8BhH,IAAxByG,EAAMY,eAA8BZ,EAAMY,iBAsDtD,OA5DuCG,EAAAhB,EAAAD,GA0CrCC,EAAAiB,UAAAC,OAAA,iBACQhC,EAAAkB,KAAAH,MAAES,EAAAxB,EAAAwB,MAAOb,EAAAX,EAAAC,aAAA,IAAAU,EAAA,EAAAA,EAAWlD,EAAAuC,EAAAvC,MAClB6D,EAAAJ,KAAAW,MAAAP,KACFlB,EAAWC,KAAKC,IAAIL,EAAO,GACjC,OACEM,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC0B,EAAA,WAAU,CACTxB,UAAWC,EAAW,mBAAiB9D,EAAA,GAAIA,EAAC,SAASwD,GAAaH,EAAQ,EAACrD,IAC3EsF,QAAShB,KAAKC,aACdZ,EAAA,oBAAIE,UAAU,2BACZF,EAAA,cAAC4B,EAAAC,EAAa,CAAC3B,UAAU,sBAAsBa,KAAMA,IACpD7D,IAGJ6D,GAAQJ,KAAKK,gBAAgBC,KAItCV,EA5DA,CAAuCP,EAAA,oCCfjC,SAAU8B,GAAiBzF,OAAEa,EAAAb,EAAAa,MAAOxC,EAAA2B,EAAA3B,IACxC,OACEsF,EAAA,mBAAG+B,KAAMrH,EAAK2F,IAAKnD,EAAO8E,OAAO,UAC/BhC,EAAA,oBAAIE,UAAU,2BACZF,EAAA,cAACiC,GAAAJ,EAAU,CAAC3B,UAAU,iBACrBhD,uVCST,SAAAoD,GACE,SAAA4B,EAAY1B,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YACZF,EAAKa,MAAQ,CACXJ,UAAWvG,EAAqB8F,EAAKD,MAAMb,MAAOc,EAAKD,MAAM2B,eA0CnE,OA9CkCC,GAAAF,EAAA5B,GAQhC4B,EAAAV,UAAAa,0BAAA,SAA0BC,GACpB3B,KAAKH,MAAMb,QAAU2C,EAAU3C,OACjCgB,KAAKE,SAAS,CAAEK,UAAWvG,EAAqB2H,EAAU3C,MAAO2C,EAAUH,eAI/ED,EAAAV,UAAAC,OAAA,eAAAhB,EAAAE,KACUO,EAAAP,KAAAW,MAAAJ,UACR,OACElB,EAAA,cAAAA,EAAA,cACGW,KAAKH,MAAM2B,WAAW9H,IAAI,SAAA8G,GACzB,OAAI5G,EAAsB4G,GAEtBnB,EAAA,cAACuC,EAAS,CACRtB,MAAOE,EACPd,IAAKc,EAAKjE,MACVkE,cAAeF,EAAUG,SAASF,GAClCD,UAAWA,EACXvF,MAAO8E,EAAKD,MAAM7E,MAClBgE,MAAOc,EAAKD,MAAMb,MAClBzC,MAAOiE,EAAKjE,QAIdzC,EAA6B0G,GACxBnB,EAAA,cAAC8B,GAAgB,CAACzB,IAAKc,EAAKjE,MAAOA,MAAOiE,EAAKjE,MAAOxC,IAAKyG,EAAKzG,MAGvEsF,EAAA,cAACR,EAAQ,CACPa,IAAKc,EACLvE,KAAMa,EAAegD,EAAKD,MAAM7E,MAAOwF,GACvCxB,MAAOc,EAAKD,MAAMb,YAOhCuC,EA9CA,CAAkClC,EAAA,qCCJpB,SAAUwC,GAAkBnG,OAAEuD,EAAAvD,EAAAuD,OAAQvB,EAAAhC,EAAAgC,OAClD,OACE2B,EAAA,cAACC,EAAA,KAAI,CACHC,UAAWC,EAAW,kBAAmB,CAAEP,OAAMA,IACjDN,GAAI,iBAAmBjB,EAAOoE,KAAK/H,KACnCsF,EAAA,cAAC0C,GAAiB,CAACrE,OAAQA,IAC3B2B,EAAA,cAAC2C,GAAgB,CAACtE,OAAQA,KAK1B,SAAUqE,GAAkBrG,OAC5BuG,EAD8BvE,EAAAhC,EAAAgC,OAG5BwE,EAAkBxE,EAAOyE,WAAW5F,MAC1C,GAAI2F,GAAmBA,EAAgB7E,OAAS,EAAG,CACzC,IACFI,EAASO,EADPN,EAAAoE,KAAAvF,MAGN2F,EAAgBxI,IAAI,SAAA0I,GAAK,MAAC,CAAE1D,KAAM0D,EAAE,GAAIzD,GAAIyD,EAAE,GAAKA,EAA1B,OAE3BH,EAAiB5C,EAAA,cAACgD,GAAkB,CAAC5E,OAAQA,SAE7CwE,EAAiBvE,EAAOoE,KAAKvF,MAG/B,OACE8C,EAAA,oBAAIE,UAAU,0BAA0B+C,MAAO,CAAEC,WAAY,WAC1DN,GAKD,SAAUD,GAAiBtG,OAAEgC,EAAAhC,EAAAgC,OAC3B8E,EAAiB9E,EAAOyE,WAAWxG,KACjCA,EAAA+B,EAAAoE,KAAAnG,KACJ8B,EAGE,GAEN,GAAIC,EAAO+E,WAAY,CAOrB,IANA,IAAMC,EAAWhF,EAAOoE,KAAKnG,KAAKkB,cAC5BsF,EAA6C,GAC/ChE,EAAQ,EACRwE,EAAQD,EAASE,QAAQlF,EAAOmF,MAAO1E,GACvC2E,EAAY,EAETH,GAAS,GAAKG,EAAY,IAC/BA,IACAX,EAAW7I,KAAK,CAAEoF,KAAMiE,EAAOhE,GAAIgE,EAAQjF,EAAOmF,MAAMxF,SACxDc,EAAQwE,EAAQ,EAChBA,EAAQD,EAASE,QAAQlF,EAAOmF,MAAO1E,GAGrCgE,EAAW9E,SACbI,EAASO,EAAerC,EAAMwG,IAQlC,OAJsB,IAAlB1E,EAAOJ,QAAgBmF,GAAkBA,EAAenF,OAAS,IACnEI,EAASO,EAAerC,EAAM6G,EAAe9I,IAAI,SAAA0I,GAAK,MAAC,CAAE1D,KAAM0D,EAAE,GAAIzD,GAAIyD,EAAE,GAAKA,EAA1B,QAGpD3E,EAAOJ,OAEPgC,EAAA,qBAAKE,UAAU,QACbF,EAAA,cAACgD,GAAkB,CAAC5E,OAAQD,EAASC,MAIlC,KAIL,SAAU4E,GAAmB3G,OACjC+B,EAAA/B,EAAA+B,OAIA,OACE4B,EAAA,cAAAA,EAAA,cACG5B,EAAO/D,IAAI,SAACmE,EAAO8E,GAAU,OAC5BtD,EAAA,cAACA,EAAA,SAAc,CAACK,IAAKiD,GAClB9E,EAAMC,OAASuB,EAAA,sBAAMK,IAAKiD,GAAQ9E,EAAMlC,MAAekC,EAF9BlC,4VCpFpC,SAAAgE,GAGE,SAAAoD,EAAYlD,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YACZF,EAAK6C,MAAQK,KAAK,eAAAlD,EAAAE,KAChBA,KAAKiD,IAAIC,IACTlD,KAAKmD,IAAI,gBACTnD,KAAKoD,MAAM,QAAS,CAAEC,MAAO,KAC7BrD,KAAKoD,MAAM,QAEXpD,KAAKsD,kBAAoB,CAAC,WAAY,gBAEtCzD,EAAM7E,MACHuI,OAAO,SAAAzB,GAAQ,OAAAvI,EAAYsG,EAAM2B,YAAYd,SAASoB,EAAvC/H,OACfK,QAAQ,SAAA0H,GAAQ,OAAAhC,EAAK0D,IAAL1B,SA2EzB,OA1F2C2B,GAAAV,EAAApD,GAmBzCoD,EAAAlC,UAAAC,OAAA,eAAAhB,EAAAE,KACQ6C,EAAQ7C,KAAKH,MAAMgD,MAAMhG,cACzB6G,EAAU1D,KAAK2C,MAClBgB,OACCd,EACGe,MAAM,OACNlK,IAAI,SAAAmK,GAAK,OAAGA,EAAC,MAAMA,EAAV,MACTzH,KAAK,MAET1C,IAAI,SAAAoK,GACH,IAAMhC,EAAOhC,EAAKD,MAAM7E,MAAM+B,KAAK,SAAA+E,GAAQ,OAAAA,EAAKxF,eAAiBwH,EAAtBX,MAE3C,IAAKrB,EACH,OAAO,KAGT,IAAMK,EAAyC,GAC3C4B,EAAc,GACdtB,GAAa,EA2BjB,OAxBArH,OAAOK,KAAKqI,EAAME,UAAUC,UAAU7J,QAAQ,SAAA8J,GAExCrB,EAAMnC,SAASwD,EAAKrH,gBAAkBkH,EAAY1G,OAAS6G,EAAK7G,SAClE0G,EAAcG,GAGhB9I,OAAOK,KAAKqI,EAAME,UAAUC,SAASC,IAAO9J,QAAQ,SAAA+J,GAC5C,IAAAzI,EAAAoI,EAAAE,UAAAC,SAAAC,GAAAC,GAAEC,EAAA1I,EAAA2I,SAAqBC,EAAA5I,EAAA6I,aAI7BpC,EAAWgC,IAAkBhC,EAAWgC,IAAc,IAAG5J,OAAK6J,IAGzD3B,GAAc6B,GACjBA,EAAclK,QAAQ,SAACmK,IAChB9B,GAAc8B,EAAa7D,SAASmC,KACvCJ,GAAa,SAOhB,CAAEA,WAAUA,EAAEN,WAAUA,EAAE4B,YAAWA,EAAEjC,KAAIA,EAAEe,MAAKA,KAE1DU,OAAOiB,EAAA,WAKJC,EAAgBlG,IAEpBA,IAAOmF,EAAS,SAAAhG,GAAU,OAACA,EAAOqG,YAAR1G,SAE1B,SAAAK,GAAU,OAAAA,EAAO+E,aAAP,IAGZ,OACEpD,EAAA,cAAAA,EAAA,cACGoF,EAAc/K,IAAI,SAAAgE,GAAU,OAC3B2B,EAAA,cAACwC,GAAiB,CAChB5C,OAAQvB,EAAOoE,KAAKxF,eAAiBwD,EAAKD,MAAMb,MAChDU,IAAKhC,EAAOoE,KAAKxF,aACjBoB,OAJyBA,QAUrCqF,EA1FA,CAA2C1D,EAAA,eAwG3C,SAAS6D,GAAmBwB,GAC1B,IAAMC,EAAmB,SAAC9G,EAAkB8E,EAAelF,GACzD,IAAMmH,EAAYnH,EAAOkF,EAAQ,IAAM,GACjCkC,EAAYpH,EAAOkF,EAAQ,IAAM,GAKvC,OAJA9E,EAAMoG,SAAN,aAAiC,CAACW,EAAUE,WAAYjH,EAAMiH,WAAYD,EAAUC,YACjFvB,OAAO,SAAAM,GAAK,OAAAA,EAAAxG,SACZjB,KAAK,KACLS,cACIgB,GAGRmF,GAAA9B,EAAa6D,SAASC,iBAAiBL,EAAkB,gBAC1DD,EAAQO,SAASC,OAAQlC,GAAA9B,EAAaiE,QAASR,GAC/CD,EAAQpB,kBAAkBhK,KAAK,mWCpHjC,SAAAqG,GAAA,SAAAyF,IAAA,IAAAtF,EAAA,OAAAH,KAAA0F,MAAArF,KAAAsF,YAAAtF,YACEF,EAAAa,MAAe,CAAEkC,MAAO,IAExB/C,EAAAyF,aAAe,SAAC1C,GACd/C,EAAKI,SAAS,CAAE2C,MAAOA,EAAM2C,YAkCjC,OAtCqCC,GAAAL,EAAAzF,GAOnCyF,EAAAvE,UAAAC,OAAA,WACE,OACEzB,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACqG,EAAAxE,EAAS,CACR3B,UAAU,+BACVoG,UAAW,EACXC,SAAU5F,KAAKuF,aACfM,YAAY,+BACZ1J,MAAO6D,KAAKW,MAAMkC,QAEpBxD,EAAA,qBAAKE,UAAU,+BACbF,EAAA,qBAAKE,UAAU,cACZS,KAAKW,MAAMkC,MACVxD,EAAA,cAACyG,GAAa,CACZtE,WAAYxB,KAAKH,MAAM2B,WACvBxG,MAAOgF,KAAKH,MAAM7E,MAClB6H,MAAO7C,KAAKW,MAAMkC,MAClB7D,MAAOgB,KAAKH,MAAMb,QAGpBK,EAAA,cAAC0G,GAAI,CACHvE,WAAYxB,KAAKH,MAAM2B,WACvBxG,MAAOgF,KAAKH,MAAM7E,MAClBgE,MAAOgB,KAAKH,MAAMb,YAQlCoG,EAtCA,CAAqC/F,EAAA,2VCiB/B2G,GAAqB,qBAE3BC,GAAA,SAAAtG,GAAA,SAAAuG,IAAA,IAAApG,EAAA,OAAAH,KAAA0F,MAAArF,KAAAsF,YAAAtF,YACEF,EAAAqG,SAAU,EACVrG,EAAAa,MAAe,CACbyF,SAAS,EACTpL,MAAO,GACPqL,KAAM,IAsCRvG,EAAAwG,gCAAkC,SAACD,GACjC,OAAOjL,OAAAmL,EAAA,EAAAnL,GACJoL,KAAK,SAAAC,GACJ,OAAAC,QAAQC,IACNF,EAAQ/M,IAAI,SAAAkN,GACV,GAAIA,EAAOC,kBAAmB,CAC5B,IAAMC,EAAa,gBAAgBC,KAAKH,EAAOC,mBAE/C,GAAIC,GAAcA,EAAWzJ,OAAS,EAEpC,OCvF2B2J,EDuFOJ,EAAOlH,ICvFKuH,EDuFAH,EAAW,GCtFhE1L,OAAA8L,EAAA,QAAA9L,CAAQ,WAAW4L,EAAS,IAAIC,GACpCE,SACAX,KAAKU,EAAA,aACLV,KAAK,SAAAY,GAAY,OAAAA,EAAAzL,UDmFuD6K,KAC3D,SAAA3N,GAAW,OAAAA,GACX,cCzFZ,IAAqCmO,EAAmBC,ODiGvDT,KAAK,SAAAa,GAAY,OAAAA,EAAS9D,OAATiB,EAAA,aACjBgC,KAAK,SAAAa,GACJ,IAAMC,EAAQ,IAAIC,OAAO,IAAIvB,GAAkB,WACzCwB,EAAmBjO,EAAY8M,GAAM9C,OACzC,SAAA3K,GAAQ,OAAA0O,EAAMhK,KAAK1E,IAASA,IAAS,IAAIoN,GAAjC,eAGJyB,EAAuC,GAc7C,OAZAJ,EAASjN,QAAQ,SAAAvB,GACf,IAAMsC,EAASC,OAAAC,EAAA,oBAAAD,CAAoBvC,GAEjCsC,GACAA,EAAOI,aACPJ,EAAOI,YAAYmE,KACnB8H,EAAiB9G,SAAS,IAAIsF,GAAkB,IAAI7K,EAAOI,YAAYmE,IAAG,OAE1E+H,EAAiBzB,GAAkB,IAAI7K,EAAOI,YAAYmE,KAASvE,KAIhEsM,OAiFf,OArKiCC,GAAAxB,EAAAvG,GAQ/BuG,EAAArF,UAAA8G,kBAAA,eAAA7H,EAAAE,KACEA,KAAKmG,SAAU,EACf/K,OAAAwM,EAAA,gBAAAxM,GAEA4E,KAAKE,SAAS,CAAEkG,SAAS,IAEzB,IAAMC,EAAOjL,OAAAyM,EAAA,aAAAzM,GACP0M,EACAC,EAEN/H,KAAKsG,gCAAgCD,GAAMG,KACzC,SAAAwB,GACMlI,EAAKqG,SACPrG,EAAKI,SAAS,CACZkG,SAAS,EACTpL,MAAOF,EAASkN,GAChB3B,KAAIA,KAIV,WACMvG,EAAKqG,SACPrG,EAAKI,SAAS,CACZkG,SAAS,OAOnBF,EAAArF,UAAAoH,qBAAA,WACEjI,KAAKmG,SAAU,EACf/K,OAAAwM,EAAA,mBAAAxM,IAgDF8K,EAAArF,UAAAC,OAAA,WACQ,IAAApF,EAAAsE,KAAAW,MAAEyF,EAAA1K,EAAA0K,QAASpL,EAAAU,EAAAV,MAAOqL,EAAA3K,EAAA2K,KAChBvH,EAAAkB,KAAAH,MAAAqI,OAAAlJ,aAAA,IAAAF,EAAA,GAAAA,EAER,GAAIsH,EACF,OACE/G,EAAA,qBAAKE,UAAU,qBACbF,EAAA,cAAC8I,EAAAjH,EAAe,OAKtB,IAAMY,EAAO9G,EAAM+B,KAAK,SAAAC,GAAK,OAAAA,EAAEjD,MAAQ,IAAViF,IACvBoJ,EAAYhN,OAAAiN,EAAA,UAAAjN,CAChB,2BACAA,OAAAyM,EAAA,aAAAzM,GAAiB,aAAe,aAE5BkN,EAAoB,UAAVtJ,EAEhB,OAAK8C,EAaHzC,EAAA,qBAAKE,UAAU,eACbF,EAAA,cAACkJ,EAAArH,EAAM,CAAC3E,MAAO+L,IAAYxG,EAAKvF,MAAQ6L,EAAetG,EAAKvF,MAAK,MAAM6L,IACnEhN,OAAAyM,EAAA,aAAAzM,IAAkBiE,EAAA,sBAAMxG,QAAQ,mBAAmB2P,KAAK,YAG5DnJ,EAAA,cAACoJ,EAAA,EAAoB,CAAClJ,UAAU,0BAC7B,SAAC7D,OAAEgN,EAAAhN,EAAAgN,IAAU,OACZrJ,EAAA,qBAAKE,UAAU,mBAAmB+C,MAAO,CAAEoG,IAAGA,IAC5CrJ,EAAA,qBAAKE,UAAU,0BACbF,EAAA,qBAAKE,UAAU,uBACbF,EAAA,qBAAKE,UAAU,6BACbF,EAAA,cAACsJ,EAAA,EAAc,CACbC,OAAO,qBACPC,MAAOzN,OAAAiN,EAAA,UAAAjN,CAAU,6BACjB0N,OAAQ,KAGVzJ,EAAA,cAACC,EAAA,KAAI,CAACX,GAAG,mBACPU,EAAA,wBAAKjE,OAAAiN,EAAA,UAAAjN,CAAU,yBAGnBiE,EAAA,cAAC0J,GAAO,CAACvH,WAAY6E,EAAMrL,MAAOA,EAAOgE,MAAOA,SAO1DK,EAAA,qBAAKE,UAAU,oBACbF,EAAA,qBAAKE,UAAU,0BACbF,EAAA,qBAAKE,UAAU,eACbF,EAAA,cAACsJ,EAAA,EAAc,CAACC,OAAO,uBAEvBvJ,EAAA,cAAC2J,EAAA,QAAgB,CACfzJ,UAAU,sDACV1G,QAASiJ,EAAKjJ,QACdoQ,WAAW,EACX1M,MAAOuF,EAAKvF,YAhDpB8C,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACkJ,EAAArH,EAAM,CAAC3E,MAAO6L,GACb/I,EAAA,sBAAMxG,QAAQ,mBAAmB2P,KAAK,YAExCnJ,EAAA,cAACsJ,EAAA,EAAc,CAACC,OAAO,uBACvBvJ,EAAA,cAAC6J,EAAA,QAAQ,CAACC,eAAe,MAmDnCjD,EArKA,CAAiC7G,EAAA,goBE1BnB,SAAUsJ,EAAe9I,GACrC,OACEuJ,EAAA,cAACC,EAAA,EAAYC,SAAQ,KAClB,SAAC5N,OAAE6N,EAAA7N,EAAA6N,gBAAiBC,EAAA9N,EAAA8N,mBAAyB,OAC5CJ,EAAA,cAACK,EAAmBjO,EAAA,CAClB+N,gBAAiBA,EACjBC,mBAAoBA,GAChB3J,MAYd,IAAA4J,EAAA,SAAA9J,GAAA,SAAA8J,IAAA,IAAA3J,EAAA,OAAAH,KAAA0F,MAAArF,KAAAsF,YAAAtF,YASEF,EAAA4J,QAAU,WACF,IAAAhO,EAAAoE,EAAAD,MAAEH,EAAAhE,EAAAkN,OAAa9J,EAAApD,EAAAmN,MACrB,MAAO,CAAEnJ,IAAGA,EAAEmJ,WADO,IAAA/J,EAAA1D,OAAAuO,EAAA,UAAAvO,CAAA,mBAAA0D,EACAgK,OADsCpN,EAAAoN,WAQ/D,OAlByClI,EAAA6I,EAAA9J,GACvC8J,EAAA5I,UAAA8G,kBAAA,WACE3H,KAAKH,MAAM0J,gBAAgBvJ,KAAK0J,YAGlCD,EAAA5I,UAAAoH,qBAAA,WACEjI,KAAKH,MAAM2J,mBAAmBxJ,KAAK0J,YAQrCD,EAAA5I,UAAAC,OAAA,WACU,IAAA8H,EAAA5I,KAAAH,MAAA+I,OACR,OAAOQ,EAAA,sBAAMQ,GAAI,gBAAgBhB,KAErCa,EAlBA,CAAyCL,EAAA,iDCRzC,SAASS,EAAuBC,GAG9B,IAFA,IAAIC,EACAC,EACKjR,EAAI,EAAGA,EAAI+Q,EAAMzM,OAAQtE,IAAK,CAErC,GAAoB,QADP+Q,EAAM/Q,GACVyM,OAAkB,CACzB,QAAkBpM,IAAd2Q,EAEG,CACLC,EAAWjR,EACX,MAHAgR,EAAYhR,GAOlB,YAAoBK,IAAb4Q,EAAyB,CAAED,UAASA,EAAEC,SAAQA,QAAK5Q,EAG5D,SAAS6Q,EAAiBH,GAExB,IADA,IAAMI,EAAO,GACJnR,EAAI,EAAGA,EAAI+Q,EAAMzM,OAAQtE,IAAK,CACrC,IAAM0E,EAASqM,EAAM/Q,GAAG6K,MAAM,KAAKlK,IAAI,SAAAyQ,GAAK,OAAAA,EAAA3E,SACtB,IAAlB/H,EAAOJ,SACT6M,EAAKzM,EAAO,IAAMA,EAAO,IAG7B,OAAOyM,EAyBT,SAASE,EAAsBvR,EAASwR,GAOtC,IANA,IAAMC,EAAY,WAAQD,EAAG,UACvBE,EAAS,YAASF,EAAG,UAEvBG,EAAa3R,EACbsF,EAAQqM,EAAW5H,QAAQ0H,GAC3BG,EAAMD,EAAW5H,QAAQ2H,IACX,IAAXpM,IAAyB,IAATsM,GAErBtM,GADAqM,EAAaA,EAAWjN,UAAU,EAAGY,GAASqM,EAAWjN,UAAUkN,EAAMF,EAAOlN,SAC7DuF,QAAQ0H,GAC3BG,EAAMD,EAAW5H,QAAQ2H,GAG3B,OAAOC,EAnFT9R,EAAOC,QAAU,CAAE+R,eAEnB,SAAwB7R,GACtB,IAAMiR,EAAQjR,EAAQ+K,MAAM,MACtBS,EAAWwF,EAAuBC,GACxC,OAAOzF,EAAW4F,EAAiBH,EAAMa,MAAMtG,EAAS0F,UAAY,EAAG1F,EAAS2F,WAAa,IAL5DY,oBAQnC,SAA6B/R,GAC3B,IAAMiR,EAAQjR,EAAQ+K,MAAM,MACtBS,EAAWwF,EAAuBC,GACxC,GAAIzF,EAAU,CACZ,IAAM9I,EAAc0O,EAAiBH,EAAMa,MAAMtG,EAAS0F,UAAY,EAAG1F,EAAS2F,WAC5Ea,EAAUf,EAAMa,MAAMtG,EAAS2F,SAAW,GAAG5N,KAAK,MACxD,MAAO,CAAEb,YAAWA,EAAE1C,QAAOgS,GAE7B,MAAO,CAAEtP,YAAa,GAAI1C,QAAOA,IAhBmBiS,cAoDxD,SAAuBjS,GACrB,IAAMkS,EAAY,mDACZrP,EAAA5C,EAAA,KAAEkS,EAAAtP,EAAAsP,aAAcC,EAAAvP,EAAAuP,YAEhBC,EAAuBd,EADDvR,EAAQgC,QAAQ,eAAgBoQ,KACY,UAIxE,OAHwBD,IACpBZ,EAAsBc,EAAsB,aAC5Cd,EAAsBc,EAAsB,eAE7CrQ,QAAQ,IAAI0M,OAAO,IAAIwD,EAAS,iBAAkB,MAAO,IACzDlQ,QAAQ,IAAI0M,OAAO,GAAGwD,EAAa,KAAM,wCClF9CjS,EAAAqS,EAAAC,GAAAtS,EAAAuS,EAAAD,EAAA,4BAAAE,IAAA,IAAAlC,EAAAtQ,EAAA,IAAAyS,EAAAzS,EAAA,KAAA0S,EAAA1S,EAAA2S,EAAAF,GAAAG,EAAA5S,EAAA,KAAA6S,EAAA7S,EAAA,KA4Bc,SAAUwS,EAAgB5P,OAAE7B,EAAA6B,EAAA7B,SACxC,OACEuP,EAAA,qBAAK7J,UAAU,oBACb6J,EAAA,qBAAK7J,UAAU,eAAeqK,GAAG,aAC/BR,EAAA,cAACoC,EAAAtK,EAAM,CAAC3B,UAAU,gBAAgBqM,OAAQF,EAAA,SAASG,qBAClDhS,GAEHuP,EAAA,cAACuC,EAAA,EAAqB,0CCnC5B7S,EAAAqS,EAAAC,GAAAtS,EAAAuS,EAAAD,EAAA,4BAAAlC,IAAA,IAAAE,EAAAtQ,EAAA,IAAAgT,EAAAhT,EAAA,KAAAiT,EAAAjT,EAAA,KAAAkT,EAAAlT,EAAA,IAAAmT,EAAAnT,EAAA,KA6Bc,SAAUoQ,EAASxN,OAAEoD,EAAApD,EAAAyN,cAC3B+C,OAD2B,IAAApN,KACCmN,EAAA,QAAkB7C,EAAA,SACpD,OACEA,EAAA,cAAC8C,EAAS,KACR9C,EAAA,cAAC0C,EAAA,OAAM,CAACK,aAAc/Q,OAAA4Q,EAAA,UAAA5Q,CAAU,iBAAkBgR,OAAO,IACzDhD,EAAA,qBAAK7J,UAAU,sBAAsBqK,GAAG,MACtCR,EAAA,qBAAK7J,UAAU,cAAcqK,GAAG,SAC9BR,EAAA,oBAAI7J,UAAU,qBAAqBnE,OAAA4Q,EAAA,UAAA5Q,CAAU,mBAC7CgO,EAAA,mBAAG7J,UAAU,iBAAiBnE,OAAA4Q,EAAA,UAAA5Q,CAAU,mCACxCgO,EAAA,uBACEA,EAAA,cAAC2C,EAAA,KAAI,CAACpN,GAAG,KAAKvD,OAAA4Q,EAAA,UAAA5Q,CAAU,mZCZpCqN,EAAA,SAAA9I,GAIE,SAAA8I,EAAY5I,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YAadF,EAAAuM,YAAc,WACZ,IAAMC,EAAexM,EAAKyM,WAAazM,EAAKyM,UAAUC,wBACtD,OAAKF,EAGE,CACL5D,IAAK+D,OAAOC,YAAcJ,EAAa5D,IACvCiE,KAAMF,OAAOG,YAAcN,EAAaK,MAJjC,CAAEjE,IAAK,EAAGiE,KAAM,IAfzB7M,EAAK+M,kBAAoBC,IAAS,WAAM,OAAAhN,EAAAiN,eAAoB,OAgChE,OAtCkDnM,EAAA6H,EAAA9I,GAShD8I,EAAA5H,UAAA8G,kBAAA,WACE3H,KAAK+M,cACLN,OAAOO,iBAAiB,SAAUhN,KAAK6M,oBAGzCpE,EAAA5H,UAAAoH,qBAAA,WACEwE,OAAOQ,oBAAoB,SAAUjN,KAAK6M,oBAc5CpE,EAAA5H,UAAAC,OAAA,eAAAhB,EAAAE,KACE,OACEkN,EAAA,qBACE3N,UAAWS,KAAKH,MAAMN,UACtB4D,IAAK,SAAAoJ,GAAa,OAACzM,EAAKyM,UAANA,IACjBvM,KAAKH,MAAMhG,SAASmG,KAAKqM,iBAIlC5D,EAtCA,CAAkDyE,EAAA,slBCkD5C,SAAUC,IAId,OAAO/R,OAAAgS,EAAA,QAAAhS,CAAQ,0BAA0BiS,MAAMC,EAAA,GAG3C,SAAUC,IACd,OAAOnS,OAAAgS,EAAA,QAAAhS,CAAQ,wBAAwBiS,MAAMC,EAAA,GAG/C,SAASE,EAAeC,GACtB,OAAKA,EAGc,CAAC,aAAc,0BAA2B,+BAA+B/T,IAC1F,SAAAgU,GACE,IAAM/K,EAAQgL,IAAcF,EAAS,SAAAG,GAAU,OAAAA,EAAOF,SAAPA,IAC/C,OAAO/K,GAAS,EAAI8K,EAAQ9K,QAASvJ,IAGvBmK,OAAOsK,EAAA,WARhB,GAWX,SAASC,EAAaF,EAAgBH,GACpC,IAAKA,EACH,OAAOG,EAET,IAAMjL,EAAQ8K,EAAQ7K,QAAQgL,GACxBG,EAAkBpL,EAAQ,EAAI8K,EAAQ9C,MAAM,EAAGhI,GAAS,GAC9D,OAAAnH,EAAA,GAAYoS,EAAM,CAAEG,gBAAeA,IAG/B,SAAUC,IACd,OAAO5S,OAAAgS,EAAA,QAAAhS,CAAQ,yBAA0B,CAAE6S,EAAG,aAAczH,KAC1D,SAAC9K,GAAgB,OAAdA,EAAA+K,SACH6G,EAAA,GAIE,SAAUY,IACd,OAAOxH,QAAQC,IAAI,CACjBvL,OAAAgS,EAAA,QAAAhS,CAAQ,yBAA0B,CAAE6S,EAAG,aACvC7S,OAAAgS,EAAA,QAAAhS,CAAQ,0BAEPoL,KAAK,SAAC9K,OAACyS,EAAAzS,EAAA,GAAW+R,EAAA/R,EAAA,GACjB,OAAAyS,EAAU1H,QAAQ/M,IAAI,SAACkN,GACrB,IAAMwH,EAAgCX,EAAQhH,QAAQ1J,KACpD,SAACC,GAAuB,OAAAA,EAAE0C,MAAQkH,EAAVlH,MAE1B,OAAI0O,EACF5S,EAAA,GACK4S,EACAxH,EAAM,CACT6G,QAASD,EAAeY,EAAaX,SAAS/T,IAAI,SAAAkU,GAChD,OAAAE,EAAaF,EAAQQ,EAAaX,aAIjC7G,MAGVyG,MAAMC,EAAA,GAGL,SAAUe,IACd,OAAO3H,QAAQC,IAAI,CAACvL,OAAAgS,EAAA,QAAAhS,CAAQ,wBAAyBA,OAAAgS,EAAA,QAAAhS,CAAQ,4BAC1DoL,KAAK,SAAC9K,OAAC+R,EAAA/R,EAAA,GAASyS,EAAAzS,EAAA,GACf,OAAA+R,EAAQhH,QAAQ/M,IAAI,SAAC0U,GACnB,IAAMX,EAAUD,EAAeY,EAAaX,SAAS/T,IAAI,SAAAkU,GACvD,OAAAE,EAAaF,EAAQQ,EAAaX,WAE9B7G,EAASuH,EAAU1H,QAAQ1J,KAAK,SAACC,GAAuB,OAAAA,EAAE0C,MAAQ0O,EAAV1O,MAC9D,OAAIkH,EACFpL,EAAA,GACKoL,EACAwH,EAAY,CACfX,QAAOA,IAGXjS,EAAA,GAAY4S,EAAY,CAAEX,QAAOA,QAGpCJ,MAAMC,EAAA,GAGL,SAAUgB,EAAcpE,GAC5B,OAAO9O,OAAAgS,EAAA,KAAAhS,CAAK,uBAAwB8O,GAAMmD,MAAMC,EAAA,GAG5C,SAAUiB,EAAgBrE,GAC9B,OAAO9O,OAAAgS,EAAA,KAAAhS,CAAK,yBAA0B8O,GAAMmD,MAAMC,EAAA,GAG9C,SAAUc,EAAalE,GAC3B,OAAO9O,OAAAgS,EAAA,KAAAhS,CAAK,sBAAuB8O,GAAMmD,MAAMC,EAAA,GAG3C,SAAUkB,IACd,OAAOpT,OAAAgS,EAAA,KAAAhS,CAAK,2BAA2BiS,MAAMC,EAAA","file":"js/docs.1570825310815.chunk.js","sourcesContent":["module.exports = [{\"path\":\"404\",\"content\":\"---\\ntitle: Page not found\\nnav: Not found\\nurl: /404/\\n---\\n\\n# Error\\n\\nThis page does not exist\\n\"},{\"path\":\"analysis/analysis-parameters\",\"content\":\"---\\ntitle: Analysis Parameters\\nurl: /analysis/analysis-parameters/\\n---\\n\\nProject analysis settings can be configured in multiple places. Here is the hierarchy:\\n\\n<!-- sonarqube -->\\n* Global properties, defined in the UI, apply to all projects (From the top bar, go to **[Administration > Configuration > General Settings](/#sonarqube-admin#/admin/settings)**)\\n<!-- /sonarqube -->\\n* Project properties, defined in the UI, override global property values (At a project level, go to **Administration > General Settings**)\\n* Project analysis parameters, defined in a project analysis configuration file or an analyzer configuration file, override the ones defined in the UI\\n* Analysis / Command line parameters, defined when launching an analysis (with `-D` on the command line), override project analysis parameters\\n\\nNote that only parameters set through the UI are stored in the database.\\nFor example, if you override the `sonar.exclusions` parameter via command line for a specific project, it will not be stored in the database. Subsequent analyses, or analyses in SonarLint with connected mode, would still be executed with the exclusions defined in the UI and therefore stored in the DB.\\n\\nMost of the property keys shown in the interface at both global and project levels can also be set as analysis parameters, but the parameters listed below can _only_ be set at analysis time. \\n\\nFor language-specific parameters related to test coverage and execution, see [Test Coverage & Execution](/analysis/coverage/).  \\nFor language-specific parameters related to external issue reports, see [External Issues](/analysis/external-issues/).\\n\\n## Mandatory Parameters\\n\\n### Server\\nKey | Description | Default\\n---|----|---\\n`sonar.host.url`| the server URL | <!-- sonarqube -->http://localhost:9000<!-- /sonarqube --><!-- sonarcloud -->https://sonarcloud.io<!-- /sonarcloud -->\\n\\n### Project Configuration\\nKey | Description | Default\\n---|----|---\\n`sonar.projectKey`|The project's unique key. Allowed characters are: letters, numbers, `-`, `_`, `.` and `:`, with at least one non-digit. | For Maven projects, this defaults to `<groupId>:<artifactId>`\\n\\n## Optional Parameters\\n\\n### Project Identity\\nKey | Description | Default\\n---|----|---\\n`sonar.projectName`|Name of the project that will be displayed on the web interface.|`<name>` for Maven projects, otherwise project key. If not provided and there is already a name in the DB, it won't be overwritten\\n`sonar.projectVersion` | The project version. | `<version>` for Maven projects, otherwise \\\"not provided\\\"\\n\\n### Authentication\\nIf the \\\"Anyone\\\" pseudo-group does not have permission to perform analyses, you'll need to supply the credentials of a user with Execute Analysis permission for the analysis to run under.\\n\\n\\nKey | Description | Default\\n---|----|---\\n`sonar.login` | The login or authentication token of a {instance} user with Execute Analysis permission on the project. |\\n`sonar.password` | The password that goes with the `sonar.login` username. This should be left blank if an authentication token is being used. |\\n\\n### Web Services\\nKey | Description | Default\\n---|----|---\\n`sonar.ws.timeout` | Maximum time to wait for the response of a Web Service call (in seconds). Modifying this value from the default is useful only when you're experiencing timeouts during analysis while waiting for the server to respond to Web Service calls. |  60\\n\\n### Project Configuration\\nKey | Description | Default\\n---|----|---\\n`sonar.projectDescription` | The project description. | `<description>` for Maven projects\\n`sonar.links.homepage` | Project home page. | `<url>` for Maven projects\\n`sonar.links.ci` | Continuous integration. | `<ciManagement><url>` for Maven projects\\n`sonar.links.issue` | Issue tracker. | `<issueManagement><url>` for Maven projects\\n`sonar.links.scm` | Project source repository. | `<scm><url>` for Maven projects\\n`sonar.sources` | Comma-separated paths to directories containing main source files. | Read from build system for Maven, Gradle, MSBuild projects. Defaults to project base directory when neither `sonar.sources` nor `sonar.tests` is provided.\\n`sonar.tests` | Comma-separated paths to directories containing test source files. | Read from build system for Maven, Gradle, MSBuild projects. Else default to empty.\\n`sonar.sourceEncoding` | Encoding of the source files. Ex: `UTF-8`, `MacRoman`, `Shift_JIS`. This property can be replaced by the standard property `project.build.sourceEncoding` in Maven projects. The list of available encodings depends on your JVM. | System encoding\\n`sonar.externalIssuesReportPaths` | Comma-delimited list of paths to Generic Issue reports. | \\n`sonar.projectDate` | Assign a date to the analysis. This parameter is only useful when you need to retroactively create the history of a not-analyzed-before project. The format is `yyyy-MM-dd`, for example: 2010-12-01. Since you cannot perform an analysis dated prior to the most recent one in the database, you must analyze recreate your project history in chronological order, oldest first. ![](/images/exclamation.svg) Note: You may need to adjust your housekeeping settings if you wish to create a long-running history. | Current date\\n`sonar.projectBaseDir` | Use this property when you need analysis to take place in a directory other than the one from which it was launched. E.G. analysis begins from `jenkins/jobs/myjob/workspace` but the files to be analyzed are in `ftpdrop/cobol/project1`. The path may be relative or absolute. Specify not the the source directory, but some parent of the source directory. The value specified here becomes the new \\\"analysis directory\\\", and other paths are then specified as though the analysis were starting from the specified value of `sonar.projectBaseDir`. Note that the analysis process will need write permissions in this directory; it is where the `sonar.working.directory` will be created. |\\n`sonar.working.directory` | Set the working directory for an analysis triggered with the SonarScanner or the SonarScanner for Ant (versions greater than 2.0). This property is not compatible with the SonarScanner for MSBuild. Path must be relative, and unique for each project. ![](/images/exclamation.svg) Beware: the specified folder is deleted before each analysis. | `.scannerwork`\\n`sonar.scm.provider` | This property can be used to explicitly tell {instance} which SCM plugin should be used to grab SCM data on the project (in case auto-detection does not work). The value of this property is always lowercase and depends on the plugin (ex. \\\"tfvc\\\" for the TFVC plugin). Check the documentation page of each plugin for more. |  \\n`sonar.scm.forceReloadAll` | By default, blame information is only retrieved for changed files. Set this property to `true` to load blame information for all files. This can be useful is you feel that some SCM data is outdated but {instance} does not get the latest information from the SCM engine. | \\n`sonar.scm.exclusions.disabled`| For supported engines, files ignored by the SCM, i.e. files listed in `.gitignore`, will automatically be ignored by analysis too. Set this property to `true` to disable that feature.|\\n`sonar.scm.revision`| Overrides the revision, for instance the Git sha1, displayed in analysis results. By default value is provided by the CI environment or guessed by the checked-out sources.| \\n`sonar.buildString`| The string passed with this property will be stored with the analysis and available in the results of `api/project_analyses/search`, thus allowing you to later identify a specific analysis and obtain its ID for use with `api/project_analyses/set_baseline`. | |\\n`sonar.analysis.[yourKey]`| This property stub allows you to insert custom key/value pairs into the analysis context, which will also be passed forward to [webhooks](/project-administration/webhooks/). | |\\n\\n\\n### Duplications\\nKey | Description | Default\\n---|----|---\\n`sonar.cpd.${language}.minimumtokens` | A piece of code is considered duplicated as soon as there are at least 100 duplicated tokens in a row (override with `sonar.cpd.${language}.minimumTokens`) spread across at least 10 lines of code (override with `sonar.cpd.${language}.minimumLines`). For Java projects, a piece of code is considered duplicated when there is a series of at least 10 statements in a row, regardless of the number of tokens and lines. This threshold cannot be overridden.  | 100\\n`sonar.cpd.${language}.minimumLines` | (see above) | 10\\n\\n\\n### Analysis Logging\\nKey | Description | Default\\n---|----|---\\n`sonar.log.level` | Control the quantity / level of logs produced during an analysis. `DEBUG`: Display `INFO` logs + more details at `DEBUG` level. Similar to `sonar.verbose=true`. `TRACE`: Display `DEBUG` logs + the timings of all ElasticSearch queries and Web API calls executed by the SonarScanner. | `INFO`\\n`sonar.verbose` | Add more detail to both client and server-side analysis logs. Activates `DEBUG` mode for the scanner, and adds client-side environment variables and system properties to server-side log of analysis report processing. ![](/images/exclamation.svg)NOTE: There is the potential for this setting to expose sensitive information such as passwords if they are stored as server-side environment variables. | false\\n`sonar.showProfiling` | Display logs to see where the analyzer spends time. This parameter generates a file containing these timing infos in `<workingDir>/profiling/<moduleKey>-profiler.xml` where `<workingDir>` is: `.sonar/profiling/` when analysis is run with SonarScanner, and `target/sonar/profiling/` when SonarScanner for Maven is used. | `false`\\n`sonar.scanner.dumpToFile` | Outputs to the specified file the full list of properties passed to the scanner API as a means to debug analysis. |  \\n`sonar.scanner.metadataFilePath` | Set the location where the scanner writes the `report-task.txt` file containing among other things the `ceTaskId`. | value of `sonar.working.directory`\\n\\n<!-- sonarqube -->\\n### Deprecated\\n[[danger]]\\n| ![](/images/cross.svg) These parameters are listed for completeness, but are deprecated and should not be used in new analyses.\\n\\nKey | Description\\n---|----|--- \\n`sonar.links.scm_dev` **![](/images/cross.svg)Deprecated since SQ 7.1** | Developer connection. | `<scm><developerConnection>` for Maven projects\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/background-tasks\",\"content\":\"---\\ntitle: Background Tasks\\nurl: /analysis/background-tasks/\\n---\\n\\nA Background Task can be:\\n* the import of an Analysis Report\\n* the computation of a Portfolio\\n* the import or export of a project\\n\\n## What happens after the scanner is done analyzing?\\n\\nAnalysis is not complete until the relevant Background Task has been completed. Even though the SonarScanner's log shows `EXECUTION SUCCESS`, the analysis results will not be visible in the {instance} project until the Background Task has been completed. After a SonarScanner has finished analyzing your code, the result of the analysis (Sources, Issues, Metrics) -  the Analysis Report - is sent to {instance} Server for final processing by the Compute Engine. Analysis Reports are queued and processed serially.\\n\\nAt the Project level, when there is a pending Analysis Report waiting to be consumed, you have a \\\"Pending\\\" notification in the header, next to the date of the most recent completed analysis.\\n\\nGlobal Administrators can view the current queue at **[Administration > Projects > Background Tasks](/#sonarqube-admin#/admin/background_tasks)**. Project administrators can see the tasks for a project at **Administration > Background Tasks**.\\n\\n## How do I know when analysis report processing fails?\\nBackground tasks usually succeed, but sometimes unusual circumstances cause processing to fail. Examples include:\\n\\n* running out of memory while processing a report from a very large project\\n* hitting a clash between the key of an existing module or project and one in the report\\n* ...\\n\\nWhen that happens, the failed status is reflected on the project homepage, but that requires someone to notice it. You can also choose to be notified by email when background tasks fail - either on a project by project basis, or globally on all projects where you have administration rights, in the **Notifications** section of your profile.\\n\\n## How do I diagnose a failing background task?\\nFor each Analysis Report there is a dropdown menu allowing you to access to the \\\"Scanner Context\\\" showing you the configuration of the Scanner at the moment when the code scan has been run.\\n\\nIf processing failed for the task, an additional option will be available: \\\"Show Error Details\\\", to get the technical details why the processing of the Background Task failed.\\n\\n## How do I cancel a pending analysis report?\\nAdministrators can cancel the processing of a pending task by clicking:\\n\\n* on the red 'x' available on each line of a `Pending` task\\n* on the red \\\"bulk cancel\\\" option next to the pending jobs count. This button cancels all pending tasks.\\n\\nOnce processing has begun on a report, it's too late to cancel it.\\n\\n\"},{\"path\":\"analysis/coverage\",\"content\":\"---\\ntitle: Test Coverage & Execution\\nurl: /analysis/coverage/\\n---\\n\\nThis page lists analysis parameters related to test coverage and execution reports. For more other parameters, see [Analysis Parameters](/analysis/analysis-parameters/).\\n\\nSonarSource analyzers do not run your tests or generate reports. They only import pre-generated reports. Below you'll find language- and tool-specific analysis parameters for importing coverage and execution reports.\\n\\nIn the [Guides](https://community.sonarsource.com/c/announce/guides) category of the [SonarSource Community forum](https://community.sonarsource.com/) you might find instructions on generating these reports.\\n\\nSome properties support the following wildcards in paths. The remarks for properties that support wildcards will mention that fact. If the remarks do not say wildcards are supported, then they are not.:\\n\\nSymbol|Meaning\\n---|---\\n`?`|a single character\\n`*`|any number of characters\\n`**`|any number of directories\\n\\n\\n\\n## Test Coverage\\nUnless otherwise specified, these properties require values that are relative to project root.\\n\\nLanguage|Property|Remarks\\n----|----|----\\n**Any**|`sonar.coverageReportPaths`|Path to coverage report in the [Generic Test Data](/analysis/generic-test/) format.\\nApex|`sonar.apex.coverage.reportPath`|Path to the `test-result-codecoverage.json` report file generated by the [`apex:test:run`](https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_apex.htm?search_text=apex%20test#cli_reference_test_run) command of the [Salesforce CLI](https://developer.salesforce.com/tools/sfdxcli). Note, you must have a [Salesforce DX project](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_workspace_setup.htm) set up and linked to your Org\\nC / C++ / Objective-C|`sonar.cfamily.gcov.reportsPath`|Path to the directory containing native `*.gcov` reports (not the XML reports generated by gcovr)\\nC / C++ / Objective-C|`sonar.cfamily.llvm-cov.reportPath`| Path to a llvm-cov report\\nC / C++ / Objective-C|`sonar.cfamily.vscoveragexml.reportsPath`|Path may be absolute or relative to the solution directory. Path wildcards (see above) are supported. Note that the `.coveragexml` report format offered by Visual Studio is not supported.\\nC / C++ / Objective-C|`sonar.cfamily.bullseye.reportPath`| Path to the report from Bullseye, version >= 8.9.63 (use [covxml](http://www.bullseye.com/help/ref-covxml.html) tool)\\nC#|`sonar.cs.vscoveragexml.reportsPaths`|Path to Visual Studio Code Coverage report. Multiple paths may be comma-delimited, or included via wildcards. See _Notes on importing .NET reports_ below.\\nC#|`sonar.cs.dotcover.reportsPaths`|Path to dotCover coverage report. See _Notes on importing .NET reports_ below.\\nC#|`sonar.cs.opencover.reportsPaths`|Path to OpenCover coverage report. See _Notes on importing .NET reports_ below.\\nFlex|`sonar.flex.cobertura.reportPaths`|Path to the Cobertura XML reports. Multiple paths may be comma-delimited. May be absolute or relative to the project base directory.\\nGo|`sonar.go.coverage.reportPaths`|Comma-delimited list of paths to coverage report files. Path wildcards are supported (see above) since SonarGo 1.1.\\nJava / Kotlin / Scala / JVM|`sonar.coverage.jacoco.xmlReportPaths`|Path to JaCoCo XML coverage reports.\\nJava|`sonar.jacoco.reportPaths`![](/images/cross.svg)|**Deprecated. Use `sonar.coverage.jacoco.xmlReportsPath`.** Path to JaCoCo reports in binary format. **Supported only for Java**. \\nJavaScript|`sonar.javascript.lcov.reportPaths`|Comma-delimited list of paths to LCOV coverage report files. Paths may be absolute or relative to project root.\\nPHP|`sonar.php.coverage.reportPaths`|Comma-delimited list of paths to Clover XML-format coverage report files. Paths may be absolute or relative to project root.\\nPython|`sonar.python.coverage.reportPaths`|Comma-delimited list of paths to coverage reports in the Cobertura XML format. Path wildcards are supported (see above). Leave unset to use the default (`coverage-reports/*coverage-*.xml`).\\nRuby|`sonar.ruby.coverage.reportPaths`|Comma-delimited list of paths to SimpleCov `.resultset.json` report files. Paths may be absolute or relative to project-root.\\nScala|`sonar.scala.coverage.reportPaths`|Comma-separated list of paths to `scoverage.xml` report files generaged by Scoverage.\\nSwift, Xcode 9.3+|&nbsp;|You can use the [xccov-to-sonarqube-generic.sh](https://github.com/SonarSource/sonar-scanning-examples/blob/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh) script from the [sonar-scanning-examples/swift-coverage](https://github.com/SonarSource/sonar-scanning-examples/tree/master/swift-coverage) project convert output from Xcode 9.3's xccov tool to the [Generic Test Data](/analysis/generic-test/) format.\\nSwift, Xcode 7-9.2|`sonar.swift.coverage.reportPath`|Path to the report generated by `llvm-cov show`. Path may be absolute or relative to project root.\\nTypeScript|`sonar.typescript.lcov.reportPaths`|Comma-delimited list of paths to LCOV coverage reports. Paths may be absolute or relative to project root.\\nVB.NET|`sonar.vbnet.vscoveragexml.reportsPaths`|Path to Visual Studio Code Coverage report. Multiple paths may be comma-delimited, or included via wildcards. See _Notes on importing .NET reports_ below.\\nVB.NET|`sonar.vbnet.dotcover.reportsPaths`|Path to dotCover coverage report. See _Notes on importing .NET reports_ below.\\nVB.NET|`sonar.vbnet.opencover.reportsPaths`|Path to OpenCover coverage report. See _Notes on importing .NET reports_ below.\\n\\n\\n## Test Execution\\nUnless otherwise specified, these properties require values that are relative to project root.\\n\\nLanguage|Property|Remarks\\n---|---|---\\n**All**|`sonar.testExecutionReportPaths`|Comma-delimited list of paths to execution reports in the [Generic Execution Data](/analysis/generic-test/) format.\\nC / C++ / Objective-C|`sonar.cfamily.cppunit.reportsPath`|Path to the directory holding the [CPPUnit](http://sourceforge.net/projects/cppunit/) reports. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\nC#|`sonar.cs.vstest.reportsPaths`|Paths to VSTest reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\nC#|`sonar.cs.nunit.reportsPaths`|Paths to NUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\nC#|`sonar.cs.xunit.reportsPaths`|Paths to xUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\nGo|`sonar.go.tests.reportPaths`|Comma-delimited list of paths to unit test report files. Paths may be absolute or relative to project root.\\nJava|`sonar.junit.reportPaths`|Comma-delimited list of paths to Surefire XML-format reports.\\nJavaScript|&nbsp;|You can use [jest-sonar-reporter](https://www.npmjs.com/package/jest-sonar-reporter) or[karma-sonarqube-unit-reporter](https://github.com/tornaia/karma-sonarqube-unit-reporter) to create reports in the [Generic Execution Data](/analysis/generic-test/) format. Both packages are available on npm.\\nPHP|`sonar.php.tests.reportPath`|Path to the PHPUnit unit test execution report file. Path may be absolute or relative to project root.\\nPython|`sonar.python.xunit.reportPath`|Path to unit test execution report. Leave unset to use the default (`xunit-reports/xunit-result-*.xml`). Path wildcards (see above) are supported. If any paths in the report are invalid, set `sonar.python.xunit.skipDetails=true` to collect only project-level details.\\nTypeScript|&nbsp;|You can use [jest-sonar-reporter](https://www.npmjs.com/package/jest-sonar-reporter) or[karma-sonarqube-unit-reporter](https://github.com/tornaia/karma-sonarqube-unit-reporter) to create reports in the [Generic Execution Data](/analysis/generic-test/) format. Both packages are available on npm.\\nVB.NET|`sonar.vbnet.vstest.reportsPaths`|Paths to VSTest execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\nVB.NET|`sonar.vbnet.nunit.reportsPaths`|Paths to NUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\nVB.NET|`sonar.vbnet.xunit.reportsPaths`|Paths to xUnit execution reports. Multiple paths may be comma-delimited, or included via wildcards. Note that while measures such as the number of tests are displayed at project level, no drilldown is available.\\n\\n**Notes on importing .NET reports**  \\n.NET reports are imported into SonarQube in 4 steps:\\n\\n1. Run the SonarScanner.MSBuild.exe `begin` command, specifying the absolute path where the reports _will be_ available using the `/d:propertyKey=\\\"path\\\"` syntax (\\\"propertyKey\\\" depends on the tool)\\n1. Build your project using MSBuild\\n1. Run your test tool, instructing it to produce a report at the same location specified earlier to the MSBuild SonarQube Runner\\n1. Run the SonarScanner.MSBuild.exe `end` command\\n\"},{\"path\":\"analysis/external-issues\",\"content\":\"---\\ntitle: Importing External Issues\\nurl: /analysis/external-issues/\\n---\\n\\nThis page lists analysis parameters related to the import of issues raised by external, third-party analyzers. For more other parameters, see [Analysis Parameters](/analysis/analysis-parameters/).\\n\\nSonarSource analyzers do not run your external analyzers or generate reports. They only import pre-generated reports. Below you'll find language- and tool-specific analysis parameters for importing reports generated by external analyzers.\\n\\nIn the [Guides](https://community.sonarsource.com/c/announce/guides) category of the [SonarSource Community forum](https://community.sonarsource.com/) you might find instructions on generating these reports.\\n\\nSome properties support the following wildcards in paths. The remarks for properties that support wildcards will mention that fact. If the remarks do not say wildcards are supported, then they are not.:\\n\\nSymbol|Meaning\\n---|---\\n`?`|a single character\\n`*`|any number of characters\\n`**`|any number of directories\\n\\nUnless otherwise specified, the following properties accept both absolute paths and paths relative to project root.\\n\\nLanguage|Property|Remarks\\n----|----|----\\nApex|`sonar.apex.pmd.reportPaths`|Comma-delimited list of paths to [PMD Apex](https://pmd.github.io/pmd-5.5.7/pmd-apex/rules/index.html) [XML reports](https://pmd.github.io/latest/pmd_userdocs_installation.html#running-pmd-via-command-line)|\\nCSS|`sonar.css.stylelint.reportPaths`|Comma-delimited list of paths to [StyleLint.io](https://stylelint.io/) reports|\\nGo|`sonar.go.govet.reportPaths`|Comma-delimited list of paths to [GoVet](https://golang.org/cmd/vet/) reports|\\nGo|`sonar.go.golint.reportPaths`|Comma-delimited list of paths to [GoLint](https://github.com/golang/lint) reports|\\nGo|`sonar.go.gometalinter.reportPaths`|Comma-delimited list of paths to [GoMetaLinter](https://github.com/alecthomas/gometalinter) reports|\\nGo|`sonar.go.golangci-lint.reportPaths`|Comma-delimited list of paths to [golangci-lint](https://github.com/golangci/golangci-lint) reports in checkstyle format (use `--out-format checkstyle` golangci-lint option)|\\nJava|`sonar.java.spotbugs.reportPaths`|Comma-delimited list of paths to reports from [SpotBugs](https://spotbugs.github.io/), FindSecBugs, or FindBugs|\\nJava|`sonar.java.pmd.reportPaths`|Comma-delimited list of paths to reports from [PMD](http://maven.apache.org/plugins/maven-pmd-plugin/usage.html)\\nJava|`sonar.java.checkstyle.reportPaths`|Comma-delimited list of paths to reports from [Checkstyle](http://maven.apache.org/plugins/maven-checkstyle-plugin/checkstyle-mojo)\\nJavaScript|`sonar.eslint.reportPaths`|Comma-delimited list of paths to JSON [ESLint](https://eslint.org/) reports (use `-f json` ESLint option)\\nKotlin|`sonar.androidLint.reportPaths`|Comma-delimited list of paths to AndroidLint reports\\nKotlin|`sonar.kotlin.detekt.reportPaths`|Comma-delimited list of paths to [Detekt](https://github.com/arturbosch/detekt) reports\\nPython|`sonar.python.pylint.reportPath`|Path to a [Pylint](http://www.pylint.org/) report. Wildcards are supported|\\nPython|![](/images/cross.svg) **Deprecated** `sonar.python.pylint_config` `sonar.python.pylint`|By default SonarPython will execute the pylint command for you if you haven't specified the path to a PyLint report. Use `sonar.python.pylint` to use a pylint executable in a non-default location. The property **must** be set on windows (even for the default location), using either escaped backslashes, or single forward slashes (e.g. `C:\\\\\\\\Python26\\\\\\\\Scripts\\\\\\\\pylint.bat`, `C:/Python26/Scripts/pylint.bat`). Use `sonar.python.pylint_config` to specify the relative or absolute path to a non-default pylint configuration file.\\nPython|`sonar.python.bandit.reportPaths`|Comma-delimited list of paths to [Bandit](https://github.com/PyCQA/bandit/blob/master/README.rst) reports\\nRuby|`sonar.ruby.rubocop.reportPaths`|Comma-delimited list of paths to [Rubocop](https://github.com/rubocop-hq/rubocop) reports\\nScala|`sonar.scala.scalastyle.reportPaths`|Comma-delimited list of paths to [Scalastyle](http://www.scalastyle.org/) reports\\nScala|`sonar.scala.scapegoat.reportPaths`|Comma-delimited list of paths to [Scapegoat](https://github.com/sksamuel/scapegoat) reports in the **Scalastyle format**\\nSwift|`sonar.swift.swiftLint.reportPaths`|Comma-delimited list of paths to [SwiftLint](https://github.com/realm/SwiftLint) reports in JSON format\\nTypeScript|`sonar.typescript.tslint.reportPaths`|Comma-delimited list of paths to [TSLint](https://palantir.github.io/tslint/) reports in JSON format (use `-t json` TSLint option)|\\n\\n**Notes on external .NET issues**  \\nIssues from third-party Roslyn analyzers (including Roslyn analyzers provided by Microsoft) are included in the MSBuild output and imported by default into {instance} so no properties exist to enable that behavior. Instead, properties are available to adjust the import and to _stop_ importing those issues.\\n\\nNote that Roslyn issues with an *error* severity automatically fail the build, and it is not recommended to run the Scanner for MSBuild's end step if the MSBuild step fails for any reason because it will result in an essentially empty analysis, which will close all outstanding issues in the project.\\n\\nLanguage|Property|Remarks\\n----|----|----\\nC#|`sonar.cs.roslyn.ignoreIssues`|Set to `true` to disable import of external issues. Defaults to `false`.\\nC#|`sonar.cs.roslyn.bugCategories` `sonar.cs.roslyn.vulnerabilityCategories` `sonar.cs.roslyn.codeSmellCategories`|Comma-delimited list of categories whose issues should be classified as Bugs, Vulnerabilities, or Code Smells. \\nVB.NET|`sonar.vbnet.roslyn.ignoreIssues`|Set to `true` to disable import of external issues. Defaults to `false`.\\nVB.NET|`sonar.vbnet.roslyn.bugCategories` `sonar.vbnet.roslyn.vulnerabilityCategories` `sonar.vbnet.roslyn.codeSmellCategories`|Comma-delimited list of categories whose issues should be classified as Bugs, Vulnerabilities, or Code Smells. \\n\"},{\"path\":\"analysis/generic-issue\",\"content\":\"---\\ntitle: Generic Issue Data\\nurl: /analysis/generic-issue/\\n---\\n\\n{instance} supports a generic import format for raising \\\"external\\\" issues in code. It is intended to allow you to import the issues from your favorite linter even if no plugin exists for it.\\n\\nExternal issues suffer from two important limitations:\\n\\n* they cannot be managed within {instance}; for instance, there is no ability to mark them False Positive.\\n* the activation of the rules that raise these issues cannot be managed within {instance}. In fact, external rules are not visible in the Rules page or reflected in any Quality Profile.\\n\\nExternal issues and the rules that raise them must be managed in the configuration of your linter. \\n\\n## Import \\nThe analysis parameter `sonar.externalIssuesReportPaths` accepts a comma-delimited list of paths to reports.\\n\\nEach report must contain, at top-level, an array of `Issue` objects named `issues`.\\n\\n#### Issue fields:\\n\\n* `engineId` - string\\n* `ruleId` - string\\n* `primaryLocation` - Location object \\n* `type` - string. One of BUG, VULNERABILITY, CODE_SMELL\\n* `severity` - string. One of BLOCKER, CRITICAL, MAJOR, MINOR, INFO\\n* `effortMinutes` - integer, optional. Defaults to 0\\n* `secondaryLocations` - array of Location objects, optional\\n\\n#### Location fields:\\n\\n* `message` - string\\n* `filePath` - string\\n* `textRange` - TextRange object, optional for secondary locations only\\n\\n#### TextRange fields:\\n\\n* `startLine` - integer. 1-indexed\\n* `endLine` - integer, optional. 1-indexed\\n* `startColumn` - integer, optional. 0-indexed\\n* `endColumn` - integer, optional. 0-indexed\\n\\n## Example\\nHere is an example of the expected format:\\n\\n\\t{ \\\"issues\\\": [\\n\\t\\t{\\n\\t\\t  \\\"engineId\\\": \\\"test\\\",\\n\\t\\t  \\\"ruleId\\\": \\\"rule1\\\",\\n\\t\\t  \\\"severity\\\":\\\"BLOCKER\\\",\\n\\t\\t  \\\"type\\\":\\\"CODE_SMELL\\\",\\n\\t\\t  \\\"primaryLocation\\\": {\\n\\t\\t\\t\\\"message\\\": \\\"fully-fleshed issue\\\",\\n\\t\\t\\t\\\"filePath\\\": \\\"sources/A.java\\\",\\n\\t\\t\\t\\\"textRange\\\": {\\n\\t\\t\\t  \\\"startLine\\\": 30,\\n\\t\\t\\t  \\\"endLine\\\": 30,\\n\\t\\t\\t  \\\"startColumn\\\": 9,\\n\\t\\t\\t  \\\"endColumn\\\": 14\\n\\t\\t\\t}\\n\\t\\t  },\\n\\t\\t  \\\"effortMinutes\\\": 90,\\n\\t\\t  \\\"secondaryLocations\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t  \\\"message\\\": \\\"cross-file 2ndary location\\\",\\n\\t\\t\\t  \\\"filePath\\\": \\\"sources/B.java\\\",\\n\\t\\t\\t  \\\"textRange\\\": {\\n\\t\\t\\t\\t\\\"startLine\\\": 10,\\n\\t\\t\\t\\t\\\"endLine\\\": 10,\\n\\t\\t\\t\\t\\\"startColumn\\\": 6,\\n\\t\\t\\t\\t\\\"endColumn\\\": 38\\n\\t\\t\\t  }\\n\\t\\t\\t}\\n\\t\\t  ]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t  \\\"engineId\\\": \\\"test\\\",\\n\\t\\t  \\\"ruleId\\\": \\\"rule2\\\",\\n\\t\\t  \\\"severity\\\": \\\"INFO\\\",\\n\\t\\t  \\\"type\\\": \\\"BUG\\\",\\n\\t\\t  \\\"primaryLocation\\\": {\\n\\t\\t\\t\\\"message\\\": \\\"minimal issue raised at file level\\\",\\n\\t\\t\\t\\\"filePath\\\": \\\"sources/Measure.java\\\"\\n\\t\\t  }\\n\\t\\t}\\n\\t]}\\n\"},{\"path\":\"analysis/generic-test\",\"content\":\"---\\ntitle: Generic Test Data\\nurl: /analysis/generic-test/\\n---\\n\\nOut of the box, {instance} supports generic formats for test coverage and test execution import. If your coverage engines' native output formats aren't supported by your language plugins, simply covert them to these formats.\\n\\n## Generic Coverage\\nReport paths should be passed in a comma-delimited list to:\\n\\n * `sonar.coverageReportPaths`\\n\\nThe supported format is described by the `sonar-generic-coverage.xsd`:\\n\\n\\t<xs:schema>\\n\\t  <xs:element name=\\\"coverage\\\">\\n\\t\\t<xs:complexType>\\n\\t\\t  <xs:sequence>\\n\\t\\t\\t<xs:element name=\\\"file\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\">\\n\\t\\t\\t  <xs:complexType>\\n\\t\\t\\t\\t<xs:sequence>\\n\\t\\t\\t\\t  <xs:element name=\\\"lineToCover\\\" minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\">\\n\\t\\t\\t\\t\\t<xs:complexType>\\n\\t\\t\\t\\t\\t  <xs:attribute name=\\\"lineNumber\\\" type=\\\"xs:positiveInteger\\\" use=\\\"required\\\"/>\\n\\t\\t\\t\\t\\t  <xs:attribute name=\\\"covered\\\" type=\\\"xs:boolean\\\" use=\\\"required\\\"/>\\n\\t\\t\\t\\t\\t  <xs:attribute name=\\\"branchesToCover\\\" type=\\\"xs:nonNegativeInteger\\\"/>\\n\\t\\t\\t\\t\\t  <xs:attribute name=\\\"coveredBranches\\\" type=\\\"xs:nonNegativeInteger\\\"/>\\n\\t\\t\\t\\t\\t</xs:complexType>\\n\\t\\t\\t\\t  </xs:element>\\n\\t\\t\\t\\t</xs:sequence>\\n\\t\\t\\t  <xs:attribute name=\\\"path\\\" type=\\\"xs:string\\\" use=\\\"required\\\"/>\\n\\t\\t\\t  </xs:complexType>\\n\\t\\t\\t</xs:element>\\n\\t\\t  </xs:sequence>\\n\\t\\t  <xs:attribute name=\\\"version\\\" type=\\\"xs:positiveInteger\\\" use=\\\"required\\\"/>\\n\\t\\t</xs:complexType>\\n\\t  </xs:element>\\n\\t</xs:schema>\\n\\nand looks like this:\\n\\n\\t<coverage version=\\\"1\\\">\\n\\t  <file path=\\\"xources/hello/NoConditions.xoo\\\">\\n\\t\\t<lineToCover lineNumber=\\\"6\\\" covered=\\\"true\\\"/>\\n\\t\\t<lineToCover lineNumber=\\\"7\\\" covered=\\\"false\\\"/>\\n\\t  </file>\\n\\t  <file path=\\\"xources/hello/WithConditions.xoo\\\">\\n\\t\\t<lineToCover lineNumber=\\\"3\\\" covered=\\\"true\\\" branchesToCover=\\\"2\\\" coveredBranches=\\\"1\\\"/>\\n\\t  </file>\\n\\t</coverage>\\n\\nThe root node should be named `coverage`. Its version attribute should be set to `1`.\\n\\nInsert a `file` element for each file which can be covered by tests. Its `path` attribute can be either absolute or relative to the root of the module.\\nInside a `file` element, insert a `lineToCover` for each line which can be covered by unit tests. It can have the following attributes:\\n* `lineNumber` (mandatory)\\n* `covered` (mandatory): boolean value indicating whether tests actually hit that line\\n* `branchesToCover` (optional): number of branches which can be covered\\n* `coveredBranches` (optional): number of branches which are actually covered by tests\\n\\n## Generic Execution\\nReport paths should be passed in a comma-delimited list to:\\n\\n* `sonar.testExecutionReportPaths`\\n\\nThe supported format looks like this:\\n\\n\\t<testExecutions version=\\\"1\\\">\\n\\t  <file path=\\\"testx/ClassOneTest.xoo\\\">\\n\\t\\t<testCase name=\\\"test1\\\" duration=\\\"5\\\"/>\\n\\t\\t<testCase name=\\\"test2\\\" duration=\\\"500\\\">\\n\\t\\t  <skipped message=\\\"short message\\\">other</skipped>\\n\\t\\t</testCase>\\n\\t\\t<testCase name=\\\"test3\\\" duration=\\\"100\\\">\\n\\t\\t  <failure message=\\\"short\\\">stacktrace</failure>\\n\\t\\t</testCase>\\n\\t\\t<testCase name=\\\"test4\\\" duration=\\\"500\\\">\\n\\t\\t  <error message=\\\"short\\\">stacktrace</error>\\n\\t\\t</testCase>\\n\\t  </file>\\n\\t</testExecutions>\\n\\t\\nThe root node should be named `testExecutions`. Its version attribute should be set to `1`.\\n\\nInsert a `file` element for each test file. Its `path` attribute can be either absolute or relative to the root of the module.\\n\\n**Note** unlike for coverage reports, the files present in the report must be test file names, not source code files covered by tests.\\n\\nInside a `file` element, insert a `testCase` for each test run by unit tests. It can have the following attributes/children:\\n\\n* `testCase` (mandatory)\\n  * `name` (mandatory): name of the test case\\n  * `duration` (mandatory): long value in milliseconds\\n \\n  * `failure|error|skipped` (optional): if the test is not OK, report the cause with a message and a long description\\n    * `message` (mandatory): short message describing the cause\\n    * `stacktrace` (optional): long message containing details about `failure|error|skipped` status\\n\"},{\"path\":\"analysis/gitlab-cicd\",\"content\":\"---\\ntitle: Running Analysis with GitLab CI/CD\\nurl: /analysis/gitlab-cicd/\\n---\\n\\n_Merge Request analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\nSonarScanners running in GitLab CI/CD Jobs will automatically detect branches or Merge Requests being built so you don't need to specifically pass them as parameters to the scanner. \\n\\n## Activating builds  \\nBy default, GitLab will build all branches but not Merge Requests.\\n\\n### Developer Edition and above\\nTo build Merge Requests, you need to update the `.gitlab-ci.yml` file by adding `merge_requests` to the `only` parameter. See the following examples for more information.\\n\\n### Community Edition\\nBecause Community Edition doesn't support branches, you should only analyze your main branch. You can restrict analysis to that branch by adding the branch name to the `only` parameter.\\n\\n## Example configurations\\nThe following examples show you how to configure the execution of SonarScanner for Gradle, SonarScanner for Maven, and SonarScanner CLI with GitLab CI/CD.\\n\\n### SonarScanner for Gradle:\\n\\n```\\nimage: gradle:alpine\\nvariables:\\n  SONAR_TOKEN: \\\"your-sonarqube-token\\\"\\n  SONAR_HOST_URL: \\\"http://your-sonarqube-instance.org\\\"\\nsonarqube-check:\\n  stage: test\\n  script: gradle sonarqube\\n  only:\\n    - merge_requests\\n    - branches\\n```\\n \\n### SonarScanner for Maven:\\n \\n```\\nimage: maven:latest\\nvariables:\\n  SONAR_TOKEN: \\\"your-sonarqube-token\\\"\\n  SONAR_HOST_URL: \\\"http://your-sonarqube-url\\\"\\nsonarqube-scan:\\n  script:\\n    - mvn verify sonar:sonar\\n  only:\\n    - merge_requests\\n    - branches\\n```\\n\\n### SonarScanner CLI:\\n\\n```\\nimage:\\n  name: sonarsource/sonar-scanner-cli:latest\\n  entrypoint: [\\\"\\\"]\\nvariables:\\n  SONAR_TOKEN: \\\"your-sonarqube-token\\\"\\n  SONAR_HOST_URL: \\\"http://your-sonarqube-instance.org\\\"\\nsonarqube-check:\\n  stage: test\\n  script:\\n    - sonar-scanner\\n  only:\\n    - merge_requests\\n    - branches\\n```  \\n\\n**Note:** A project key has to be provided through `sonar-project.properties` or through the command line parameter. For more information, see the [SonarScanner](/analysis/scan/sonarscanner/) page.\\n\\n## Setting environment variables for all builds  \\nInstead of specifying environment variables in your `.gitlab-ci.yml` file (such as `SONAR_TOKEN` and `SONAR_HOST_URL`), you can set them securely for all pipelines in GitLab's settings. See [Creating a Custom Environment Variable](https://docs.gitlab.com/ee/ci/variables/#creating-a-custom-environment-variable) for more information.\\n\\n## For more information\\nFor more information on configuring your build with GitLab CI/CD, see the [GitLab CI/CD Pipeline Configuration Reference](https://gitlab.com/help/ci/yaml/README.md).\\n\"},{\"path\":\"analysis/languages/abap\",\"content\":\"---\\ntitle: ABAP\\nurl: /analysis/languages/abap/\\n---\\n\\n<!-- sonarqube -->\\n\\n_ABAP is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n\\n<!-- /sonarqube -->\\n\\n<!-- static -->\\n<!-- update_center:abap -->\\n<!-- /static -->\\n\\n## Language-Specific Properties\\n\\nDiscover and update the ABAP-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > ABAP](/#sonarqube-admin#/admin/settings?category=abap)**\\n\\n## Source Code Extraction\\n\\nIn order to analyze your source code with SonarQube you need to first extract it from SAP onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.\\n\"},{\"path\":\"analysis/languages/apex\",\"content\":\"---\\ntitle: Apex\\nurl: /analysis/languages/apex/\\n---\\n\\n<!-- sonarqube -->\\n\\n_Apex analysis is available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n\\n<!-- /sonarqube -->\\n\\n<!-- static -->\\n<!-- update_center:sonarapex -->\\n<!-- /static -->\\n\\n## Language-Specific Properties\\n\\nDiscover and update the Apex-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->[**Administration > General Settings > Apex**](/#sonarqube-admin#/admin/settings?category=apex)\\n\\n## Related Pages\\n\\n- [Importing External Issues](/analysis/external-issues/) (PMD Apex)\\n- [Test Coverage & Execution](/analysis/coverage/) (For Salesforce DX project)\\n\"},{\"path\":\"analysis/languages/cfamily\",\"content\":\"---\\ntitle: C/C++/Objective-C\\nurl: /analysis/languages/cfamily/\\n---\\n\\n<!-- sonarqube -->\\n_C/C++/Objective-C analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n<!-- /sonarqube -->\\n\\n<!-- static -->\\n<!-- update_center:cpp -->\\n<!-- /static -->\\n\\n\\nC/C++/Objective-C analysis is officially registered as [CWE Compatible](https://cwe.mitre.org/compatible/).\\n\\n## Supported Compilers, Language Standards and Operating Systems\\n* Any version of Clang, GCC and Microsoft C/C++ compilers\\n* Any version of Intel compiler for Linux and macOS\\n* ARM5 and ARM6 compilers\\n* IAR compiler for ARM, Renesas RL78, Renesas RX, Renesas V850, Texas Instruments MSP430 and for 8051\\n* Compilers based wholly on GCC including for instance Linaro GCC and WindRiver GCC are also supported\\n* C89, C99, C11, C++03, C++11, C++14 and C++17 standards\\n* GNU extensions\\n* Microsoft Windows, Linux and macOS for runtime environment\\n\\n## Language-Specific Properties\\n\\nDiscover and update the C/C++/Objective-C specific properties in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > C / C++ / Objective-C](/#sonarqube-admin#/admin/settings?category=c+%2F+c%2B%2B+%2F+objective-c)**\\n\\n## Prerequisites\\n### Build Wrapper\\nAnalysis of C/C++/Objective-C projects requires the **SonarQube Build Wrapper**. It gathers all the configuration required for correct analysis of C/C++/Objective-C projects (such as macro definitions, include directories, …) directly from your project's build process. The Build Wrapper does not impact your build; it merely eavesdrops on it and writes what it learns into files a directory you specify. \\n\\n<!-- sonarqube -->\\nYou can download the *Build Wrapper* directly from your SonarQube server, so that its version perfectly matches your version of the plugin. \\n* Download *Build Wrapper* for Linux from [{SonarQube URL}/static/cpp/build-wrapper-linux-x86.zip](/#sonarqube#/static/cpp/build-wrapper-linux-x86.zip)\\n* Download *Build Wrapper* for macOS from [{SonarQube URL}/static/cpp/build-wrapper-macosx-x86.zip](/#sonarqube#/static/cpp/build-wrapper-macosx-x86.zip)\\n* Download *Build Wrapper* for Windows from [{SonarQube URL}/static/cpp/build-wrapper-win-x86.zip](/#sonarqube#/static/cpp/build-wrapper-win-x86.zip)\\n<!-- /sonarqube -->\\n<!-- sonarcloud -->\\nYou can download the *Build Wrapper* directly from SonarCloud:\\n* [Download *Build Wrapper* for Linux](https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip)\\n* [Download *Build Wrapper* for macOS](https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip)\\n* [Download *Build Wrapper* for Windows](https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip)\\n<!-- /sonarcloud -->\\n\\n\\nUnzip the downloaded *Build Wrapper* and configure it in your `PATH` because doing so is just more convenient.\\n\\n### SonarQube Scanner\\nAnalysis of C/C++/Objective-C projects requires the [*SonarScanner*](https://redirect.sonarsource.com/doc/install-configure-scanner.html) CLI.\\n\\n## Analysis Steps\\n* If you use macOS or Linux operating systems make sure your source tree is in a directory called `src`\\n* Add execution of the *Build Wrapper* as a prefix to your usual build command (the examples below use `make`, `xcodebuild` and `MSBuild`, but any build tool that performs a full build can be used)\\n   ```\\n   // example for linux\\n   build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory make clean all \\n   // example for macOS\\n   build-wrapper-macosx-x86 --out-dir build_wrapper_output_directory xcodebuild clean build\\n   // example for Windows\\n   build-wrapper-win-x86-64.exe --out-dir  build_wrapper_output_directory MSBuild.exe /t:Rebuild\\n   ```\\n* In the *sonar-project.properties* file at the root of your project add the property `sonar.cfamily.build-wrapper-output` with the path to the *Build Wrapper* output directory relative to the project directory (`build_wrapper_output_directory` in these examples). \\n\\n   Sample *sonar-project.properties*:\\n   ```\\n   sonar.projectKey=myFirstProject\\n   sonar.projectName=My First C++ Project\\n   sonar.projectVersion=1.0\\n   sonar.sources=src\\n   sonar.cfamily.build-wrapper-output=build_wrapper_output_directory\\n   sonar.sourceEncoding=UTF-8\\n   ```\\n* Execute the SonarScanner (`sonar-scanner`) from the root directory of the project\\n   ```\\n   sonar-scanner\\n   ```\\n* Follow the link provided at the end of the analysis to browse your project's quality metrics in the UI\\n\\n## Multithreaded Code Scan \\n\\nIt is possible to use all the cores available on the machine running the code scan. This can be activated by configuring the property `sonar.cfamily.threads` at the scanner level. Its default value is 1.\\n\\n* This feature must not be activated on a machine with only 1 core.\\n\\n* The analyzer will not guess which value is most suitable for your project. It's up to you to test and find the best value.\\n\\n* If a build machine with 2 cores is already configured to potentially run two code scans at the same time, there is no guarantee that configuring `sonar.cfamily.threads=2` will bring the expected performance benefits. It can even be worse than running with the default value.\\n\\n* The multithreaded execution requires more memory than single-threaded execution.\\n\\n* A machine with 64 cores configured with `sonar.cfamily.threads=64` is not certain to bring a large performance gain compared to a machine with 32 cores. The performance tradeoff will vary depending on the machine, project and setup, so some testing will be required to decide if the performance gain justifies moving to a larger machine.\\n\\n## Solution with a Mix of C# and C++\\n\\nWhen you have a Solution made of C++ and C#, to both use the SonarQube *Build Wrapper* and have an accurate analysis of the C# code, you must to use the [SonarScanner for MSBuild](https://github.com/SonarSource/sonar-scanner-msbuild).\\nNote that in this scenario source code stored in shared folders, not considered as a \\\"Project\\\" by Visual Studio, won't be scanned.\\n\\n* Download and install both the [SonarScanner for MSBuild](https://redirect.sonarsource.com/doc/install-configure-scanner-msbuild.html) and the SonarQube *Build Wrapper* (see *Prerequisites* section).\\n* Execute the SonarQube Scanner for MSBuild `begin` step\\n* Add execution of *Build Wrapper* to your normal MSBuild build command\\n* Execute the SonarQube Scanner for MSBuild `end` step to complete the analysis\\n\\nFor example:\\n```\\nSonarScanner.MSBuild.exe begin /k:\\\"cs-and-cpp-project-key\\\" /n:\\\"My C# and C++ project\\\" /v:\\\"1.0\\\" /d:sonar.cfamily.build-wrapper-output=\\\"bw_output\\\"\\nbuild-wrapper-win-x86-64.exe --out-dir bw_output MSBuild.exe /t:Rebuild\\nSonarScanner.MSBuild.exe end\\n```\\n\\n## Measures for Header Files\\nEach time we analyze a header file as part of a compilation unit, we compute for this header the measures: statements, functions, classes, cyclomatic complexity and cognitive complexity. That means that each measure may be computed more than once for a given header. In that case, we store the largest value for each measure.\\n\\n## Building with Bazel\\n\\n[Bazel](https://www.bazel.build/) recommends that you use the [`--batch`](https://docs.bazel.build/versions/master/bazel-user-manual.html#flag--batch) option when running in a Continuous Build context. When using the *BuildWrapper*, you are in such context. Also, you need to deactivate the [\\\"sandbox\\\"](https://docs.bazel.build/versions/master/bazel-user-manual.html#sandboxing) mechanism of *Bazel* so that the compiled file paths could be retrieved after the compilation phase.\\nHere is an example of the *BuildWrapper* command with Bazel parameters on macOS:\\n```\\nbuild-wrapper-macosx-x86 --out-dir bw bazel\\n  --batch\\n  --spawn_strategy=standalone\\n  --genrule_strategy=standalone\\n  --bazelrc=/dev/null build\\n  //main:hello-world\\n```\\n\\n## Related Pages\\n* [Test Coverage & Execution](/analysis/coverage/) (CPPUnit, GCOV, llvm-cov, Visual Studio, Bullseye)\\n* [Sample project](https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-build-wrapper-linux) for C/C++ (Linux)\\n* [Sample project](https://github.com/SonarSource/sonar-scanning-examples/tree/master/objc-llvm-coverage) for Objective-C\\n* [SonarScanner for Azure Devops](https://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html) (analyzing Visual C++ project)\\n\"},{\"path\":\"analysis/languages/cobol\",\"content\":\"---\\ntitle: COBOL\\nurl: /analysis/languages/cobol/\\n---\\n\\n<!-- sonarqube -->\\n\\n_Cobol analysis is available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n\\n<!-- /sonarqube -->\\n\\n<!-- static -->\\n<!-- update_center:cobol -->\\n<!-- /static -->\\n\\n## Language-Specific Properties\\n\\nYou can discover and update the COBOL-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > Cobol](/#sonarqube-admin#/admin/settings?category=cobol)**\\n\\n## Source Code Extraction\\n\\nIn order to analyze your source code with SonarQube you need to first extract it onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.\\n\\n## Advanced Configuration\\n\\n### Defining Source Code Format\\n\\nThe supported source code formats are:\\n\\n- Fixed format\\n- Free format\\n- Variable format\\n\\nTo set the format, go to <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > Cobol](/#sonarqube-admin#/admin/settings?category=cobol)** and set the \\\"Source format\\\" property.\\n\\nThe fixed format has three main areas:\\n\\n```\\nArea1 | Area2                                           | Area3\\n000100* MY COMMENT\\n000100 IDENTIFICATION DIVISION.\\n000200 PROGRAM-ID. HELLOWORLD.                          *xxx\\n100000 PROCEDURE DIVISION.                              *yyy\\n100100\\n100200 START.\\n100400 DISPLAY \\\"HELLO COBOL !\\\" LINE 42 POSITION 12.\\n100500 STOP RUN.\\n```\\n\\nAreas #1 and #3 contain non-significant characters.\\nArea #2 contains the source code. The first character of Area #2 is the Indicator Area, which has a special meaning (for instance `*` means that the line is a comment line, `D` means that the line is only taken into account in debug mode, etc.).\\n\\nThe free format:\\n\\n```\\nArea1 | Area2\\n      * MY COMMENT\\n       IDENTIFICATION DIVISION.\\n         PROGRAM-ID. HELLOWORLD.\\n       PROCEDURE DIVISION.\\n         DISPLAY \\\"HELLO COBOL !\\\" LINE 42 POSITION 12.\\n         STOP RUN.\\n```\\n\\nThe Indicator Area that has a special meaning (for instance `*` means that the line is a comment line, `D` means that the line in only taken into account in debug mode, etc.) is located at column 0. The size of the source code area is not limited.\\n\\nVariable format is also supported: it's similar to the fixed format but without Area #3.\\n\\n### Defining COBOL Dialect\\n\\nGo to <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > Cobol](/#sonarqube-admin#/admin/settings?category=cobol)** and set the \\\"Dialect\\\" property.\\n\\nThe COBOL analyzer supports the following dialects:\\n\\n- `bull-gcos-cobol`\\n- `hp-tandem-cobol`\\n- `ibm-os/vs-cobol`\\n- `ibm-ile-cobol`\\n- `ibm-cobol/ii`\\n- `ibm-cobol/400`\\n- `ibm-enterprise-cobol`\\n- `microfocus-cobol`\\n- `microfocus-acucobol-gt-cobol`\\n- `opencobol/cobol-it`\\n\\n### Making Copybooks Available to the Analysis\\n\\nCopybooks are, by definition, COBOL files that are not syntactically valid by themselves. However, copybooks are usually needed to properly parse COBOL programs. Thus, paths to the copybooks must be listed through the `sonar.cobol.copy.directories` property.\\n\\n### Raising Issues Against Copybooks\\n\\nTo have copybooks imported into a project, and issues logged against them, the copybook directories must be added to `sonar.sources` AND the copybook file suffixes must be added to `sonar.cobol.file.suffixes`. E.G.:\\n\\n```\\nsonar.sources=cobol,copy1,commonCopy\\nsonar.cobol.file.suffixes=cbl,cpy\\nsonar.cobol.copy.suffixes=cpy\\nsonar.cobol.copy.directories=copy1,commonCopy\\n```\\n\\nIn the case where a number of projects share a common set of copybooks, it may not be desirable to increment each project’s technical debt with the issues from the common copybooks. In such cases, the directory holding the common copybooks should be listed in `sonar.cobol.copy.directories` (as before) but left out of sonar.sources, E.G.:\\n\\n```\\nsonar.sources=cobol,copy1\\nsonar.cobol.file.suffixes=cbl,cpy\\nsonar.cobol.copy.suffixes=cpy\\nsonar.cobol.copy.directories=copy1,commonCopy\\n```\\n\\n### Analyzing without file suffixes\\n\\nNote that it is possible to analyze a COBOL project without file suffixes. To do this, remove the two suffix-related properties from your configuration and substitute the following setting for `sonar.lang.patterns.cobol`:\\n\\n```\\nsonar.lang.patterns.cobol=**/*\\n```\\n\\n### Switching Off Issues\\n\\nThere are three ways to switch off issues:\\n\\n- Flagging issues as [false positive](/user-guide/issues/)\\n- [Ignoring the issues](/project-administration/narrowing-the-focus/)\\n- Using the `NOSONAR` tag. To switch off an issue, place the `NOSONAR` tag in a comment line located right before the line containing the issue. Example:\\n\\n```\\n* NOSONAR, in such case call to GO TO is tolerated, blabla...\\n GO TO MY_PARAGRAPH.\\n```\\n\\n### ACUCOBOL-GT Source Code Control Directives\\n\\nThe COBOL analyzer supports the ACUCOBOL-GT’s Source Code Control directives. This mechanism allows you to conditionally modify the program at compile time by excluding or including lines. This can be used to maintain different versions of the program, perhaps to support different machine environments.\\n\\nThe `-Si` (include) flag controls the actions of the source code control system. It must be followed by an argument that specifies a pattern that the compiler will search for in the Identification Area of each source line. If the pattern is found, then the line will be included in the source program, even if it is a comment line. However, if the pattern is immediately preceded by an exclamation point, then the line will be excluded from the source (i.e., commented out).\\n\\nThe `-Sx` (exclude) flag works the same way except that its meaning is reversed (lines with the pattern will be commented out and lines with a preceding exclamation point will be included).\\n\\nFor example, suppose a program is being maintained for both the UNIX and VMS environments. The following piece of code is in the program:\\n\\n```\\nMOVE \\\"SYS$HELP:HELPFILE\\\" TO FILE-NAME.  VMS\\n*MOVE \\\"/etc/helpfile\\\" TO FILE-NAME.     UNX\\nOPEN INPUT HELP-FILE.\\n```\\n\\nThis program fragment is ready to be compiled for the VMS system. If a UNIX version is desired, then the following flags will correct the source during compilation:\\n\\n```\\n-Si UNX -Sx VMS\\n```\\n\\nPlease consult the ACUCOBOL-GT documentation for more on the mechanism.\\n\\nThere are two ways in SonarQube to specify the list of ACUCOBOL-GT flags to be used in order to preprocess the source code. The first option is to define a list of global flags which will be used to preprocess all source files. This can be done in the **[Administration > General Settings > Cobol](/#sonarqube-admin#/admin/settings?category=cobol) > Preprocessor**.\\n\\nThe second option is to provide a list of relative paths (with help of the ‘sonar.cobol.acucobol.preprocessor.directives.directories’ property) which contain the list of flags to be used for each COBOL source file. Let’s take a simple example. If a file ‘MY_PROGRAM.CBL’ is going to be processed, the SonarQube ACUCOBOL-GT preprocessor, will try to find a file ‘MY_PROGRAM.CMD’. If this file is found, then the flags contained in this file is going to be used to preprocess the program ‘MY_PROGRAM.CBL’. If the file ‘MY_PROGRAM.CMD’ doesn’t exist, then the preprocess will use the content of the file ‘DEFAULT.CMD’ if exists.\\n\\n### Microfocus Compiler Constants\\n\\nIf your code takes advantage of conditional compilation features provided by Microfocus, you may have to configure compiler constants for your analysis. You can define a compiler constant by setting a property named s`onar.cobol.compilationConstant.[constant name here].`\\n\\nFor example, if your COBOL code looks like this:\\n\\n```\\n       IDENTIFICATION DIVISION.\\n      $IF myconstant DEFINED\\n       PROGRAM-ID. x.\\n      $END\\n      $IF otherconstant DEFINED\\n       PROGRAM-ID. y.\\n      $END\\n```\\n\\nYou can set the value of a compiler constant named \\\"myconstant\\\" by inserting the following line in your sonar-project.properties file:\\n\\n```\\nsonar.cobol.compilationConstant.myconstant=myvalue\\n```\\n\\n## Database Catalog (DB2)\\n\\nThe COBOL analyzer offers rules which target embedded SQL statements and require the analyzer to have knowledge of the database catalog (E.G. the primary key column(s) of a given table).\\nThese rules will raise issues only if the database catalog is provided to the analysis. For the moment, this is available only for IBM DB2 (z/OS) catalogs, and the catalog must be provided via a set of CSV (\\\"Comma Separated Values\\\") files.\\n\\nThese rules rely on two analysis properties:\\n\\n| Key                                     | Description                                                                      |\\n| --------------------------------------- | -------------------------------------------------------------------------------- |\\n| `sonar.cobol.sql.catalog.csv.path`      | relative path of the directory containing CSV files for the database catalog     |\\n| `sonar.cobol.sql.catalog.defaultSchema` | comma-separated list of default database schemas used in embedded SQL statements |\\n\\n`sonar.cobol.sql.catalog.csv.path` should define a directory which contains 8 CSV files. Each of these CSV files contains data for a specific DB2 catalog table and is named after it. The following table lists the required files and their respective mandatory columns. Additional columns may be listed, but will be ignored:\\n\\n| Table                  | File name           | Required Columns                                                                       |\\n| ---------------------- | ------------------- | -------------------------------------------------------------------------------------- |\\n| `SYSIBM.SYSCOLUMNS`    | `SYSCOLUMNS.csv`    | `TBNAME`,`TBCREATOR`,`NAME`,`PARTKEY_COLSEQ`,`DEFAULT`,`NULLS`,`DEFAULTVALUE`          |\\n| `SYSIBM.SYSINDEXES`    | `SYSINDEXES.csv`    | `NAME`,`CREATOR`,`TBNAME`,`TBCREATOR`,`UNIQUERULE`,`INDEXTYPE`                         |\\n| `SYSIBM.SYSINDEXPART`  | `SYSINDEXPART.csv`  | `IXNAME`,`IXCREATOR`,`PARTITION`                                                       |\\n| `SYSIBM.SYSKEYS`       | `SYSKEYS.csv`       | `IXNAME`,`IXCREATOR`,`COLNAME`,`COLSEQ`                                                |\\n| `SYSIBM.SYSSYNONYMS`   | `SYSSYNONYMS.csv`   | `NAME`,`CREATOR`,`TBNAME`,`TBCREATOR`                                                  |\\n| `SYSIBM.SYSTABLES`     | `SYSTABLES.csv`     | `NAME`,`CREATOR`,`TYPE`,`PARTKEYCOLNUM`,`TSNAME`,`DBNAME`,`TBNAME`,`TBCREATOR`,`CARDF` |\\n| `SYSIBM.SYSTABLESPACE` | `SYSTABLESPACE.csv` | `NAME`,`DBNAME`,`PARTITIONS`                                                           |\\n| `SYSIBM.SYSVIEWS`      | `SYSVIEWS.csv`      | `NAME`,`CREATOR`,`STATEMENT`                                                           |\\n\\nThe CSV format is the following:\\n\\n- Each file must be named for the table it represents.\\n- First line must contain the exact names of the columns.\\n- Order of the columns is not meaningful.\\n- Fields are comma-delimited.\\n- If a field contains a comma, then its value must be surrounded by double quotes (\\\").\\n- If a field which is surrounded by double quotes contains a double quote character (\\\"), then this character must be doubled (\\\"\\\").\\n\\nExample for `SYSVIEWS.csv`:\\n\\n```\\nCREATOR,NAME,STATEMENT\\nUSER1,VIEW1,select x from table1\\nUSER1,VIEW2,\\\"select x, y from table1\\\"\\nUSER1,VIEW3,\\\"select x, \\\"\\\"y\\\"\\\" from table1\\\"\\n```\\n\\nThe `UNLOAD` DB2 utility with the `DELIMITED` option should produce the required files except for the column names on the first line.\\n\\n<!-- sonarqube -->\\n\\n## Custom Rules\\n\\n### Overview\\n\\nThe COBOL analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule can subscribe to be notified every time a node of a certain type is visited.\\n\\nAs soon as the coding rule is notified, it can navigate the tree around the node and raise issues if necessary.\\n\\n### Writing a Plugin\\n\\nWriting new COBOL coding rules is a six-step process:\\n\\n- Create a standard SonarQube plugin.\\n- Attach this plugin to the SonarQube COBOL plugin (see the `pom.xml` file of the provided sample plugin project).\\n- Create as many custom COBOL coding rules as required by extending `com.sonarsource.api.ast.CobolCheck` and add them to the previous repository.\\n- Generate the SonarQube plugin (jar file).\\n- Place this jar file in the `$SONARQUBE_HOME/extensions/plugins` directory.\\n- Restart the SonarQube server.\\n\\n### Plugin Project Sample\\n\\nTo get started, clone the sample plugin project and follow the steps below:\\n\\n- Install Maven\\n- Build the plugin by running `mvn install` from the project directory. This will generate a SonarQube plugin jar file in the target directory.\\n- Add your newly created jar into the `$SONARQUBE_HOME/extensions/plugins` directory\\n- Restart the SonarQube server\\n\\nIf you now look at the COBOL quality profiles, you will find the new coding rule (“Sample check”). Don’t forget to activate it. Run an analysis of a COBOL project, and you will find that an issue was logged at line 5 on every file.\\n\\n### Subscribing to a NodeType\\n\\nVery often when writing a coding rule, you will want to subscribe to a NodeType. A NodeType can be either a rule of the grammar or a keyword of the language. As an example, here is the code of the implementation of the “Avoid using Merge statement” coding rule:\\n\\n```\\npublic class MergeStatementUsageCheck extends CobolCheck {\\n\\n  public void init() {\\n    subscribeTo(getCobolGrammar().mergeStatement);\\n  }\\n\\n  public void visitNode(AstNode node) {\\n    reportIssue(\\\"Avoid using MERGE statement.\\\").on(node);\\n  }\\n}\\n```\\n\\nNote that CICS and SQL grammars can be accessed using `getCicsGrammar()` and `getSqlGrammar()`.\\n\\n### Coding Rule Lifecycle\\n\\nA coding rule can optionally override six methods inherited from the CobolCheck class. Those methods are called sequentially in the following order:\\n\\n- `public void init() {…}`: This method is called only once and should be used to subscribe to one or more NodeType(s).\\n- `public void visitFile(AstNode astNode) {…}`: This method is called on each file before starting the parsing.\\n- `public void visitNode(AstNode astNode) {…}`: This method is called when an AstNode matches a subscribed NodeType (see Subscribing to a NodeType) and before analyzing its content.\\n- `public void leaveNode(AstNode astNode) {…}`: This method is called when an AstNode matches a desired NodeType (see Subscribing to a NodeType) and after analyzing its content.\\n- `public void leaveFile(AstNode astNode) {…}`: This method is called before exiting a file.\\n- `public void destroy() {…}`: This method is called before shutting down the coding rule.\\n- The `reportIssue(…)` method, used to log an issue, should be called only inside the `visitFile(…)`, `visitNode(…)`, `leaveNode(…)` and `leaveFile(…)` methods. Indeed, the file context isn’t known when the `init()` and `destroy()` methods are called, so the issue can’t be associated to a file.\\n\\nMore advanced features are documented in the [API Javadoc](http://javadocs.sonarsource.org/cobol/apidocs/).\\n\\n### Navigating the AST (Abstract Syntax Tree) with the SSLR COBOL Toolkit\\n\\nWhen starting to write a new COBOL coding rule, the main difficulty is to understand the COBOL AST in order to know which NodeType(s) need to be visited. This can be achieved by using the [SSLR COBOL Toolkit](https://binaries.sonarsource.com/CommercialDistribution/sslr-cobol-toolkit/), a Swing application that enables loading a COBOL file and displaying its representation as an Abstract Syntax Tree.\\n\\nEach node in the AST is a COBOL grammar rule and each leaf in the AST is a COBOL token. Let’s say you want to visit the node `ifStatement`. In this case, the `init()` method of your COBOL coding rule must contain the following statement: `subscribeTo(getCobolGrammar().ifStatement);`\\n\\n### API Changes\\n\\n_Since 4.0_\\nA new API is available to write the rules but also to implement the tests.\\n\\nCustom rules should now extend `CobolCheck` (`CobolAstCheck` is deprecated) and issues should be logged using the `reportIssue(...)` method.  \\nTests on custom rules should now use `CobolCheckVerifier`: the assertions about issues should now be added as comments inside COBOL test files.  \\nCustom rules should be listed in an implementation of `CobolCheckRepository` (`CobolAstCheckRepository` is now deprecated) and metadata should be loaded by implementing `RulesDefinitionExtension`.  \\nYou can now store your custom rules into a dedicated rule repository by implementing SonarQube's `RulesDefinition`: in that case, you don't need to implement `RulesDefinitionExtension`.  \\n![](/images/exclamation.svg) For users who already have custom rules in production: existing issues will be closed and re-opened because the internal keys of the rules are changing.\\nIf you wrote a custom plugin against SonarCOBOL 3.x, it should still be compatible at runtime with SonarCOBOL 4.0.\\n\\nTo migrate to the new API ([full example on github](https://github.com/SonarSource/sonar-custom-rules-examples/pull/14)):\\n\\n- First, migrate tests without modifying rule classes. That mainly requires moving assertions from java test classes to comments inside test cobol files ([see an example on github](https://github.com/SonarSource/sonar-custom-rules-examples/commit/c95b6a84b6fd1efc832a46cd5e1101ee51e6268e)).\\n- Update check classes to replace the calls to deprecated methods with the new methods which create issues ([see an example on github](https://github.com/SonarSource/sonar-custom-rules-examples/commit/d6f6ef7457d99e31990fa64b5ff9cc566775af96)).\\n- Implement `CobolRulesDefinitionExtension` and `CobolCheckRepository`, remove the class extending `CobolAstCheckRepository` ([see an example on github](https://github.com/SonarSource/sonar-custom-rules-examples/commit/ea15f07ce79366a08fee5b60e9a93c32a4625918)).\\n- Update check classes to extend `CobolCheck` instead of `CobolAstCheck` to stop using deprecated APIs ([see an example on github](https://github.com/SonarSource/sonar-custom-rules-examples/commit/8e1d746900f5411e9700fea04700cd804e45e034)).\\n\\nTo move your custom rules to a dedicated rule repository, see [an example on github](https://github.com/SonarSource/sonar-custom-rules-examples/commit/16ad89c4172c259f15bce56edcd09dd5b489eacd).\\n\\n## Related Pages\\n\\n- [Adding Coding Rules](/extend/adding-coding-rules/)\\n  <!-- /sonarqube -->\\n\"},{\"path\":\"analysis/languages/csharp\",\"content\":\"---\\ntitle: C#\\nurl: /analysis/languages/csharp/\\n---\\n\\n<!-- static -->\\n<!-- update_center:csharp -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the C#-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > C#](/#sonarqube-admin#/admin/settings?category=c%23)**.\\n\\n### Analyze Generated Code\\n\\nTo analyze tool-generated code (e.g. WCF code generated by `SvcUtil.exe`, protobuf code generated by `protoc`, Swagger client code generated by `NSwag`) for a specific C# project, enable the \\\"Analyze generated code\\\" setting inside **Project > Administration > General Settings > C#**. By default, tool-generated code files are skipped from analysis.\\n\\n## Related Pages\\n* [Excluding External Roslyn Issues](/analysis/external-issues/) (See \\\"Notes on external .NET issues\\\")\\n* [Test Coverage & Execution](/analysis/coverage/) (Visual Studio Code Coverage, dotCover, OpenCover)\\n* [SonarScanner for MSBuild](/analysis/scan/sonarscanner-for-msbuild/)\\n* [SonarScanner for Azure DevOps](/analysis/scan/sonarscanner-for-azure-devops/)\\n\"},{\"path\":\"analysis/languages/css\",\"content\":\"---\\ntitle: CSS\\nurl: /analysis/languages/css/\\n---\\n\\n<!-- static -->\\n<!-- update_center:cssfamily -->\\n<!-- /static -->\\n\\n\\n## Prerequisites\\nIn order to analyze CSS code, you need to have Node.js >= 8 installed on the machine running the scan. Set property `sonar.nodejs.executable` to an absolute path to Node.js executable, if standard `node` is not available.\\n\\nIf you have a community plugin that handles CSS installed on your SonarQube instance it will conflict with SonarCSS, so it should be removed.\\n\\n## Language-Specific Properties\\n\\nDiscover and update the CSS-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > CSS](/#sonarqube-admin#/admin/settings?category=css)**\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) (StyleLint.io)\\n\"},{\"path\":\"analysis/languages/flex\",\"content\":\"---\\ntitle: Flex\\nurl: /analysis/languages/flex/\\n---\\n\\n<!-- static -->\\n<!-- update_center:flex -->\\n<!-- /static -->\\n\\n## Supported Versions\\n* ActionScript 2\\n* ActionScript 3\\n\\n## Language-Specific Properties\\nDiscover and update the Flex-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->[**Administration > General Settings > Flex**](/#sonarqube-admin#/admin/settings?category=flex)\\n\\n## Related Pages\\n\\n* [Test Coverage & Execution](/analysis/coverage/) (Cobertura)\\n<!-- sonarqube -->\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/languages/go\",\"content\":\"---\\ntitle: Go\\nurl: /analysis/languages/go/\\n---\\n\\n<!-- static -->\\n<!-- update_center:go -->\\n<!-- /static -->\\n\\n\\n\\n## Prerequisites\\n\\n* SonarQube Scanner should run on a x86-64 Windows, macOS or Linux 64bits machine\\n* You need the [Go](https://golang.org/) installation on the scan machine only if you want to import coverage data\\n\\n## Language-Specific Properties\\n\\nYou can discover and update the Go-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > Go](/#sonarqube-admin#/admin/settings?category=go)**\\n\\n## \\\"sonar-project.properties\\\" Sample\\n\\nHere is a good first version of a `sonar-project.properties`, correctly excluding \\\"vendor\\\" directories and categorizing files as \\\"main\\\" or \\\"test\\\":\\n\\n```\\n  sonar.projectKey=com.company.projectkey1\\n  sonar.projectName=My Project Name\\n\\n  sonar.sources=.\\n  sonar.exclusions=**/*_test.go,**/vendor/**\\n\\n  sonar.tests=.\\n  sonar.test.inclusions=**/*_test.go\\n  sonar.test.exclusions=**/vendor/**\\n```\\n\\n## Related Pages\\n\\n* [Test Coverage & Execution](/analysis/coverage/)\\n* [Importing External Issues](/analysis/external-issues/) (GoVet, GoLint, GoMetaLinter)\\n\"},{\"path\":\"analysis/languages/html\",\"content\":\"---\\ntitle: HTML\\nurl: /analysis/languages/html/\\n---\\n\\n<!-- static -->\\n<!-- update_center:web -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nYou can discover and update HTML-specific [properties](/analysis/analysis-parameters/) in:  <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > HTML](/#sonarqube-admin#/admin/settings?category=html)**.\\n\\n## PHP Code Analysis\\nSonarPHP and SonarHTML both analyze files with extensions: `.php`, `.php3`, `.php4`, `.php5`, `.phtml`.\\n\\nFile metrics, such as the number of lines of code, can only be measured by one of the languages, PHP or HTML. They are handled by SonarPHP by default, and by SonarHTML if for some reason SonarPHP is not present.\\n\\nSonarHTML analyzes PHP files even if the PHP file extensions are not included in the list of file extensions to analyze.\\n\"},{\"path\":\"analysis/languages/java\",\"content\":\"---\\ntitle: Java\\nurl: /analysis/languages/java/\\n---\\n\\n<!-- static -->\\n<!-- update_center:java -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nYou can discover and update the Java-specific [properties](/analysis/analysis-parameters/) in:  <!-- sonarcloud -->Project <!-- /sonarcloud -->[Administration > General Settings > Java](/#sonarqube-admin#/admin/settings?category=java)\\n\\n## Java Analysis and Bytecode\\n\\nCompiled `.class` files are required for java projects with more than one java file. If not provided properly, analysis will fail with the message:\\n\\n    Please provide compiled classes of your project with sonar.java.binaries property.\\n\\nIf only some `.class` files are missing, you'll see warnings like this:\\n\\n    Class 'XXXXXX' is not accessible through the ClassLoader.\\n\\nIf you are not using Maven or Gradle for analysis, you must manually provide bytecode to the analysis.\\nYou can also analyze test code, and for that you need to provide tests binaires and test libraries properties.\\n\\nKey | Value\\n---|---|\\n`sonar.java.binaries` (required) | Comma-separated paths to directories containing the compiled bytecode files corresponding to your source files. \\n`sonar.java.libraries` | Comma-separated paths to files with third-party libraries (JAR or Zip files) used by your project. Wildcards can be used: `sonar.java.libraries=path/to/Library.jar,directory/**/*.jar`\\n`sonar.java.test.binaries` | Comma-separated paths to directories containing the compiled bytecode files corresponding to your test files\\n`sonar.java.test.libraries` | Comma-separated paths to files with third-party libraries (JAR or Zip files) used by your tests. (For example, this should include the junit jar). Wildcards can be used: `sonar.java.test.libraries=directory/**/*.jar`\\n\\n[[warning]]\\n| ![](/images/exclamation.svg) Android users, Jack doesn't provide the required `.class` files.\\n\\n\\n## Turning issues off\\n\\nThe best way to deactivate an individual issue you don't intend to fix is to mark it \\\"Won't Fix\\\" or \\\"False Positive\\\" through the SonarQube UI.\\n\\nIf you need to deactivate a rule (or all rules) for an entire file, then [issue exclusions](/project-administration/narrowing-the-focus/) are the way to go. But if you only want to deactivate a rule across a subset of a file - all the lines of a method or a class - you can use `@SuppressWarnings(\\\"all\\\")` or `@SuppressWarnings` with rule keys: `@SuppressWarnings(\\\"squid:S2078\\\")` or `@SuppressWarnings({\\\"squid:S2078\\\", \\\"squid:S2076\\\"})`. \\n\\n## Handling Java Source Version\\n\\nThe Java Analyzer is able to react to the java version used for sources. This feature allows the deactivation of rules that target higher versions of Java than the one in use in the project so that false positives aren't generated from irrelevant rules.\\n\\nThe feature relies entirely on the `sonar.java.source` property, which is automatically filled by most of the scanners used for analyses (Maven, Gradle). Java version-specific rules are not disabled when `sonar.java.source` is not provided. Concretely, rules which are designed to target specific java versions (tagged \\\"java7\\\" or \\\"java8\\\") are activated by default in the Sonar Way Java profile. From a user perspective, the feature is fully automatic, but it means that you probably want your projects to be correctly configured.\\n\\nWhen using SonarScanner to perform analyses of project, the property `sonar.java.source` can to be set manually in `sonar-project.properties`. Accepted formats are:\\n* \\\"1.X\\\" (for instance 1.6 for java 6, 1.7 for java 7, 1.8 for java 8, etc.)\\n* \\\"X\\\" (for instance 7 for java 7, 8 for java 8, etc. )\\n\\nExample: `sonar.java.source=1.6`\\n\\nIf the property is provided, the analysis will take the source version into account, and execute related rules accordingly. At run time, each of these rules will be executed – or not – depending of the Java version used by sources within the project. For instance, on a correctly configured project built with Java 6, rules targeting Java 7 and Java 8 will never raise issues, even though they are enabled in the associated rule profile.\\n\\n<!-- sonarqube -->\\n## Custom Rules\\n\\nThe tutorial [Writing Custom Java Rules 101](https://redirect.sonarsource.com/doc/java-custom-rules-guide.html) will help to quickly start writing custom rules for Java.\\n\\n### API changes\\n\\n#### **5.12**\\n* **Dropped**\\n    * `org.sonar.plugins.java.api.JavaFileScannerContext`: Drop deprecated method used to retrieve trees contributing to the complexity of a method from  (deprecated since SonarJava 4.1). \\n        ```\\n        //org.sonar.plugins.java.api.JavaFileScannerContext\\n        /**\\n        * Computes the list of syntax nodes which are contributing to increase the complexity for the given methodTree.\\n        * @deprecated use {@link #getComplexityNodes(Tree)} instead\\n        * @param enclosingClass not used.\\n        * @param methodTree the methodTree to compute the complexity.\\n        * @return the list of syntax nodes incrementing the complexity.\\n        */\\n        @Deprecated\\n        List<Tree> getMethodComplexityNodes(ClassTree enclosingClass, MethodTree methodTree);\\n        ```\\n    * `org.sonar.plugins.java.api.JavaResourceLocator`: The following method has been dropped (deprecated since SonarJava 4.1), without replacement.\\n        ```\\n        //org.sonar.plugins.java.api.JavaResourceLocator\\n        /**\\n        * get source file key by class name.\\n        * @deprecated since 4.1 : will be dropped with no replacement.\\n        * @param className fully qualified name of the analyzed class.\\n        * @return key of the source file for the given class.\\n        */\\n        @Deprecated\\n        String findSourceFileKeyByClassName(String className);\\n        ```\\n    * `org.sonar.plugins.surefire.api.SurefireUtils`: Dropping deprecated field with old property (deprecated since SonarJava 4.11)\\n        ```\\n        //org.sonar.plugins.surefire.api.SurefireUtils\\n        /**\\n        * @deprecated since 4.11\\n        */\\n        @Deprecated\\n        public static final String SUREFIRE_REPORTS_PATH_PROPERTY = \\\"sonar.junit.reportsPath\\\";\\n        ```\\n* **Deprecated**  \\n    * `org.sonar.plugins.java.api.JavaFileScannerContext`: Deprecate usage of File-based methods from API, which will be removed in future release. Starting from this version, methods relying on InputFile has to be preferred.\\n        ```\\n        //org.sonar.plugins.java.api.JavaFileScannerContext\\n        /**\\n        * Report an issue at a specific line of a given file.\\n        * This method is used for one\\n        * @param file File on which to report\\n        * @param check The check raising the issue.\\n        * @param line line on which to report the issue\\n        * @param message Message to display to the user\\n        * @deprecated since SonarJava 5.12 - File are not supported anymore. Use corresponding 'reportIssue' methods, or directly at project level\\n        */\\n        @Deprecated\\n        void addIssue(File file, JavaCheck check, int line, String message);\\n        /**\\n        * FileKey of currently analyzed file.\\n        * @return the fileKey of the file currently analyzed.\\n        * @deprecated since SonarJava 5.12 - Rely on the InputFile key instead, using {@link #getInputFile()}\\n        */\\n        @Deprecated\\n        String getFileKey();\\n\\n        /**\\n        * File under analysis.\\n        * @return the currently analyzed file.\\n        * @deprecated since SonarJava 5.12 - File are not supported anymore. Use {@link #getInputFile()} or {@link #getProject()} instead\\n        */\\n        @Deprecated\\n        File getFile();\\n        ```\\n    * Deprecate methods which are not relevant anymore in switch-related trees from API, following introduction of the new Java 12 `switch` expression:\\n        ```\\n        //org.sonar.plugins.java.api.tree.CaseLabelTree\\n        /**\\n        * @deprecated (since 5.12) use the {@link #expressions()} method.\\n        */\\n        @Deprecated\\n        @Nullable\\n        ExpressionTree expression();\\n\\n        /**\\n        * @deprecated (since 5.12) use the {@link #colonOrArrowToken()} method.\\n        */\\n        @Deprecated\\n        SyntaxToken colonToken();\\n        ```\\n* **Added**\\n    * `org.sonar.plugins.java.api.JavaFileScannerContext`: Following methods have been added in order to provide help reporting issues at project level, and access data through SonarQube's InputFile API, which won't be possible anymore through files:\\n    ```\\n        //JavaFileScannerContext: New methods\\n        /**\\n        * Report an issue at at the project level.\\n        * @param check The check raising the issue.\\n        * @param message Message to display to the user\\n        */\\n        void addIssueOnProject(JavaCheck check, String message);\\n    \\n        /**\\n        * InputFile under analysis.\\n        * @return the currently analyzed inputFile.\\n        */\\n        InputFile getInputFile();\\n        \\n        /**\\n        * InputComponent representing the project being analyzed\\n        * @return the project component\\n        */\\n        InputComponent getProject();\\n        ```\\n    * In order to cover the Java 12 new switch expression, introduce a new Tree in the SonarJava Syntax Tree API  (Corresponding `Tree.Kind`: `SWITCH_EXPRESSION` ). New methods have also been added to fluently integrate the new switch expression into the SonarJava API.\\n        ```\\n        //org.sonar.plugins.java.api.tree.SwitchExpressionTree\\n        /**\\n        * 'switch' expression.\\n        *\\n        * JLS 14.11\\n        *\\n        * <pre>\\n        *   switch ( {@link #expression()} ) {\\n        *     {@link #cases()}\\n        *   }\\n        * </pre>\\n        *\\n        * @since Java 12\\n        */\\n        @Beta\\n        public interface SwitchExpressionTree extends ExpressionTree {\\n        \\n        SyntaxToken switchKeyword();\\n        \\n        SyntaxToken openParenToken();\\n        \\n        ExpressionTree expression();\\n        \\n        SyntaxToken closeParenToken();\\n        \\n        SyntaxToken openBraceToken();\\n        \\n        List<CaseGroupTree> cases();\\n        \\n        SyntaxToken closeBraceToken();\\n        }\\n        ```\\n        ```\\n        //org.sonar.plugins.java.api.tree.SwitchStatementTree\\n        /**\\n        * Switch expressions introduced with support Java 12\\n        * @since SonarJava 5.12\\n        */\\n        SwitchExpressionTree asSwitchExpression();\\n        ```\\n        ```\\n        //org.sonar.plugins.java.api.tree.CaseLabelTree\\n        /**\\n        * @return true for case with colon: \\\"case 3:\\\" or \\\"default:\\\"\\n        *         false for case with arrow: \\\"case 3 ->\\\" or \\\"default ->\\\"\\n        * @since 5.12 (Java 12 new features)\\n        */\\n        boolean isFallThrough();\\n        \\n        /**\\n        * @since 5.12 (Java 12 new features)\\n        */\\n        SyntaxToken colonOrArrowToken();\\n        ```\\n        ```\\n        //org.sonar.plugins.java.api.tree.BreakStatementTree\\n        /**\\n        * @since 5.12 (Java 12 new features)\\n        */\\n        @Nullable\\n        ExpressionTree value();\\n        ```\\n        ```\\n        //org.sonar.plugins.java.api.tree.TreeVisitor\\n        void visitSwitchExpression(SwitchExpressionTree tree);\\n        ```\\n\\n#### **5.7**\\n* **Breaking**  \\n    * This change will impact mostly the custom rules relying on semantic API. The type returned by some symbols will change from raw type to parameterized type with identity substitution and this will change how subtyping will answer.\\n\\n    It is possible to get the previous behavior back by using type erasure on the newly returned type. Note that not all returned types are impacted by this change.\\n\\n    Example:\\n    ```\\n    @Rule(key = \\\"MyFirstCustomRule\\\")\\n    public class MyFirstCustomCheck extends IssuableSubscriptionVisitor {\\n    \\n        @Override\\n        public List<Kind> nodesToVisit() {\\n            return ImmutableList.of(Kind.METHOD);\\n        }\\n    \\n        @Override\\n        public void visitNode(Tree tree) {\\n            MethodTree method = (MethodTree) tree;\\n            MethodSymbol symbol = method.symbol();\\n            \\n            Type returnType = symbol.returnType().type();\\n            // When analyzing the code \\\"MyClass<Integer> foo() {return null; }\\\"\\n            // BEFORE: returnType == ClassJavaType\\n            // NOW: returnType == ParametrizedTypeJavaType\\n    \\n            // Getting back previous type\\n            Type erasedType = returnType.erasure();\\n            // erasedType == ClassJavaType\\n        }\\n    }\\n    ```\\n<!-- /sonarqube -->\\n\\n## Related Pages\\n\\n* [Test Coverage & Execution](/analysis/coverage/) ([SpotBugs](https://spotbugs.github.io/), FindBugs, [FindSecBugs](https://github.com/find-sec-bugs/find-sec-bugs/wiki/Maven-configuration), [PMD](http://maven.apache.org/plugins/maven-pmd-plugin/usage.html), [Checkstyle](http://maven.apache.org/plugins/maven-checkstyle-plugin/checkstyle-mojo))\\n* [Importing External Issues](/analysis/external-issues/) (JaCoCo, Surefire)\\n<!-- sonarqube -->\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/languages/javascript\",\"content\":\"---\\ntitle: JavaScript\\nurl: /analysis/languages/javascript/\\n---\\n\\n<!-- static -->\\n<!-- update_center:javascript -->\\n<!-- /static -->\\n\\n\\n## Prerequisites\\n\\nIn order to analyze JavaScript code, you need to have Node.js >= 8 installed on the machine running the scan. Set property `sonar.nodejs.executable` to an absolute path to Node.js executable, if standard `node` is not available.\\n \\n## Language-Specific Properties\\n\\nDiscover and update the JavaScript-specific properties in: **<!-- sonarcloud -->Project <!-- /sonarcloud -->[Administration > General Settings > JavaScript](/#sonarqube-admin#/admin/settings?category=javascript)**\\n\\n## Supported Frameworks and Versions\\n* ECMAScript 5 / ECMAScript 2015 (ECMAScript 6) / ECMAScript 2016 / ECMAScript 2017\\n* React JSX\\n* Vue.js\\n* Flow\\n\\n## Rule Profiles\\n\\nThere are 2 built-in rule profiles for JavaScript: `Sonar way` (default) and `Sonar way Recommended`.\\n* `Sonar way` profile is activated by default. It defines a trimmed list of high-value/low-noise rules useful in almost any JS development context.\\n* `Sonar way Recommended` contains all rules from `Sonar way`, plus more rules that mandate high code readability and long-term project evolution.\\n\\n<!-- sonarqube -->\\n## Custom rules\\n[[warning]]\\n| ![](/images/exclamation.svg) This feature is deprecated\\n### Overview\\n\\nThe JavaScript Analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.\\n\\nAs soon as the coding rule visits a node, it can navigate the tree around the node and log issues if necessary.\\n\\n### Create SonarQube Plugin\\nCustom rules for JavaScript can be added by writing a SonarQube Plugin and using JavaScript analyzer APIs.\\n\\nTo get started a sample plugin can be found here: [javascript-custom-rules](https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/javascript-custom-rules).\\nHere are the step to follow:\\n\\n* Create a standard SonarQube plugin project\\n* Attach this plugin to the SonarQube JavaScript analyzer through the `pom.xml`:\\n  * Add the dependency to the JavaScript analyzer.\\n  * Add the following line in the sonar-packaging-maven-plugin configuration.\\n  ```\\n  <basePlugin>javascript</basePlugin>\\n  ```\\n* Implement the following extension points:\\n  * [Plugin](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Plugin.html)\\n  * [RulesDefinition](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/rule/RulesDefinition.html) \\n  * `CustomRuleRepository`, this interface registers rule classes with JavaScript plugin, so they are invoked during analysis of JavaScript files.\\n* Declare `RulesDefinition` as an extension in the `Plugin` extension point.\\n\\nYou can implement both `RulesDefinition` and `CustomRulesRepository` in a single class.\\n\\n### Implement a Rule\\n\\n* Create a class that will hold the implementation of the rule. It should:\\n  * Extend `DoubleDispatchVisitorCheck` or `SubscriptionVisitorCheck`\\n  * Define the rule name, key, tags, etc. with Java annotations.\\n* Declare this class in the `RulesDefinition`.\\n\\n###  Implementation Details\\n\\n#### Using DoubleDispatchVisitorCheck\\n`DoubleDispatchVisitorCheck` extends `DoubleDispatchVisitor` which provide a set of methods to visit specific tree nodes (these methods' names start with `visit`). To explore a part of the AST, override the required method(s). For example, if you want to explore `if` statement nodes, override the `DoubleDispatchVisitor#visitIfStatement` method that will be called each time an `IfStatementTree` node is encountered in the AST.\\n\\n![](/images/exclamation.svg) When overriding a visit method, you must call the `super` method in order to allow the visitor to visit the rest of the tree.\\n\\n#### Using SubscriptionVisitorCheck\\n`SubscriptionVisitorCheck` extends `SubscriptionVisitor`. To explore a part of the AST, override `SubscribtionVisitor#nodesToVisit()` by returning the list of the `Tree#Kind` of node you want to visit. For example, if you want to explore `if` statement nodes the method will return a list containing the element `Tree#Kind#IF_STATEMENT`.\\n\\n#### Create issues\\nUse these methods to log an issue:\\n\\n* `JavaScriptCheck#addIssue(tree, message)` creates and returns an instance of `PreciseIssue`. In the SonarQube UI this issue will highlight all code corresponding to the tree passed as the first parameter. To add cost (effort to fix) or secondary locations provide these values to your just-created instance of `PreciseIssue`.\\n* `JavaScriptCheck#addIssue(issue)` creates and returns the instance of `Issue`. Use this method to create non-standard issues (e.g. for a file-level issue instantiate `FileIssue`).\\n\\n#### Check context\\nCheck context is provided by `DoubleDispatchVisitorCheck` or `SubscriptionVisitorCheck` by calling the `JavaScriptCheck#getContext` method. Check context provides you access to the root tree of the file, the file itself and the symbol model (information about variables).\\n\\n#### Test rule\\nTo test the rule you can use `JavaScriptCheckVerifier#verify()` or `JavaScriptCheckVerifier#issues()`. To be able to use these methods add a dependency to your project:\\n```\\n<dependency>\\n  <groupId>org.sonarsource.javascript</groupId>\\n  <artifactId>javascript-checks-testkit</artifactId>\\n  <version>XXX</version>\\n  <scope>test</scope>\\n</dependency>\\n```\\n\\n### API Changes\\n#### SonarJS 4.2.1\\n* `CustomJavaScriptRulesDefinition` is deprecated. Implement extension `RulesDefinition` and `CustomRuleRepository` instead.\\n\\n#### SonarJS 4.0\\n* Method `TreeVisitorContext#getFile()` is removed.\\n\\n<!-- /sonarqube -->\\n\\n## Related Pages\\n\\n* [Test Coverage & Execution](/analysis/coverage/) (LCOV format)\\n* [Importing External Issues](/analysis/external-issues/) (ESLint)\\n* [SonarJS Plugin for ESLint](https://github.com/SonarSource/eslint-plugin-sonarjs)\\n<!-- sonarqube -->\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/languages/kotlin\",\"content\":\"---\\ntitle: Kotlin\\nurl: /analysis/languages/kotlin/\\n---\\n\\n<!-- static -->\\n<!-- update_center:kotlin -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nYou can discover and update Kotlin-specific [properties](/analysis/analysis-parameters/) in:  <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > Kotlin](/#sonarqube-admin#/admin/settings?category=kotlin)**.\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) (AndroidLint and Detekt)\\n* [Test Coverage & Execution](/analysis/coverage/) (JaCoCo)\\n\"},{\"path\":\"analysis/languages/overview\",\"content\":\"---\\ntitle: Overview\\nurl: /analysis/languages/overview/\\n---\\n\\nSonarQube allows to analyze different languages depending on the Edition you are running.\\n\\n| Language                             | Community Edition      | Developer Edition      | Enterprise Edition and Data Center Edtion |\\n| ------------------------------------ | ---------------------- | ---------------------- | ----------------------------------------- |\\n| [ABAP](/analysis/languages/abap/)             |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Apex](/analysis/languages/apex/)             |                        |                        | ![](/images/check.svg)                    |\\n| [C#](/analysis/languages/csharp/)             | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [C](/analysis/languages/cfamily/)             |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [C++](/analysis/languages/cfamily/)           |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [COBOL](/analysis/languages/cobol/)           |                        |                        | ![](/images/check.svg)                    |\\n| [CSS](/analysis/languages/css/)               | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Flex](/analysis/languages/flex/)             | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Go](/analysis/languages/go/)                 | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Java](/analysis/languages/java/)             | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [JavaScript](/analysis/languages/javascript/) | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Kotlin](/analysis/languages/kotlin/)         | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Objective-C](/analysis/languages/cfamily/)   |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [PHP](/analysis/languages/php/)               | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [PLI](/analysis/languages/pli/)               |                        |                        | ![](/images/check.svg)                    |\\n| [PLSQL](/analysis/languages/plsql/)           |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Python](/analysis/languages/python/)         | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [RPG](/analysis/languages/rpg/)               |                        |                        | ![](/images/check.svg)                    |\\n| [Ruby](/analysis/languages/ruby/)             | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Scala](/analysis/languages/scala/)           | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [Swift](/analysis/languages/swift/)           |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [TypeScript](/analysis/languages/typescript/) | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [TSQL](/analysis/languages/tsql/)             |                        | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [VB.NET](/analysis/languages/vbnet/)          | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [VB6](/analysis/languages/vb6/)               |                        |                        | ![](/images/check.svg)                    |\\n| [HTML](/analysis/languages/html/)             | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n| [XML](/analysis/languages/xml/)               | ![](/images/check.svg) | ![](/images/check.svg) | ![](/images/check.svg)                    |\\n\\nIn this section you will find the documentation related to language analyzers made and supported by SonarSource.\\n\"},{\"path\":\"analysis/languages/php\",\"content\":\"---\\ntitle: PHP\\nurl: /analysis/languages/php/\\n---\\n\\n<!-- static -->\\n<!-- update_center:php -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the PHP-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > PHP](/#sonarqube-admin#/admin/settings?category=php)**\\n\\n## Analyze php.ini Files\\n\\nThe PHP analyzer can analyze `php.ini` files with some specific rules (if these rules are activated in your quality profile). `php.ini` files must be part of the project you are analyzing, meaning the `php.ini` files have to be inside the directories listed in `sonar.sources`. \\nRules targeting `php.ini` files can be quickly identified through the [\\\"php-ini\\\"](https://rules.sonarsource.com/php/tag/php-ini) tag set on them.\\n\\n<!-- sonarqube -->\\n\\n## Custom Rules\\n\\n### Overview\\n\\nThe PHP analyzer parses the source code, creates an Abstract Syntax Tree (AST) and then walks through the entire tree. A coding rule is a visitor that is able to visit nodes from this AST.\\n\\nAs soon as the coding rule visits a node, it can navigate its children and log issues if necessary.\\n\\n### Example Plugin\\n\\nTo get started a sample plugin can be found here: [php-custom-rules](https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/php-custom-rules).\\n\\n### Writing a Plugin\\n\\nCustom rules for PHP can be added by writing a SonarQube Plugin and using PHP analyzer APIs.\\nHere are the step to follow:\\n\\n#### Create SonarQube Plugin\\n\\n* create a standard SonarQube plugin project\\n* attach this plugin to the SonarQube PHP analyzer through the `pom.xml`:\\n  * add the dependency to the PHP analyzer.\\n  * add the following line in the sonar-packaging-maven-plugin configuration.\\n  ```\\n  <basePlugin>php</basePlugin>\\n  ```\\n* implement the following extension points:\\n  * [Plugin](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Plugin.html)\\n  * [RulesDefinition](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/rule/RulesDefinition.html) and [PHPCustomRuleRepository](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPCustomRuleRepository.java), which can be implemented by a single class, to declare your custom rules\\n* declare the RulesDefinition as an extension in the Plugin extension point.\\n\\n#### Implement a Rule\\n\\n* create a class that will hold the implementation of the rule, it should:\\n  * extend `PHPVisitorCheck` or `PHPSubscriptionCheck`\\n  * define the rule name, key, tags, etc. with Java annotations.\\n* declare this class in the `RulesDefinition`.\\n\\n####  Implementation Details\\n\\n**Using `PHPVisitorCheck`**\\n\\nTo explore a part of the AST, override a method from the PHPVisitorCheck. For example, if you want to explore \\\"if statement\\\" nodes, override [PHPVisitorCheck#visitIfStatement](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPVisitorCheck.java#L265) method that will be called each time an [ifStatementTree](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java) node is encountered in the AST.\\n\\n![](/images/exclamation.svg) When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node.\\n\\n**Using `PHPSubscriptionCheck`**\\n\\nTo explore a part of the AST, override [`PHPSubscriptionCheck#nodesToVisit`](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/PHPSubscriptionCheck.java#L33) by returning the list of the [`Tree#Kind`](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/Tree.java#L124) of node you want to visit. For example, if you want to explore \\\"if statement\\\" nodes the method will return a list containing the element [`Tree#Kind#IF_STATEMENT`](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/Tree.java#L761).\\n\\n**Create Issues**\\n\\nFrom the check, issue can be created by calling [`CheckContext#newIssue`](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/CheckContext.java#L90) method.\\n\\n**Testing Checks**\\n\\nTo test custom checks you can use method [`PHPCheckVerifier#verify`](https://github.com/SonarSource/sonar-php/blob/master/php-frontend/src/main/java/org/sonar/plugins/php/api/tests/PHPCheckVerifier.java#L55). You should end each line with an issue with a comment in the following form:\\n\\n```\\n// Noncompliant {{Message}}\\n```\\n\\nComment syntax is described [here](https://github.com/SonarSource/sonar-analyzer-commons/blob/master/test-commons/README.md).\\n\\n<!-- /sonarqube -->\\n\\n## Related Pages\\n\\n* [Test Coverage & Execution](/analysis/coverage/)\\n<!-- sonarqube -->\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/languages/pli\",\"content\":\"---\\ntitle: PLI\\nurl: /analysis/languages/pli/\\n---\\n\\n_PL/I is available as part of [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n\\n<!-- static -->\\n<!-- update_center:pli -->\\n<!-- /static -->\\n\\n## Language-Specific Properties\\n\\nDiscover and update the PL/I-specific properties in: **[Administration > General Settings > PL/I](/#sonarqube-admin#/admin/settings?category=pl%2Fi)**\\n\\n## Source Code Extraction\\n\\nIn order to analyze your source code with SonarQube you need to first extract it onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.\\n\\n## Dealing with Includes\\n\\nThere are two possible ways to tell SonarQube where to retrieve the source code referenced by an %INCLUDE statement.\\n\\nThe following syntaxes are supported:\\n\\n```\\n%INCLUDE 'C:/temp/myLib.pli'\\n%INCLUDE ddname(member);\\n%INCLUDE member; /* With member not enclosed within single or double quotes, i.e. a SYSLIB member */\\n```\\n\\nExample:\\n\\nIf you want to interpret:\\n\\n```\\n%INCLUDE O (XX02511) as %INCLUDE 'C:/temp/o/XX02511.99IPO';\\n%INCLUDE lib1 as %INCLUDE 'C:/temp/syslib/lib1.pli';\\n```\\n\\nthe Ddnames are defined as:\\n\\n```\\nsonar.pli.includeDdnames=O,SYSLIB\\n\\nsonar.pli.includeDdname.O.path=c:/temp/o\\nsonar.pli.includeDdname.O.suffix=.99IPO\\n\\nsonar.pli.includeDdname.SYSLIB.path=c:/temp/syslib\\nsonar.pli.includeDdname.SYSLIB.suffix=.pli\\n```\\n\\nNote that the following constructs, involving at least two members, are currently not supported:\\n\\n```\\n%INCLUDE member1, member2;\\n%INCLUDE ddname1(member1), member2;\\n%INCLUDE member1, ddname1(member2);\\n%INCLUDE ddname1(member1), ddname2(member2);\\n```\\n\\n## Related Pages\\n<!-- sonarqube -->\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/languages/plsql\",\"content\":\"---\\ntitle: PL/SQL\\nurl: /analysis/languages/plsql/\\n---\\n\\n<!-- static -->\\n<!-- update_center:plsql -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the PL/SQL-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > PL/SQL](/#sonarqube-admin#/admin/settings?category=pl%2Fsql)**\\n\\n## Advanced parameters\\n\\n### Default Schema\\nParameter | Description\\n--- | ---\\n`sonar.plsql.defaultSchema` | When a schema object (table, view, index, synonym) is referenced in SQL code without a schema prefix, the analyzer will assume that it belongs to this schema.\\n\\n\\n### Data Dictionary\\nSome rules raise issues only when a data dictionary is provided during analysis. To provide a data dictionary, you must define the following properties in the `sonar-project.properties` file or on the scanner command line using the  `-D` prefix:\\n\\n\\n|Parameter|Description|\\n| --- | --- | \\n|`sonar.plsql.jdbc.url`|URL of the JDBC connection. **Required for data dictionary lookup**. For example: `jdbc:oracle:thin:@my-oracle-server:1521/my-db`\\n|`sonar.plsql.jdbc.user`|JDBC user to authenticate the connection.\\n|`sonar.plsql.jdbc.password`|JDBC password provided to authenticate the connection.\\n|`sonar.plsql.jdbc.driver.path`|Path or URL of the Oracle jdbc driver jar.\\n|`sonar.plsql.jdbc.driver.class`|Java class name of the Oracle Driver. For example: `oracle.jdbc.OracleDriver`\\n\\nProviding this configuration allows SonarPLSQL to query data dictionary views such as `SYS.ALL_TAB_COLUMNS` in order to to better analyze your SQL.\\n\\n\\n<!-- sonarqube -->\\n## Related Pages\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\\n\"},{\"path\":\"analysis/languages/python\",\"content\":\"---\\ntitle: Python\\nurl: /analysis/languages/python/\\n---\\n\\n<!-- static -->\\n<!-- update_center:python -->\\n<!-- /static -->\\n\\n\\n## Supported Versions\\n* Python 3.X\\n* Python 2.X\\n\\n## Language-Specific Properties\\n\\nDiscover and update the Python-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > Python](/#sonarqube-admin#/admin/settings?category=python)**.\\n\\n## Pylint\\n[Pylint](http://www.pylint.org/) is an external static source code analyzer, it can be used in conjunction with SonarPython.\\n\\nYou can enable Pylint rules directly in your Python Quality Profile. Their rule keys start with \\\"*Pylint:*\\\".\\n\\nOnce the rules are activated you should run Pylint and import its report:\\n```\\npylint <module_or_package> -r n --msg-template=\\\"{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\\\" > <report_file>\\n```\\nThen pass the generated report path to analysis via the `sonar.python.pylint.reportPath` property.\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) ([Pylint](http://www.pylint.org/), [Bandit](https://github.com/PyCQA/bandit/blob/master/README.rst))\\n* [Test Coverage & Execution](/analysis/coverage/) (the [Coverage Tool](http://nedbatchelder.com/code/coverage/) provided by [Ned Batchelder](http://nedbatchelder.com/), [Nose](https://nose.readthedocs.org/en/latest/), [pytest](https://docs.pytest.org/en/latest/))\\n\"},{\"path\":\"analysis/languages/rpg\",\"content\":\"---\\ntitle: RPG\\nurl: /analysis/languages/rpg/\\n---\\n\\n_RPG is available as part of [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n\\n<!-- static -->\\n<!-- update_center:rpg -->\\n<!-- /static -->\\n\\n## Language-Specific Properties\\n\\nDiscover and update the RPG-specific [properties](/analysis/analysis-parameters/) in: **[Administration > General Settings > RPG](/#sonarqube-admin#/admin/settings?category=rpg)**\\n\\n## Source Code Extraction\\n\\nIn order to analyze your source code with SonarQube you need to first extract it onto a filesystem. You can use your own tool or an open source tool; SonarSource does not provide any connectors or source code extraction tools.\\n\\n## RPG Source Format\\n\\nDepending on your extraction process, your RPG source files may include an extra margin on the left of the 80 columns used for code. This margin is in addition to the standard margin which takes up characters 1-5 in the 80-character source format. The extra margin is controlled through the `sonar.rpg.leftMarginWidth` property. By default, it is set to 12, which is the size of the margin in an IBM “source physical file”. If your RPG source files do not contain such a margin, you should set `sonar.rpg.leftMarginWidth` to `0`.\\n\\nYou can find an [example file](https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/sonarqube-scanner/src/rpg/MYPROGRAM.rpg) illustrating a 12-character margin in our sample project.\\n\\nYou should also make sure to set `sonar.sourceEncoding` to the appropriate encoding. Please check the [documentation of this property](/analysis/analysis-parameters/).\\n\\n## Free-Form Support\\n\\nFree-form is supported for C-specs and SQL statements. Free-form is not yet supported for H, F, D and P specs (which were [added in IBM i 7.2](http://www-01.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzasd/rpgrelv7r2.htm)).\\n\\n## Custom Rules for RPG\\n\\nTo get started you can [browse](https://github.com/SonarSource/sonar-custom-rules-examples/tree/master/rpg-custom-rules) or [download](https://github.com/SonarSource/sonar-custom-rules-examples/archive/master.zip) a simple plugin.\\n\\n### Pre-requisites\\n\\n- JDK 8\\n- SonarRPG 2.0+\\n\\n### Creating a Maven Project\\n\\nYou should first create a Maven project: re-using the [pom.xml from the RPG example](https://github.com/SonarSource/sonar-custom-rules-examples/blob/master/rpg-custom-rules/pom.xml) is a good start.\\n\\nThe following dependencies need to be defined in the pom.xml:\\n\\n- `sonar-plugin-api` to get access to SonarQube APIs\\n- `sonar-rpg-plugin` to use the APIs of the RPG plugin\\n\\n### Writing a Custom Rule\\n\\nEach rule needs to be defined in a class which:\\n\\n- Implements [`com.sonarsource.rpg.api.checks.Check`](http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html). Instead of implementing this interface directly, the class can also extend [`VisitorBasedCheck`](http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/checks/VisitorBasedCheck.html) which makes it easier to target some specific parts of the analyzed source code.\\n- Has an `org.sonar.check.Rule` annotation to define the key of the rule.\\n\\n#### Navigating the Syntax Tree\\n\\nThe analyzed source code is represented as a tree structure. The top-most tree is an instance of [`ModuleTree`](http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/tree/ModuleTree.html) which has references to other trees. Some of the trees represent a group of RPG calculations (for example, an `IF` group is represented as a tree which references the calculations which are executed when the condition is true), some others represent expressions such as `a + b`.\\n\\nThe instance of [`CheckContext`](http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/checks/CheckContext.html) which is passed to the checks gives a reference to the `ModuleTree` of the analyzed source code. The whole tree structure can be navigated from that object.\\n\\nMost often, it's easier to extend `VisitorBasedCheck` and to override one or more methods which name starts with visit, e.g. `visitIfGroup`. That way, it's possible to define what should be executed when visiting some specific kinds of trees.\\n\\n#### Creating Issues\\n\\n[`CheckContext`](http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/checks/CheckContext.html) provides methods to create issues either at file level or at line level.\\n\\n#### Testing the Rule\\n\\nIt's possible to write unit tests for custom rules using `com.sonarsource.rpg.api.test.RpgCheckVerifier`. This utility class executes a custom rule against a given RPG test file. The RPG test file should contain comments denoting lines where issues should be expected:\\n\\n- if the line ends with \\\"// Noncompliant\\\", `RpgCheckVerifier` expects an issue on that line.\\n- if the line ends with \\\"// Noncompliant {{my message}}\\\", `RpgCheckVerifier` expects an issue on that line and checks that the issue message is \\\"my message\\\".\\n\\nThe example project contains an [example test class](https://github.com/SonarSource/sonar-custom-rules-examples/blob/master/rpg-custom-rules/src/test/java/com/sonarsource/rpg/example/checks/DataStructureNamingConventionCheckTest.java) and the [associated RPG file](https://github.com/SonarSource/sonar-custom-rules-examples/blob/master/rpg-custom-rules/src/test/resources/data-structure-name.rpg).\\n\\n### Rules Definition\\n\\nOne class should extend [`com.sonarsource.rpg.api.CustomRulesDefinition`](http://javadocs.sonarsource.org/rpg/apidocs/2.3/index.html?com/sonarsource/rpg/api/checks/Check.html?com/sonarsource/rpg/api/CustomRulesDefinition.html): it should list the classes of the custom rules and use the SonarQube API to define the metadata of these rules: name, HTML description, default severity...\\n\\n### Plugin Class\\n\\nThe entry point of the custom plugin is a class which lists SonarQube extensions. This list should contain the class created at the previous step.\\n\\n### Packaging the Custom Plugin\\n\\nTo package your custom plugin, the pom.xml should use `org.sonarsource.sonar-packaging-maven-plugin`, as described in the [documentation explaining how to build a plugin](/extend/developing-plugin/).\\n\\nIn the configuration for `sonar-packaging-maven-plugin`, basePlugin should be set to \\\"rpg\\\".\\n\\nBuilding the Maven project will produce a JAR file which can be deployed to a SonarQube server.\\n\"},{\"path\":\"analysis/languages/ruby\",\"content\":\"---\\ntitle: Ruby\\nurl: /analysis/languages/ruby/\\n---\\n\\n<!-- static -->\\n<!-- update_center:ruby -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the Ruby-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > Ruby](/#sonarqube-admin#/admin/settings?category=ruby)**\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) (Rubocop)\\n* [Test Coverage & Execution](/analysis/coverage/) (SimpleCov)\\n\"},{\"path\":\"analysis/languages/scala\",\"content\":\"---\\ntitle: Scala\\nurl: /analysis/languages/scala/\\n---\\n\\n<!-- static -->\\n<!-- update_center:sonarscala -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the Scala-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > Scala](/#sonarqube-admin#/admin/settings?category=scala)**.\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) (Scalastyle or Scapegoat)\\n* [Test Coverage & Execution](/analysis/coverage/) (Scoverage)\\n\"},{\"path\":\"analysis/languages/swift\",\"content\":\"---\\ntitle: Swift\\nurl: /analysis/languages/swift/\\n---\\n\\n<!-- static -->\\n<!-- update_center:swift -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the Swift-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > Swift](/#sonarqube-admin#/admin/settings?category=swift)**.\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) (Xcode A.K.A. ProfData)\\n* [Test Coverage & Execution](/analysis/coverage/) (SwiftLint)\\n\"},{\"path\":\"analysis/languages/tsql\",\"content\":\"---\\ntitle: T-SQL\\nurl: /analysis/languages/tsql/\\n---\\n\\n<!-- static -->\\n<!-- update_center:tsql -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the T-SQL-specific [properties](/analysis/analysis-parameters/) in:  <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > T-SQL](/#sonarqube-admin#/admin/settings?category=t-sql)**.\\n\\n## Important Note\\nWith the default configuration, only files with the `.tsql` are analyzed as T-SQL, and files with the `.sql` file extension are analyzed as PL/SQL. This behavior is defined in <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > T-SQL > File Suffixes](/#sonarqube-admin#/admin/settings?category=t-sql)** and <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > PL/SQL > File Suffixes](/#sonarqube-admin#/admin/settings?category=pl%2Fsql)**. You can override these properties <!-- sonarqube -->either at server level or<!-- /sonarqube --> at project level.\\n\\n\"},{\"path\":\"analysis/languages/typescript\",\"content\":\"---\\ntitle: TypeScript\\nurl: /analysis/languages/typescript/\\n---\\n\\n<!-- static -->\\n<!-- update_center:typescript -->\\n<!-- /static -->\\n\\n\\n## Prerequisites\\n\\nIn order to analyze TypeScript code, you need to have Node.js >= 8 installed on the machine running the scan. Set property `sonar.typescript.node` to an absolute path to Node.js executable, if standard `node` is not available.\\n\\nAlso make sure to have [TypeScript](https://www.npmjs.com/package/typescript) as a project dependency or dev dependency. If it's not the case, add it:\\n```\\ncd <your-project-folder>\\nnpm install -D typescript\\n```\\nIf you can't have TypeScript as a project dependency you can set your `NODE_PATH` variable to point to your globally installed TypeScript (but this is generally discouraged by the Node.js documentation).\\n\\n## Language-Specific Properties\\n\\nDiscover and update the TypeScript-specific properties in: **<!-- sonarcloud -->Project <!-- /sonarcloud -->[Administration > General Settings > TypeScript](/#sonarqube-admin#/admin/settings?category=typescript)**\\n\\n## Supported Frameworks and Versions\\n* TypeScript >= 2.2\\n\\n## Rule Profiles\\n\\nThere are 2 built-in rule profiles for TypeScript: `Sonar way` (default) and `Sonar way Recommended`.\\n* `Sonar way` profile is activated by default. It defines a trimmed list of high-value/low-noise rules useful in almost any TS development context.\\n* `Sonar way Recommended` contains all rules from `Sonar way`, plus more rules that mandate high code readability and long-term project evolution.\\n\\n## Related Pages\\n\\n* [Test Coverage & Execution](/analysis/coverage/) (LCOV format)\\n* [Importing External Issues](/analysis/external-issues/) (TSLint)\\n* [SonarTS Plugin for TSLint](https://www.npmjs.com/package/tslint-sonarts)\\n* [Sample TypeScript Project](https://github.com/SonarSource/SonarTS-example/)\\n\"},{\"path\":\"analysis/languages/vb6\",\"content\":\"---\\ntitle: VB6\\nurl: /analysis/languages/vb6/\\n---\\n\\n<!-- sonarqube -->\\n\\n_VB6 analysis is available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://redirect.sonarsource.com/editions/editions.html)._\\n\\n<!-- /sonarqube -->\\n\\n<!-- static -->\\n<!-- update_center:vb -->\\n<!-- /static -->\\n\\n## Language-Specific Properties\\n\\nYou can discover and update VB6-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > Visual Basic](/#sonarqube-admin#/admin/settings?category=visual+basic)**.\\n\"},{\"path\":\"analysis/languages/vbnet\",\"content\":\"---\\ntitle: VB.NET\\nurl: /analysis/languages/vbnet/\\n---\\n\\n<!-- static -->\\n<!-- update_center:vbnet -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the VB.NET-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud --> **[Administration > General Settings > VB.NET](/#sonarqube-admin#/admin/settings?category=vb.net)**\\n\\n### Analyze Generated Code\\n\\nTo analyze tool-generated code (e.g. WCF code generated by `SvcUtil.exe`) for a specific VB.NET project, enable the \\\"Analyze generated code\\\" setting inside **Project > Administration > General Settings > VB.NET**. By default, tool-generated code files are skipped from analysis.\\n\\n## Known Limitations\\nCurrently an error will be thrown when an issue is raised on a line of code containing the following pattern `\\\\s+error\\\\s*:` (i.e. one or more spaces, the string 'error', zero or more spaces and a ':' ) . This is a well known problem on the Microsoft side (see [issue](https://github.com/dotnet/roslyn/issues/5724/)). In order to work around this problem, our analyzer will skip issues reported on any line where the pattern is detected.\\n\\n\\n## Related Pages\\n* [Importing External Issues](/analysis/external-issues/) (VSTest, NUnit, MSTest, xUnit)\\n* [Test Coverage & Execution](/analysis/coverage/) (Visual Studio Code Coverage, dotCover, OpenCover, NCover 3)\\n* [SonarScanner for MSBuild](/analysis/scan/sonarscanner-for-msbuild/)\\n* [SonarScanner for Azure DevOps](/analysis/scan/sonarscanner-for-azure-devops/)\\n\"},{\"path\":\"analysis/languages/xml\",\"content\":\"---\\ntitle: XML\\nurl: /analysis/languages/xml/\\n---\\n\\n<!-- static -->\\n<!-- update_center:xml -->\\n<!-- /static -->\\n\\n\\n## Language-Specific Properties\\n\\nDiscover and update the XML-specific [properties](/analysis/analysis-parameters/) in: <!-- sonarcloud -->Project <!-- /sonarcloud -->**[Administration > General Settings > XML](/#sonarqube-admin#/admin/settings?category=xml)**\\n\\n<!-- sonarqube -->\\n## Related Pages\\n* [Adding Coding Rules](/extend/adding-coding-rules/)\\n<!-- /sonarqube -->\\n\"},{\"path\":\"analysis/overview\",\"content\":\"---\\ntitle: Overview\\nurl: /analysis/overview/\\n---\\n\\n<!-- sonarcloud -->\\n## Prepare your organization\\n\\nA project must belong to an [organization](/organizations/overview/). You need to create one to analyze a project and collaborate with your team mates.\\n\\n[[info]]\\n| ** Important note for private code:** Newly created organizations are under a free plan by default. This means projects analyzed on these organizations are public by default: the code will be browsable by anyone. If you want private projects, you should [upgrade your organization to a paid plan](/sonarcloud-pricing/).\\n\\nFind the key of your organization, you will need it at later stages. It can be found on the top right corner of your organization's header.\\n\\n## Run analysis\\n\\nSonarCloud currently does not trigger analyses automatically - this feature will come in a near future. Currently, it's up to you to launch them inside your existing CI scripts using the available scanners:\\n* Gradle - [SonarScanner for Gradle](/analysis/scan/sonarscanner-for-gradle/)\\n* MSBuild - [SonarScanner for MSBuild](/analysis/scan/sonarscanner-for-msbuild/)\\n* Maven - use the [SonarScanner for Maven](/analysis/scan/sonarscanner-for-maven/)\\n* Ant - [SonarScanner for Ant](/analysis/scan/sonarscanner-for-ant/)\\n* anything else (CLI) - [SonarScanner](/analysis/scan/sonarscanner/)\\n\\nAfter creating a project, the tutorial available on its homepage will guide you to find how to trigger an analysis.\\n\\n![Info](/images/info.svg) Remember that depending on which cloud solution you are using for your developments, you can rely on dedicated integrations to help you:\\n\\n* [GitHub](/integrations/github/)\\n* [Bitbucket Cloud](/integrations/bitbucketcloud/)\\n* [Azure DevOps (formerly VSTS)](/integrations/vsts/)\\n\\n<!-- /sonarcloud -->\\n\\n<!-- sonarqube -->\\nOnce the SonarQube platform has been installed, you're ready to install a scanner and begin creating projects. To do that, you must install and configure the scanner that is most appropriate for your needs. Do you build with:\\n\\n* Gradle - [SonarScanner for Gradle](/analysis/scan/sonarscanner-for-gradle/)\\n* MSBuild - [SonarScanner for MSBuild](/analysis/scan/sonarscanner-for-msbuild/)\\n* Maven - use the [SonarScanner for Maven](/analysis/scan/sonarscanner-for-maven/)\\n* Jenkins - [SonarScanner for Jenkins](/analysis/scan/sonarscanner-for-jenkins/)\\n* Azure DevOps - [SonarQube Extension for Azure DevOps](/analysis/scan/sonarscanner-for-azure-devops/)\\n* Ant - [SonarScanner for Ant](/analysis/scan/sonarscanner-for-ant/)\\n* anything else (CLI) - [SonarScanner](/analysis/scan/sonarscanner/)\\n\\n[[info]]\\n| SonarQube integrations are supported for popular on-premise ALMs: GitHub Enterprise, BitBucket Server, and Azure Devops Server. Integration with the cloud analogs of these ALMs is possible but not officially supported. \\n\\n[[warning]]\\n| We do not recommend running an antivirus scanner on the machine where a SonarQube analysis runs, it could result in unpredictable behavior.\\n\\n\\nA project is created in SonarQube automatically on its first analysis. However, if you need to set some configuration on your project before its first analysis, you have the option of provisioning it via Administration options or the **+** menu item, which is visible to users with project creation rights.\\n<!-- /sonarqube -->\\n\\n## What does analysis produce? \\n{instance} can perform analysis on 20+ different languages. The outcome of this analysis will be quality measures and issues (instances where coding rules were broken). However, what gets analyzed will vary depending on the language:\\n\\n* On all languages, \\\"blame\\\" data will automatically be imported from supported SCM providers. [Git and SVN are supported automatically](/analysis/scm-integration/). Other providers require additional plugins.\\n* On all languages, a static analysis of source code is performed (Java files, COBOL programs, etc.)\\n* A static analysis of compiled code can be performed for certain languages (.class files in Java, .dll files in C#, etc.)\\n\\n\\n## Will all files be analyzed?\\nBy default, only files that are recognized by a language analyzer are loaded into the project during analysis. \\n<!-- sonarqube -->\\nFor example if your SonarQube instance had only SonarJava SonarJS on board, all .java and .js files would be loaded, but .xml files would be ignored.\\n\\n## What about branches and pull requests?\\n_Developer Edition_ adds the ability to analyze your project's release / [long-lived branches](/branches/long-lived-branches/), feature / [short-lived branches](/branches/short-lived-branches/), and [pull requests](/analysis/pull-request/) as well as the ability to automatically decorate pull requests in some SCM interfaces. For more on branches see the [branches overview](/branches/overview/).\\n<!-- /sonarqube -->\\n\\n## What happens during analysis?\\nDuring analysis, data is requested from the server, the files provided to the analysis are analyzed, and the resulting data is sent back to the server at the end in the form of a report, which is then analyzed asynchronously server-side.\\n\\nAnalysis reports are queued, and processed sequentially, so it is quite possible that for a brief period after your analysis log shows completion, the updated values are not visible in your {instance} project. However, you will be able to tell what's going on because an icon will be added on the project homepage to the right of the project name. Mouse over it for more detail (and links if you're logged in with the proper permissions).\\n\\n![background task processing in progress.](/images/backgroundTaskProcessingInProgress.jpeg)\\n\\n\\nThe icon goes away once processing is complete, but if analysis report processing fails for some reason, the icon changes:\\n\\n![background task processing failed.](/images/backgroundTaskProcessingFailedIcon.jpeg)\\n\\n\\n## FAQ\\n\\n**Q.** Analysis errors out with `java.lang.OutOfMemoryError: GC overhead limit exceeded`. What do I do?  \\n**A.** This means your project is too large or too intricate for the scanner to analyze with the default memory allocation. To fix this you'll want to allocate a larger heap (using `-Xmx[numeric value here]`) to the process running the analysis. Some CI engines may give you an input to specify the necessary values, for instance if you're using a Maven Build Step in a Jenkins job to run analysis. Otherwise, use Java Options to set a higher value. Note that details of setting Java Options are omitted here because they vary depending on the environment.\\n\"},{\"path\":\"analysis/pull-request\",\"content\":\"---\\ntitle: Pull Request Analysis\\nurl: /analysis/pull-request/\\n---\\n\\n\\n\\n_Pull Request analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\n\\nPull Requests (PRs) are visible in {instance} from the branches and pull requests dropdown menu of your project.\\n\\nPR analysis allows you to:\\n\\n* see your PR's Quality Gate status in the {instance} UI.\\n* automatically decorate your PRs with {instance} issues in your SCM provider's interface.\\n\\n## Quality Gate\\n\\nThe PR quality gate:\\n* **Focuses on new code** – The PR quality gate only uses your project's quality gate conditions that apply to \\\"on New Code\\\" metrics.\\n* **Assigns a status** – Each PR shows a quality gate status reflecting whether it Passed (green) or Failed (red).\\n\\nWhen PR decoration is enabled, {instance} publishes the status of the analysis (Quality Gate) on the PR.\\n\\nPR analyses on {instance} are deleted automatically after 30 days with no analysis. This can be updated in **Configuration > General > Number of days before purging inactive short living branches**. \\n\\n## Analysis Parameters\\n\\nThese parameters enable PR analysis:\\n\\n| Parameter Name        | Description |\\n| --------------------- | ------------------ |\\n| `sonar.pullrequest.key` | Unique identifier of your PR. Must correspond to the key of the PR in GitHub or Azure DevOps. <br/> E.G.: `sonar.pullrequest.key=5` |\\n| `sonar.pullrequest.branch` | The name of the branch that contains the changes to be merged.<br/> Ex: `sonar.pullrequest.branch=feature/my-new-feature`|\\n| `sonar.pullrequest.base` | The long-lived branch into which the PR will be merged. <br/> Default: master <br/> E.G.: `sonar.pullrequest.base=master`|\\n\\n## PR Decoration\\nThis section details how to decorate your PRs with {instance} issues in your SCM provider's interface.\\n\\n### Specifying Your PR Provider\\n\\nSpecify your PR provider in your global settings at [**Administration > General Settings > Pull Requests > General > Provider**](/#sonarqube-admin#/sonarqube/admin/settings?category=pull_request/). This is the name of the system managing your PR. When using the {instance} Extension for Azure DevOps, the provider is automatically populated.\\n\\n### GitHub Enterprise PR Decoration\\n\\n[[info]]\\n| *Minimum GitHub Enterprise version* 2.14\\n\\nTo add PR decoration to Checks on GitHub Enterprise, you need to create a GitHub App and configure your SonarQube instance and update your project-level settings.\\n\\n#### Creating Your GitHub App\\nAn instance administrator needs to create a GitHub App and configure your SonarQube instance. See [GitHub Enterprise Integration](/instance-administration/github-application/) for instructions.\\n\\n#### Updating Your GitHub Project Settings\\nIn your project settings, set your project repository identifier (for example, SonarSource/sonarqube) at **Administration > General Settings > Pull Requests > Integration with GitHub > Repository identifier**.\\n\\n### Bitbucket Server PR Decoration\\n\\n[[info]]\\n| *Minimum BitBucket Server version* 5.15\\n\\nTo add PR decoration on Bitbucket Server, you need to set a personal access token and update some settings. \\n\\n#### Setting Your Personal Access Token\\n\\nIn your global settings, set the personal access token of the user that will be used to decorate the PRs in the SonarQube UI:\\n\\n* Set the token at [**Administration > General Settings > Pull Requests > Integration with Bitbucket Server > Personal access token**](/#sonarqube-admin#/admin/settings?category=pull_request/)\\n* The user that will be used to decorate PRs needs write permission.\\n\\n#### Updating Your Bitbucket Server Settings\\n\\nIn your global settings, set your Bitbucket Server URL (for example, `https://myinstance.mycompany.com/`) at [**Administration > General Settings > Pull Requests > Integration with Bitbucket Server > The URL of the Bitbucket Server**](/#sonarqube-admin#/admin/settings?category=pull_request/). This is the base URL for your Bitbucket Server instance.\\n\\nIn your project settings at **Administration > General Settings > Pull Requests > Integration with Bitbucket Server** update the following Bitbucket Server settings:\\n\\n* Bitbucket Server project key. You can find it in the Bitbucket Server repository URL (.../projects/**{KEY}**/repos/{SLUG}/browse).\\nFor projects in a personal space, the project key is \\\"~\\\" followed by your username (for example,  `~YourUsername`).\\n* Bitbucket Server repository slug. You can find it in the Bitbucket Server repository URL (.../projects/{KEY}/repos/**{SLUG}**/browse).\\n\\n### Azure DevOps Server PR Decoration\\n\\nTo add PR decoration on Azure DevOps Server, you need to set a personal access token.\\n\\n#### Setting Your Personal Access Token\\n\\nIn global and project settings, set the personal access token of the user that will be used to decorate the PRs in the SonarQube UI at [**Administration > General Settings > Pull Requests > Integration with Azure DevOps > Personal access token**](/#sonarqube-admin#/admin/settings?category=pull_request/). \\n\\nThe user that will be used to decorate PRs needs to be authorized for the scope: 'Code (read and write)'.\\t\\n\\n### Issue links\\nDuring pull request decoration, individual issues will be linked to their SonarQube counterparts automatically. However, for this to work correctly, the instance's **Server base URL** (**[Administration > General](/#sonarqube-admin#/admin/settings)**) must be set correctly. Otherwise the links will default to `localhost`.\\n\"},{\"path\":\"analysis/scan/sonarscanner-for-ant\",\"content\":\"---\\ntitle: SonarScanner for Ant\\nurl: /analysis/scan/sonarscanner-for-ant/\\n---\\n\\n[[info]]\\n| **Download SonarScanner for Ant 2.7** - Compatible with SonarQube 6.7+ (LTS)  \\n| By [SonarSource](https://www.sonarsource.com/) – GNU LGPL 3 – [Issue Tracker](https://jira.sonarsource.com/browse/ANTTASK) – [Source](https://github.com/SonarSource/sonar-scanner-ant) \\n|\\n| [Download](https://binaries.sonarsource.com/Distribution/sonarqube-ant-task/sonarqube-ant-task-2.7.0.1612.jar)\\n\\nThe SonarScanner for Ant provides a `task` to allow integration of SonarQube analysis into an Apache Ant build script.\\n\\nThe SonarScanner for Ant is an Ant Task that is wrapper of [SonarScanner](/analysis/scan/sonarscanner/), which works by invoking SonarScanner and passing to it all [properties](/analysis/analysis-parameters/) named following a `sonar.*` convention. This has the downside of not being very Ant-y, but the upside of providing instant availability of any new analysis parameter introduced by a new version of a plugin or of SonarQube itself. Therefore, successful use of the SonarScanner for Ant requires strict adherence to the property names shown below.\\n\\n\\n## Use\\nDefine a new sonar Ant target in your Ant build script:\\n```\\n<!-- build.xml -->\\n<project name=\\\"My Project\\\" default=\\\"all\\\" basedir=\\\".\\\" xmlns:sonar=\\\"antlib:org.sonar.ant\\\">\\n...\\n  \\n<!-- Define the SonarQube global properties (the most usual way is to pass these properties via the command line) -->\\n<property name=\\\"sonar.host.url\\\" value=\\\"http://localhost:9000\\\" />\\n \\n...\\n  \\n<!-- Define the SonarQube project properties -->\\n<property name=\\\"sonar.projectKey\\\" value=\\\"org.sonarqube:sonarqube-scanner-ant\\\" />\\n<property name=\\\"sonar.projectName\\\" value=\\\"Example of SonarScanner for Ant Usage\\\" />\\n<property name=\\\"sonar.projectVersion\\\" value=\\\"1.0\\\" />\\n<property name=\\\"sonar.sources\\\" value=\\\"src\\\" />\\n<property name=\\\"sonar.java.binaries\\\" value=\\\"build\\\" />\\n<property name=\\\"sonar.java.libraries\\\" value=\\\"lib/*.jar\\\" />\\n...\\n \\n<!-- Define SonarScanner for Ant Target -->\\n<target name=\\\"sonar\\\">\\n    <taskdef uri=\\\"antlib:org.sonar.ant\\\" resource=\\\"org/sonar/ant/antlib.xml\\\">\\n        <!-- Update the following line, or put the \\\"sonarqube-ant-task-*.jar\\\" file in your \\\"$HOME/.ant/lib\\\" folder -->\\n        <classpath path=\\\"path/to/sonar/ant/task/lib/sonarqube-ant-task-*.jar\\\" />\\n    </taskdef>\\n \\n    <!-- Execute SonarScanner for Ant Analysis -->\\n    <sonar:sonar />\\n</target>\\n```\\nRun the following command from the project base directory to launch the analysis:\\n```\\nant sonar\\n```\\n\\n\\n## Sample Project\\nTo help you get started, a simple project sample is available here: https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-ant\\n\\n## Troubleshooting\\n**Enable Debug Logs**  \\nTo enable debug logs, use the regular Ant verbose option: `-v`\\n```\\nant sonar -v\\n```\\n\"},{\"path\":\"analysis/scan/sonarscanner-for-azure-devops\",\"content\":\"---\\ntitle: SonarScanner for Azure DevOps\\nurl: /analysis/scan/sonarscanner-for-azure-devops/\\n---\\n\\n\\n[[info]]\\n| By [SonarSource](https://www.sonarsource.com/) - GNU LGPL 3 - [Issue Tracker](https://jira.sonarsource.com/browse/VSTS) - [Source](https://github.com/SonarSource/sonar-scanner-vsts)  \\n| Click [here](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) for the latest version.\\n\\nThe <!-- sonarqube -->[SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube)<!-- /sonarqube --> <!-- sonarcloud -->[SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud)<!-- /sonarcloud --> extension for Azure DevOps <!-- sonarqube -->Server<!-- /sonarqube --> makes it easy to integrate analysis into your build pipeline. The extension allows the analysis of all languages supported by {instance}.\\n\\n<!-- sonarcloud -->\\nMicrosoft has published a [dedicated lab](https://aka.ms/sonarcloudlab) describing how to integrate Azure DevOps Pipelines and SonarCloud. The lab includes setting up a Branch Policy in Azure DevOps to block a Pull Request from being submitted if the changed code does not meet the quality bar.\\n<!-- /sonarcloud -->\\n\\n<!-- sonarqube -->\\n## Compatibility\\nVersion 4.x is compatible with:\\n* TFS 2017 Update 2+\\n* TFS 2018\\n* Azure DevOps Server 2019\\n<!-- /sonarqube -->\\n\\nThe extension embeds its own version of the [SonarScanner for MSBuild](/analysis/scan/sonarscanner-for-msbuild/).\\n\\n## Installation\\n1. Install the extension <!-- sonarqube -->[from the marketplace](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube)<!-- /sonarqube --><!-- sonarcloud -->[from the marketplace](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud)<!-- /sonarcloud -->. \\n\\nIf you are using [Microsoft-hosted build agents](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops) then there is nothing else to install. The extension will work with all of the hosted agents (Windows, Linux, and MacOS).\\n\\n2. If you are self-hosting the build agents make sure at least the minimal version of Java supported by {instance} is installed.\\nIn addition, make sure the appropriate build tools are installed on the agent for the type of project e.g. .NET Framework v4.6+/NET Core 2.0+ if building using MSBuild, Maven for Java projects etc.\\n\\n## Configure\\nThe first thing to do is to declare <!-- sonarqube -->your SonarQube server<!-- /sonarqube --><!-- sonarcloud -->SonarCloud<!-- /sonarcloud --> as a service endpoint in your Azure DevOps project settings. \\n\\n1. Open the Connections page in your Azure DevOps project: **Project Settings > Pipelines > Service Connections**.\\n1. Click on **New service connection** and choose **{instance}**.\\n<!-- sonarqube -->\\n1. Specify a **Connection name**, the **Server URL** of your SonarQube Server (including the port if required) and the [Authentication Token](/user-guide/user-token/) to use.\\n<!-- /sonarqube -->\\n<!-- sonarcloud -->\\n1. Specify a **Connection name** and **SonarCloud token**. There is a link in the dialog that will take you to the account security page on SonarCloud where you can create a new token if necessary. There is also a button that lets you verify that connection is correctly configured.\\n<!-- /sonarcloud -->\\n\\nEach extension provides three tasks you will use in your build definitions to analyze your projects:\\n\\n* **Prepare Analysis Configuration** task, to configure all the required settings before executing the build. \\n   * This task is mandatory. \\n   * In case of .NET solutions or Java projects, it helps to integrate seamlessly with MSBuild, Maven and Gradle tasks.\\n* **Run Code Analysis** task, to actually execute the analysis of the source code. \\n   * This task is not required for Maven or Gradle projects, because scanner will be run as part of the Maven/Gradle build.\\n* **Publish Quality Gate Result** task, to display the Quality Gate status in the build summary and give you a sense of whether the application is ready for production \\\"quality-wise\\\". \\n   * This tasks is optional. \\n   * It can significantly increase the overall build time because it will poll {instance} until the analysis is complete. Omitting this task will not affect the analysis results on {instance} - it simply means the Azure DevOps Build Summary page will not show the status of the analysis or a link to the project dashboard on {instance}.\\n \\nWhen creating a build definition you can filter the list of available tasks by typing \\\"Sonar\\\" to display only the relevant tasks.\\n\\n## Analyzing a .NET solution\\n1. In your build definition, add:\\n   * At least **Prepare Analysis Configuration** task and **Run Code Analysis** task\\n   * Optionally **Publish Quality Gate Result** task\\n1. Reorder the tasks to respect the following order:\\n   * **Prepare Analysis Configuration** task before any **MSBuild** or **Visual Studio Build** tasks.\\n   * **Run Code Analysis** task after the **Visual Studio Test task**.\\n   * **Publish Quality Gate Result** task after the **Run Code Analysis** task\\n1. Click on the **Prepare Analysis Configuration** build step to configure it:\\n   * You must specify the service connection (i.e. {instance}) to use. You can:\\n      * select an existing endpoint from the drop down list\\n      * add a new endpoint\\n      * manage existing endpoints\\n      <!-- sonarcloud -->* specify which **SonarCloud Organization** to use by choosing an organization from the drop-down<!-- /sonarcloud -->\\n   * Keep **Integrate with MSBuild** checked and specify at least the project key\\n      * **Project Key** - the unique project key in {instance}\\n      * **Project Name** - the name of the project in {instance}\\n      * **Project Version** - the version of the project in {instance}\\n1. Click the **Visual Studio Test** task and check the **Code Coverage Enabled** checkbox to process the code coverage and have it imported into {instance}. (Optional but recommended)\\n\\nOnce all this is done, you can trigger a build.\\n\\n## Analyzing a Java project with Maven or Gradle\\n1. In your build definition, add:\\n   * At least **Prepare Analysis Configuration** task\\n   * Optionally **Publish Quality Gate Result** task\\n1. Reorder the tasks to respect the following order:\\n   * **Prepare Analysis Configuration** task before the **Maven** or **Gradle** task.\\n   * **Publish Quality Gate Result** task after the **Maven** or **Gradle** task.\\n1. Click on the **Prepare Analysis Configuration** task to configure it:\\n   * Select the **SonarQube Server**\\n   * Select **Integrate with Maven or Gradle**\\n1. On the Maven or Gradle task, in **Code Analysis**, check **Run SonarQube or SonarCloud Analysis**\\n\\nOnce all this is done, you can trigger a build.\\n\\n## Analyzing a Visual C++ project\\n1. Make **SonarQube Build Wrapper** available on the build agent\\n   * Download and unzip **SonarQube Build Wrapper** on the build agent (see *Prerequisites* section of *C/C++/Objective-C* page). For the Microsoft-hosted build agent you will need to do it every time (as part of build definition), e.g. you can add **PowerShell script** task doing that. For the self-hosted build agent you can do the same either every build or only once (as part of manual setup of build agent). Example of PowerShell commands:\\n   ```\\n   Invoke-WebRequest -Uri '<sonarqube or sonarcloud url>/static/cpp/build-wrapper-win-x86.zip' -OutFile 'build-wrapper.zip'\\n   Expand-Archive -Path 'build-wrapper.zip' -DestinationPath '.'\\n   ```\\n1. In your build definition, add:\\n   * At least **Prepare Analysis Configuration** task, **Run Code Analysis** task and the **Command Line** task\\n   * Optionally **Publish Quality Gate Result** task\\n1. Reorder the tasks to respect the following order:\\n   * **Prepare Analysis Configuration** task before **Command Line** task.\\n   * **Run Code Analysis** task after the **Command Line** task.\\n   * **Publish Quality Gate Result** task after the **Run Code Analysis** task\\n1. On the **Command Line** task\\n   * Run **SonarQube Build Wrapper** executable. Pass in as the arguments (1) the output directory to which the Build Wrapper should write its results and (2) the command that runs the compilation of your project, e.g.\\n   ```\\n   path/to/build-wrapper-win-x86-64.exe --out-dir <output directory> MSBuild.exe /t:Rebuild\\n   ```\\n1. Click on the **Prepare Analysis Configuration** task to configure it:\\n   * Select the **SonarQube Server**\\n   * In *Additional Properties* in the *Advanced* section, add the property `sonar.cfamily.build-wrapper-output` with the value of the directory you specified: `sonar.cfamily.build-wrapper-output=<output directory>`\\n\\nOnce all this is done, you can trigger a build.\\n\\n## Analysing other project types\\nIf you are not developing a .NET application or a Java project, here is the standard way to trigger an analysis:\\n\\n1. In your build definition, add:\\n   * At least **Prepare Analysis Configuration** task and **Run Code Analysis** task\\n   * Optionaly **Publish Quality Gate Result** task\\n1. Reorder the tasks to respect the following order:\\n   1. **Prepare Analysis Configuration**\\n   2. **Run Code Analysis**\\n   3. **Publish Quality Gate Result**\\n1. Click on the **Prepare Analysis Configuration** task to configure it:\\n   * Select the **SonarQube Server**\\n   * Select **Use standalone scanner**\\n   * Then:\\n      * Either the SonarQube properties are stored in the (standard) `sonar-project.properties` file in your SCM, and you just have to make sure that \\\"Settings File\\\" correctly points at it. This is the recommended way.\\n      * Or you don't have such a file in your SCM, and you can click on **Manually provide configuration** to specify it within your build definition. This is not recommended because it's less portable.\\n\\nOnce all this is done, you can trigger a build.\\n\\n## Branch and Pull Request analysis\\n<!-- sonarqube -->\\n_Branch and Pull Request analysis are available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)_\\n<!-- /sonarqube -->\\n\\n### Branches\\nWhen a build is run on a branch of your project, the extension automatically configures the analysis to be pushed to the relevant project branch in {instance}. The same build definition can apply to all your branches, whatever type of Git repository you are analyzing,\\n\\nIf you are working with branches on TFVC projects, you still need to manually specify the branch to be used on {instance}: in the **Prepare Analysis Configuration** task, in the **Additional Properties**, you need to set `sonar.branch.name`.\\n\\n### PRs\\n{instance} can analyze the code of the new features and annotate your pull requests in TFS with comments to highlight issues that were found.\\n\\nPull request analysis is supported for any type of Git repositories. To activate it:\\n\\n1. In the **Branch policies** page of your main development branches (e.g. \\\"master\\\"), add a build policy that runs your build definition\\n1. Create an Azure DevOps token with \\\"Code (read and write)\\\" scope\\n1. <!-- sonarqube -->In SonarQube, in the **[Administration > General Settings > Pull Requests](/#sonarqube-admin#/admin/settings?category=pull_request)** page,<!-- /sonarqube --><!-- sonarcloud -->In SonarCloud,<!-- /sonarcloud --> set this token in the **VSTS/TFS** section\\n\\nNext time some code is pushed in the branch of a pull request, the build definition will execute a scan on the code and publish the results in {instance} which will decorate the pull request in TFS.\\n\\n\\n\\n## FAQ\\n**Is it possible to trigger analyses on Linux or macOS agents?**  \\nThis becomes possible from version <!-- sonarqube -->4.0 of the SonarQube task<!-- /sonarqube --><!-- sonarcloud -->1.0 of the SonarCloud extension<!-- /sonarcloud -->, in which the extension was fully rewritten in Node.js. The mono dependency was dropped in version <!-- sonarqube -->4.3<!-- /sonarqube --><!-- sonarcloud -->1.3<!-- /sonarcloud -->.\\n\\nThis is not possible with previous versions of the extension.\\n\\n**How do I break the build based on the quality gate status?**  \\nThis is not possible with the new version of the extension if you are using the most up-to-date versions of the tasks. We believe that breaking a CI build is not the right approach. Instead, we are providing pull request decoration (to make sure that issues aren't introduced at merge time) and we'll soon add a way to check the quality gate as part of a Release process.\\n\"},{\"path\":\"analysis/scan/sonarscanner-for-gradle\",\"content\":\"---\\ntitle: SonarScanner for Gradle\\nurl: /analysis/scan/sonarscanner-for-gradle/\\n---\\n\\n[[info]]\\n| By [SonarSource](https://www.sonarsource.com/) – GNU LGPL 3 – [Issue Tracker](https://jira.sonarsource.com/browse/SONARGRADL) – [Source](https://github.com/SonarSource/sonar-scanner-gradle)  \\n| Click [here](https://plugins.gradle.org/plugin/org.sonarqube) for the latest version.\\n\\n\\n\\nThe SonarScanner for Gradle provides an easy way to start SonarQube analysis of a Gradle project.\\n\\nThe ability to execute the SonarQube analysis via a regular Gradle task makes it available anywhere Gradle is available (developer build, CI server, etc.), without the need to manually download, setup, and maintain a SonarQube Runner installation. The Gradle build already has much of the information needed for SonarQube to successfully analyze a project. By preconfiguring the analysis based on that information, the need for manual configuration is reduced significantly. \\n\\n## Prerequisites\\n* Gradle versions 2.14+\\n* At least the minimal version of Java supported by your SonarQube server is in use \\n\\nBytecode created by javac compilation is required for Java analysis, including Android projects.\\n\\n## Configure the Scanner\\nInstallation is automatic, but certain global properties should still be configured. A good place to configure global properties is `~/.gradle/gradle.properties`. Be aware that the scanner uses system properties so all properties should be prefixed by `systemProp`.\\n\\n```\\n# gradle.properties\\nsystemProp.sonar.host.url=http://localhost:9000\\n \\n#----- Token generated from an account with 'publish analysis' permission\\nsystemProp.sonar.login=<token>\\n```\\n\\n## Analyzing\\nFirst, activate the scanner in your build. For Gradle 2.1+, in `build.gradle`:\\n```\\nplugins {\\n  id \\\"org.sonarqube\\\" version \\\"2.7\\\"\\n}\\n```\\nMore details on https://plugins.gradle.org/plugin/org.sonarqube\\n\\nAssuming a local SonarQube server with out-of-the-box settings is up and running, no further configuration is required.\\n\\nExecute `gradle sonarqube` and wait until the build has completed, then open the web page indicated at the bottom of the console output. You should now be able to browse the analysis results.\\n\\n## Analyzing Multi-Project Builds\\nTo analyze a project hierarchy, apply the SonarQube plugin to the root project of the hierarchy. Typically (but not necessarily) this will be the root project of the Gradle build. Information pertaining to the analysis as a whole has to be configured in the sonarqube block of this project. Any properties set on the command line also apply to this project.\\n\\n```\\n// build.gradle\\nsonarqube {\\n    properties {\\n        property \\\"sonar.sourceEncoding\\\", \\\"UTF-8\\\"\\n    }\\n}\\n```\\n\\nConfiguration shared between subprojects can be configured in a subprojects block.\\n```\\n// build.gradle\\nsubprojects {\\n    sonarqube {\\n        properties {\\n            property \\\"sonar.sources\\\", \\\"src\\\"\\n        }\\n    }\\n}\\n```\\n\\nProject-specific information is configured in the `sonarqube` block of the corresponding project.\\n```\\n// build.gradle\\nproject(\\\":project1\\\") {\\n    sonarqube {\\n        properties {\\n            property \\\"sonar.branch\\\", \\\"Foo\\\"\\n        }\\n    }}\\n```\\n\\nTo skip SonarQube analysis for a particular subproject, set sonarqube.skipProject to true.\\n```\\n// build.gradle\\nproject(\\\":project2\\\") {\\n    sonarqube {\\n        skipProject = true\\n    }\\n}\\n```\\n\\n## Task dependencies\\nAll tasks that produce output that should be included in the SonarQube analysis need to be executed before the `sonarqube` task runs. Typically, these are compile tasks, test tasks, and code coverage tasks. To meet these needs, the plugins adds a task dependency from `sonarqube` on `test` if the Java plugin is applied. Further task dependencies can be added as needed. For example:\\n```\\n// build.gradle\\nproject.tasks[\\\"sonarqube\\\"].dependsOn \\\"anotherTask\\\"\\n```\\n\\n## Sample project\\n\\nA simple working example is available at this URL so you can check everything is correctly configured in your env:  \\nhttps://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-gradle\\n\\n\\n## Analysis property defaults\\nThe SonarScanner for Gradle uses information contained in Gradle's object model to provide smart defaults for most of the standard [analysis parameters](/analysis/analysis-parameters/), as listed below.\\n\\nGradle defaults for standard SonarQube properties: \\n\\nProperty|Gradle default\\n---|---\\n`sonar.projectKey`|`[${project.group}:]${project.name}` for root module; `<root module key>:<module path>` for submodules \\n`sonar.projectName`|`${project.name}`\\n`sonar.projectDescription`|`${project.description}`\\n`sonar.projectVersion`|`${project.version}`\\n`sonar.projectBaseDir`|`${project.projectDir}`\\n`sonar.working.directory`|`${project.buildDir}/sonar`\\n\\nNotice that additional defaults are provided for projects that have the java-base or java plugin applied:\\n\\nProperty|Gradle default\\n---|---\\n`sonar.sourceEncoding`|`${project.compileJava.options.encoding}`\\n`sonar.java.source`|`${project.sourceCompatibility}`\\n`sonar.java.target`|`${project.targetCompatibility}`\\n`sonar.sources`|`${sourceSets.main.allSource.srcDirs}` (filtered to only include existing directories)\\n`sonar.tests`|`${sourceSets.test.allSource.srcDirs}` (filtered to only include existing directories)\\n`sonar.java.binaries`|`${sourceSets.main.output.classesDir}`\\n`sonar.java.libraries`|`${sourceSets.main.compileClasspath}` (filtering to only include files; rt.jar and jfxrt.jar added if necessary)\\n`sonar.java.test.binaries`|`${sourceSets.test.output.classeDir}`\\n`sonar.java.test.libraries`|`${sourceSets.test.compileClasspath}` (filtering to only include files; rt.jar and jfxrt.jar added if necessary)\\n`sonar.junit.reportPaths`|`${test.testResultsDir}` (if the directory exists)\\n\\nGroovy projects get all the Java defaults, plus:\\n\\nProperty|Gradle default\\n---|---\\n`sonar.groovy.binaries`|`${sourceSets.main.output.classesDir}`\\n\\n\\nAdditional defaults when JaCoCo plugin is applied\\n\\nProperty|Gradle default\\n---|---\\n`sonar.jacoco.reportPaths`|`${jacoco.destinationFile}`\\n`sonar.groovy.jacoco.reportPath`|`${jacoco.destinationFile}`\\n\\nAdditional defaults for Android projects (`com.android.application`, `com.android.library`, or `com.android.test`)\\nBy default the first variant of type \\\"debug\\\" will be used to configure the analysis. You can override the name of the variant to be used using the parameter 'androidVariant':\\n \\n```\\nbuild.gradle\\nsonarqube {\\n    androidVariant 'fullDebug'\\n}\\n```\\n\\nProperty|\\tGradle default\\n---|---\\n`sonar.sources` (for non test variants)|`${variant.sourcesets.map}` (ManifestFile/CDirectories/AidlDirectories/AssetsDirectories/CppDirectories/JavaDirectories/RenderscriptDirectories/ResDirectories/ResourcesDirectories)\\n`sonar.tests` (for test variants)|`${variant.sourcesets.map}` (ManifestFile/CDirectories/AidlDirectories/AssetsDirectories/CppDirectories/JavaDirectories/RenderscriptDirectories/ResDirectories/ResourcesDirectories)\\n`sonar.java[.test].binaries`|`${variant.destinationDir}`\\n`sonar.java[.test].libraries`|`${variant.javaCompile.classpath} + ${bootclasspath}`\\n`sonar.java.source`|`${variant.javaCompile.sourceCompatibility}`\\n`sonar.java.target`|`${variant.javaCompile.targetCompatibility}`\\n\\n\\n## Passing manual properties / overriding defaults\\nThe SonarScanner for Gradle adds a SonarQubeExtension extension to project and its subprojects, which allows you to configure/override the analysis properties.\\n```\\n// in build.gradle\\nsonarqube {\\n    properties {\\n        property \\\"sonar.exclusions\\\", \\\"**/*Generated.java\\\"\\n    }\\n}\\n```\\nSonarQube properties can also be set from the command line, or by setting a system property named exactly like the SonarQube property in question. This can be useful when dealing with sensitive information (e.g. credentials), environment information, or for ad-hoc configuration.\\n \\n```\\ngradle sonarqube -Dsonar.host.url=http://sonar.mycompany.com -Dsonar.verbose=true\\n```\\n\\nWhile certainly useful at times, we recommend keeping the bulk of the configuration in a (versioned) build script, readily available to everyone.\\nA SonarQube property value set via a system property overrides any value set in a build script (for the same property). When analyzing a project hierarchy, values set via system properties apply to the root project of the analyzed hierarchy. Each system property starting with `sonar.` will be taken into account.\\n\\n\\n\\n### Analyzing Custom Source Sets\\nBy default, the SonarScanner for Gradle passes on the project's main source set as production sources, and the project's test source set as test sources. This works regardless of the project's source directory layout. Additional source sets can be added as needed.\\n\\n```\\n// build.gradle\\nsonarqube {\\n    properties {\\n        properties[\\\"sonar.sources\\\"] += sourceSets.custom.allSource.srcDirs\\n        properties[\\\"sonar.tests\\\"] += sourceSets.integTest.allSource.srcDirs\\n    }\\n}\\n```\\n\\n## Advanced topics\\n### More on configuring SonarQube properties\\nLet's take a closer look at the `sonarqube.properties` `{}` block. As we have already seen in the examples, the `property()` method allows you to set new properties or override existing ones. Furthermore, all properties that have been configured up to this point, including all properties preconfigured by Gradle, are available via the properties accessor.\\n\\nEntries in the properties map can be read and written with the usual Groovy syntax. To facilitate their manipulation, values still have their “idiomatic” type (File, List, etc.). After the sonarProperties block has been evaluated, values are converted to Strings as follows: Collection values are (recursively) converted to comma-separated Strings, and all other values are converted by calling their `toString()` methods.\\n\\nBecause the `sonarProperties` block is evaluated lazily, properties of Gradle's object model can be safely referenced from within the block, without having to fear that they have not yet been set.\\n\\n\"},{\"path\":\"analysis/scan/sonarscanner-for-jenkins\",\"content\":\"---\\ntitle: SonarScanner for Jenkins\\nurl: /analysis/scan/sonarscanner-for-jenkins/\\n---\\n\\n[[info]]\\n| By [SonarSource](https://www.sonarsource.com/) – GNU LGPL 3 – [Issue Tracker](https://jira.sonarsource.com/browse/SONARJNKNS) – [Source](https://github.com/SonarSource/sonar-scanner-jenkins)  \\n| Click [here](https://plugins.jenkins.io/sonar) for the latest version.\\n\\nThis plugin lets you centralize the configuration of SonarQube server connection details in Jenkins global configuration.\\n\\nThen you can trigger SonarQube analysis from Jenkins using standard Jenkins Build Steps or [Jenkins Pipeline DSL](https://jenkins.io/solutions/pipeline/) to trigger analysis with:\\n\\n* [SonarScanner](/analysis/scan/sonarscanner/)\\n* [SonarScanner for Maven](/analysis/scan/sonarscanner-for-maven/)\\n* [SonarScanner for Gradle](/analysis/scan/sonarscanner-for-gradle/)\\n* [SonarScanner for MSBuild](/analysis/scan/sonarscanner-for-msbuild/)\\n\\nOnce the job is complete, the plugin will detect that a SonarQube analysis was made during the build and display a badge and a widget on the job page with a link to the SonarQube dashboard as well as quality gate status.\\n\\n## Installation\\n1. [Install the SonarScanner for Jenkins via the Jenkins Update Center](https://plugins.jenkins.io/sonar).\\n1. Configure your SonarQube server(s)\\n   * Log into Jenkins as an administrator and go to Manage Jenkins > Configure System\\n   * Scroll down to the SonarQube configuration section, click on Add SonarQube, and add the values you're prompted for.\\n   * The server authentication token should be created as a 'Secret Text' credential\\n\\n## Analyzing a .NET solution\\n**Global Configuration**  \\nThis step is mandatory if you want to trigger any of your analyses with the SonarScanner for MSBuild. You can define as many scanner instances as you wish. Then for each Jenkins job, you will be able to choose with which launcher to use to run the SonarQube analysis.\\n1. Log into Jenkins as an administrator and go to **Manage Jenkins > Global Tool Configuration**\\n1. Click on **Add SonarScanner for MSBuild**\\n1. Add an installation of the latest available version. Check **Install automatically** to have the SonarScanner for MSBuild automatically provisioned on your Jenkins executors\\n\\nIf you do not see any available version under Install from GitHub, first go to Manage Jenkins > Manage Plugins > Advanced and click on Check now\\n\\n**Job Configuration**  \\n1. Configure the project, and go to the **Build** section.\\n1. Add the SonarQube for MSBuild - Begin Analysis to your build\\n1. Configure the SonarQube Project Key, Name and Version in the SonarScanner for MSBuild - Begin Analysis build step\\n1. Add the MSBuild build step or the Execute Windows batch command to execute the build with MSBuild 14 (see compatibility) to your build.\\n1. Add the SonarQube for MSBuild - End Analysis build steps to your build\\n\\n## Analyzing a Java project with Maven or Gradle\\n** Global Configuration**  \\n1. Log into Jenkins as an administrator and go to Manage Jenkins > Configure System\\n1. Scroll to the SonarQube servers section and check Enable injection of SonarQube server configuration as build environment variables\\n\\n** Job Configuration**  \\n1. **Configure** the project, and go to the **Build Environment** section.\\n1. Enable **Prepare SonarScanner environment** to allow the injection of SonarQube server values into this particular job. If multiple SonarQube instances are configured, you will be able to choose which one to use.\\nOnce the environment variables are available, use them in a standard Maven build step (Invoke top-level Maven targets) by setting the Goals to include, or a standard Gradle build step (Invoke Gradle script) by setting the Tasks to execute.\\n\\nMaven goal:\\n```\\n$SONAR_MAVEN_GOAL\\n```\\nGradle task:\\n```\\nsonarqube\\n```\\n\\nIn both cases, launching your analysis may require authentication. In that case, make sure that the Global Configuration defines a valid SonarQube token.\\n\\n## Analyzing other project types\\n\\n**Global Configuration**  \\nThis step is mandatory if you want to trigger any of your SonarQube analyses with the SonarScanner. You can define as many scanner instances as you wish. Then for each Jenkins job, you will be able to choose with which launcher to use to run the SonarQube analysis.\\n\\n1. Log into Jenkins as an administrator and go to **Manage Jenkins > Global Tool Configuration**\\n1. Scroll down to the SonarScanner configuration section and click on Add SonarScanner. It is based on the typical Jenkins tool auto-installation. You can either choose to point to an already installed version of SonarScanner (uncheck 'Install automatically') or tell Jenkins to grab the installer from a remote location (check 'Install automatically')\\n\\nIf you don't see a drop down list with all available SonarScanner versions but instead see an empty text field then this is because Jenkins still hasn't downloaded the required update center file (default period is 1 day). You may force this refresh by clicking 'Check Now' button in Manage Plugins > Advanced tab.\\n\\n**Job Configuration**  \\n1. **Configure** the project, and go to the **Build** section. \\n1. Add the SonarScanner build step to your build.\\n1. Configure the SonarQube analysis properties. You can either point to an existing sonar-project.properties file or set the analysis properties directly in the **Analysis properties** field\\n\\n\\n\\n## Using a Jenkins pipeline\\nWe provide a `withSonarQubeEnv` block that allows you to select the SonarQube server you want to interact with. Connection details you have configured in Jenkins global configuration will be automatically passed to the scanner.\\n\\nIf needed you can override the `credentialId` if you don't want to use the one defined in global configuration (for example if you define credentials at folder level).\\n\\nHere are a some examples for every scanner, assuming you run on Unix slaves and you have configured a server named \\\"My SonarQube Server\\\" as well as required tools. If you run on Windows slaves, just replace `sh` with `bat`.\\n\\nSonarScanner:\\n```\\nnode {\\n  stage('SCM') {\\n    git 'https://github.com/foo/bar.git'\\n  }\\n  stage('SonarQube analysis') {\\n    def scannerHome = tool 'SonarScanner 4.0';\\n    withSonarQubeEnv('My SonarQube Server') { // If you have configured more than one global server connection, you can specify its name\\n      sh \\\"${scannerHome}/bin/sonar-scanner\\\"\\n    }\\n  }\\n}\\n```\\nSonarScanner for Gradle:\\n```\\nnode {\\n  stage('SCM') {\\n    git 'https://github.com/foo/bar.git'\\n  }\\n  stage('SonarQube analysis') {\\n    withSonarQubeEnv() { // Will pick the global server connection you have configured\\n      sh './gradlew sonarqube'\\n    }\\n  }\\n}\\n```\\nSonarScanner for Maven:\\n```\\nnode {\\n  stage('SCM') {\\n    git 'https://github.com/foo/bar.git'\\n  }\\n  stage('SonarQube analysis') {\\n    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used\\n      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar'\\n    }\\n  }\\n}\\n```\\nSonarScanner for MSBuild:\\n```\\nnode {\\n  stage('SCM') {\\n    git 'https://github.com/foo/bar.git'\\n  }\\n  stage('Build + SonarQube analysis') {\\n    def sqScannerMsBuildHome = tool 'Scanner for MSBuild 4.6'\\n    withSonarQubeEnv('My SonarQube Server') {\\n      bat \\\"${sqScannerMsBuildHome}\\\\\\\\SonarQube.Scanner.MSBuild.exe begin /k:myKey\\\"\\n      bat 'MSBuild.exe /t:Rebuild'\\n      bat \\\"${sqScannerMsBuildHome}\\\\\\\\SonarQube.Scanner.MSBuild.exe end\\\"\\n    }\\n  }\\n}\\n```\\n\\n## Pause pipeline until quality gate is computed\\nThe `waitForQualityGate` step will pause the pipeline until SonarQube analysis is completed and returns quality gate status.\\n\\n### Pre-requisites:\\n* Configure a webhook in your SonarQube server pointing to `<your Jenkins instance>/sonarqube-webhook/` \\n* Use `withSonarQubeEnv` step in your pipeline (so that SonarQube taskId is correctly attached to the pipeline context).\\n\\n\\nScripted pipeline example:\\n```\\nnode {\\n  stage('SCM') {\\n    git 'https://github.com/foo/bar.git'\\n  }\\n  stage('SonarQube analysis') {\\n    withSonarQubeEnv('My SonarQube Server') {\\n      sh 'mvn clean package sonar:sonar'\\n    } // submitted SonarQube taskId is automatically attached to the pipeline context\\n  }\\n}\\n  \\n// No need to occupy a node\\nstage(\\\"Quality Gate\\\"){\\n  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout\\n    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv\\n    if (qg.status != 'OK') {\\n      error \\\"Pipeline aborted due to quality gate failure: ${qg.status}\\\"\\n    }\\n  }\\n}\\n```\\nThanks to the webhook, the step is implemented in a very lightweight way: no need to occupy a node doing polling, and it doesn't prevent Jenkins to restart (step will be restored after restart). Note that to prevent race conditions, when the step starts (or is restarted) a direct call is made to the server to check if the task is already completed.\\n\\nDeclarative pipeline example:\\n```\\npipeline {\\n    agent any\\n    stages {\\n        stage('SCM') {\\n            steps {\\n                git url: 'https://github.com/foo/bar.git'\\n            }\\n        }\\n        stage('build && SonarQube analysis') {\\n            steps {\\n                withSonarQubeEnv('My SonarQube Server') {\\n                    // Optionally use a Maven environment you've configured already\\n                    withMaven(maven:'Maven 3.5') {\\n                        sh 'mvn clean package sonar:sonar'\\n                    }\\n                }\\n            }\\n        }\\n        stage(\\\"Quality Gate\\\") {\\n            steps {\\n                timeout(time: 1, unit: 'HOURS') {\\n                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails\\n                    // true = set pipeline to UNSTABLE, false = don't\\n                    waitForQualityGate abortPipeline: true\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\n\\nIf you want to run multiple analysis in the same pipeline and use waitForQualityGate you have to do everything in order:\\n```\\npipeline {\\n    agent any\\n    stages {\\n        stage('SonarQube analysis 1') {\\n            steps {\\n                sh 'mvn clean package sonar:sonar'\\n            }\\n        }\\n        stage(\\\"Quality Gate 1\\\") {\\n            steps {\\n                waitForQualityGate abortPipeline: true\\n            }\\n        }\\n        stage('SonarQube analysis 2') {\\n            steps {\\n                sh 'gradle sonarqube'\\n            }\\n        }\\n        stage(\\\"Quality Gate 2\\\") {\\n            steps {\\n                waitForQualityGate abortPipeline: true\\n            }\\n        }\\n    }\\n}\\n```\\n\"},{\"path\":\"analysis/scan/sonarscanner-for-maven\",\"content\":\"---\\ntitle: SonarScanner for Maven\\nurl: /analysis/scan/sonarscanner-for-maven/\\n---\\n\\n[[info]]\\n| By [SonarSource](https://www.sonarsource.com/) – GNU LGPL 3 – [Issue Tracker](https://jira.sonarsource.com/browse/MSONAR) – [Source](https://github.com/SonarSource/sonar-scanner-maven)  \\n| Click [here](https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin) for the latest version.\\n\\n\\nThe SonarScanner is recommended as the default analyzer for Maven projects.\\n\\nThe ability to execute the SonarQube analysis via a regular Maven goal makes it available anywhere Maven is available (developer build, CI server, etc.), without the need to manually download, setup, and maintain a SonarQube Runner installation. The Maven build already has much of the information needed for SonarQube to successfully analyze a project. By preconfiguring the analysis based on that information, the need for manual configuration is reduced significantly. \\n\\n\\n\\n## Prerequisites\\n* Maven 3.x\\n* At least the minimal version of Java supported by your SonarQube server is in use \\n\\n## Global Settings \\n\\nEdit the [settings.xml](http://maven.apache.org/settings.html) file, located in `$MAVEN_HOME/conf` or `~/.m2`, to set the plugin prefix and optionally the SonarQube server URL.\\n\\nExample:\\n```\\n<settings>\\n    <pluginGroups>\\n        <pluginGroup>org.sonarsource.scanner.maven</pluginGroup>\\n    </pluginGroups>\\n    <profiles>\\n        <profile>\\n            <id>sonar</id>\\n            <activation>\\n                <activeByDefault>true</activeByDefault>\\n            </activation>\\n            <properties>\\n                <!-- Optional URL to server. Default value is http://localhost:9000 -->\\n                <sonar.host.url>\\n                  http://myserver:9000\\n                </sonar.host.url>\\n            </properties>\\n        </profile>\\n     </profiles>\\n</settings>\\n```\\n\\n## Analyzing\\nAnalyzing a Maven project consists of running a Maven goal: `sonar:sonar` from the directory that holds the main project `pom.xml`.\\n```\\nmvn clean verify sonar:sonar\\n```\\n\\nIn some situations you may want to run the `sonar:sonar` goal as a dedicated step. Be sure to use `install` as first step for multi-module projects\\n```\\nmvn clean install\\nmvn sonar:sonar\\n```\\n\\nTo specify the version of sonar-maven-plugin instead of using the latest:\\n```\\nmvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar\\n```\\n\\nTo get coverage information, you'll need to generate the coverage report before the analysis. \\n\\n\\n\\n## Configuring Analysis\\nMost analysis properties will be read from your project. If you would like override the default values of specify additional parameters, configure the parameter names found on the [Analysis Parameters](/analysis/analysis-parameters/) page in the `<properties>` section of your pom.xml like this:\\n```\\n<properties>\\n  <sonar.buildString> [...] </sonar.buildString>\\n</properties>\\n ```\\n\\n\\n## Sample Project\\nTo help you get started, a simple project sample is available here: https://github.com/SonarSource/sonar-scanning-examples/tree/master/sonarqube-scanner-maven\\n\\n## Excluding a module from analysis\\n* define property `<sonar.skip>true</sonar.skip>` in the `pom.xml` of the module you want to exclude\\n* use build profiles to exclude some module (like for integration tests)\\n* use Advanced Reactor Options (such as \\\"-pl\\\"). For example `mvn sonar:sonar -pl !module2`\\n\\n## How to Fix Version of Maven Plugin\\nIt is recommended to lock down versions of Maven plugins:\\n```\\n<build>\\n  <pluginManagement>\\n    <plugins>\\n      <plugin>\\n        <groupId>org.sonarsource.scanner.maven</groupId>\\n        <artifactId>sonar-maven-plugin</artifactId>\\n        <version>3.6.0.1398</version>\\n      </plugin>\\n    </plugins>\\n  </pluginManagement>\\n</build>\\n```\\n\\n## Troubleshooting\\n**If you get a java.lang.OutOfMemoryError**  \\nSet the `MAVEN_OPTS` environment variable, like this in *nix environments:\\n```\\nexport MAVEN_OPTS=\\\"-Xmx512m\\\"\\n```\\nOn Windows environments, avoid the double-quotes, since they get misinterpreted.\\n```\\nset MAVEN_OPTS=-Xmx512m\\n```\\n\"},{\"path\":\"analysis/scan/sonarscanner-for-msbuild\",\"content\":\"---\\ntitle: SonarScanner for MSBuild\\nurl: /analysis/scan/sonarscanner-for-msbuild/\\n---\\n\\n[[info]]\\n| **Download SonarScanner for MSBuild 4.7.1.2311** - Compatible with SonarQube 6.7+ (LTS)  \\n| By [SonarSource](https://www.sonarsource.com/) – GNU LGPL 3 – [Issue Tracker](https://github.com/SonarSource/sonar-scanner-msbuild/issues) – [Source](https://github.com/SonarSource/sonar-scanner-msbuild)\\n|\\n| [.NET Framework 4.6+](https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.7.1.2311/sonar-scanner-msbuild-4.7.1.2311-net46.zip) |\\n| [.NET Core 2.0+](https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.7.1.2311/sonar-scanner-msbuild-4.7.1.2311-netcoreapp2.0.zip) |\\n| [.NET Core Global Tool](https://www.nuget.org/packages/dotnet-sonarscanner)\\n\\n\\nThe SonarScanner for MSBuild is the recommended way to launch an analysis for projects/solutions using MSBuild or dotnet command as a build tool. It is the result of a [collaboration between SonarSource and Microsoft](http://www.sonarqube.org/announcing-sonarqube-integration-with-msbuild-and-team-build/). \\n\\nSonarScanner for MSBuild is distributed as a standalone command line executable, as a extension for <!-- sonarcloud -->[Azure DevOps](/analysis/scan/sonarscanner-for-azure-devops/)<!-- /sonarcloud --><!-- sonarqube -->[Azure DevOps Server](/analysis/scan/sonarscanner-for-azure-devops/)<!-- /sonarqube -->, and as a plugin for [Jenkins](/analysis/scan/sonarscanner-for-jenkins/).\\n\\nIt supports .Net Core multi-platform projects and it can be used on non-Windows platforms.\\n\\n## Prerequisites\\n* At least the minimal version of Java supported by your SonarQube server\\n* The SDK corresponding to your build system:\\n   *  [.NET Framework v4.6+](https://www.microsoft.com/fr-fr/download/details.aspx?id=53344) - either [Build Tools for Visual Studio 2015 Update 3](https://go.microsoft.com/fwlink/?LinkId=615458) or the [Build Tools for Visual Studio 2017](https://www.visualstudio.com/downloads/)\\n   * .NET Core 2.0 - [.NET Core SDK 2.0](https://www.microsoft.com/net/learn/get-started/) (for .NET Core version of the scanner)\\n   * .NET Core 2.1 - [NET Core SDK 2.1.3](https://www.microsoft.com/net/learn/get-started/) (for .NET Core version of the scanner or if you plan to use [.NET Core Global Tool](https://www.nuget.org/packages/dotnet-sonarscanner)\\n\\n\\n## Installation\\n### SonarScanner for MSBuild for .NET Framework or .NET Core\\n* Expand the downloaded file into the directory of your choice. We'll refer to it as `$install_directory` in the next steps.\\n   * On Windows, you might need to unblock the ZIP file first (Right click on file > Properties > Unblock).\\n   * On Linux/OSX you may need to set execute permissions on the files in `$install_directory/sonar-scanner-(version)/bin`.\\n   \\n* Uncomment, and update the global settings to point to your SonarQube server by editing `$install_directory/SonarQube.Analysis.xml`. Values set in this file will be applied to all analyses of all projects unless overwritten locally.  \\nConsider setting file system permissions to restrict access to this file.:\\n```\\n<SonarQubeAnalysisProperties  xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns=\\\"http://www.sonarsource.com/msbuild/integration/2015/1\\\">\\n  <Property Name=\\\"sonar.host.url\\\">http://localhost:9000</Property>\\n  <Property Name=\\\"sonar.login\\\">[my-user-token]</Property>\\n</SonarQubeAnalysisProperties>\\n```\\n\\n* Add `$install_directory` to your PATH environment variable.\\n\\n### Installation of the SonarScanner for MSBuild .NET Core Global Tool\\n```\\ndotnet tool install --global dotnet-sonarscanner --version 4.7.1\\n```\\nThe _--version_ argument is optional. If it is omitted the latest version will be installed.\\n\\n### On Linux/OSX, if your SonarQube server is secured:\\n\\n1. Copy the server's CA certs to `/usr/local/share/ca-certificates`\\n2. Run `sudo update-ca-certificates`\\n\\n## Use\\nThere are two versions of the SonarScanner for MSBuild.\\n\\n[[info]]\\n| Since version 4.7.0 of the Scanner, you can invoke it using arguments with both dash (-) or forward-slash (/) separators.\\n| Example : SonarScanner.MSBuild.exe begin /k:\\\"project-key\\\" or SonarScanner.MSBuild.exe begin -k:\\\"project-key\\\" will work.\\n\\nThe first version is based on the “classic” .NET Framework. To use it, execute the following commands from the root folder of your project:\\n```\\nSonarScanner.MSBuild.exe begin /k:\\\"project-key\\\" <!-- sonarcloud -->/d:sonar.organization=\\\"<organization>\\\" /d:sonar.login=\\\"<token>\\\" <!-- /sonarcloud -->\\nMSBuild.exe <path to solution.sln> /t:Rebuild\\nSonarScanner.MSBuild.exe end <!-- sonarcloud -->/d:sonar.login=\\\"<token>\\\" <!-- /sonarcloud -->\\n```\\nNote: On Mac OS or Linux, you can also use `mono <path to SonarScanner.MSBuild.exe>`.\\n\\n\\nThe second version is based on .NET Core which has a very similar usage:\\n```\\ndotnet <path to SonarScanner.MSBuild.dll> begin /k:\\\"project-key\\\" <!-- sonarcloud -->/d:sonar.organization=\\\"<organization>\\\" /d:sonar.login=\\\"<token>\\\" <!-- /sonarcloud -->\\ndotnet build <path to solution.sln>\\ndotnet <path to SonarScanner.MSBuild.dll> end <!-- sonarcloud -->/d:sonar.login=\\\"<token>\\\" <!-- /sonarcloud -->\\n```\\nThe .NET Core version can also be used as a .NET Core Global Tool.\\nAfter installing the Scanner as a global tool as described above it can be invoked as follows:\\n```\\ndotnet sonarscanner begin /k:\\\"project-key\\\" <!-- sonarcloud -->/d:sonar.organization=\\\"<organization>\\\" /d:sonar.login=\\\"<token>\\\" <!-- /sonarcloud -->\\ndotnet build <path to solution.sln>\\ndotnet sonarscanner end <!-- sonarcloud -->/d:sonar.login=\\\"<token>\\\" <!-- /sonarcloud -->\\n```\\n\\nSame as above, if you are targeting a SonarCloud project, will have to add both the organization and a login for authentication.\\n\\nNotes:\\n\\n* The .NET Core version of the scanner does not support TFS XAML builds. Apart from that, the two versions of scanner have the same capabilities and command line arguments.\\n* Single .NET Core project files (csproj or vbproj) could be built and successfully analyzed only if a `<ProjectGuid>unique guid</ProjectGuid>` element is added in the csproj or vbproj XML. The `<ProjectGuid>` element is not required if you build a solution (sln) containing that project.\\n\\n## Analysis steps\\n### Begin\\nThe begin step is executed when you add the `begin` command line argument. It hooks into the MSBuild pipeline, downloads SonarQube quality profiles and settings and prepares your project for the analysis.\\n\\nCommand Line Parameters:\\n\\nParameter|Description\\n---|---\\n`/k:<project-key>`|[required] Specifies the key of the analyzed project in SonarQube\\n`/n:<project name>`|[optional] Specifies the name of the analyzed project in SonarQube. Adding this argument will overwrite the project name in SonarQube if it already exists.\\n`/v:<version>`|[recommended] Specifies the version of your project.\\n`/d:sonar.login=<username> or <token>`| [optional] Specifies the username or access token to authenticate with to SonarQube. If this argument is added to the begin step, it must also be added on the end step.\\n`/d:sonar.password=<password>`|[optional] Specifies the password for the SonarQube username in the `sonar.login` argument. This argument is not needed if you use authentication token. If this argument is added to the begin step, it must also be added on the end step.\\n`/d:sonar.verbose=true`|[optional] Sets the logging verbosity to detailed. Add this argument before sending logs for troubleshooting.\\n`/d:<analysis-parameter>=<value>`|[optional] Specifies an additional SonarQube [analysis parameter](/analysis/analysis-parameters/), you can add this argument multiple times. \\n\\nFor detailed information about all available parameters, see [Analysis Parameters](/analysis/analysis-parameters/).\\n\\n[[warning]]\\n| ![](/images/exclamation.svg) The \\\"begin\\\" step will modify your build like this:\\n| * the active `CodeAnalysisRuleSet` will be updated to match the SonarQube quality profile\\n| * `WarningsAsErrors` will be turned off\\n|\\n| If your build process cannot tolerate these changes we recommend creating a second build job for SonarQube analysis.\\n\\n### Build\\nBetween the `begin` and `end` steps, you need to build your project, execute tests and generate code coverage data. This part is specific to your needs and it is not detailed here.\\n\\n### End\\nThe end step is executed when you add the \\\"end\\\" command line argument. It cleans the MSBuild hooks, collects the analysis data generated by the build, the test results, the code coverage and then uploads everything to SonarQube.\\n\\nThere are only two additional arguments that are allowed for the end step:\\n\\nParameter|Description\\n---|---\\n`/d:sonar.login=<username> or <token>`|[optional] This argument is required if it was added to the begin step.\\n`/d:sonar.password=<password>`|[optional] This argument is required if it was added to the begin step and you are not using an authentication token.\\n\\n### Known Limitations\\n* MSBuild versions older than 14 are not supported.\\n* Web Application projects are supported. Legacy Web Site projects are not. \\n* Projects targeting multiple frameworks and using preprocessor directives could have slightly inaccurate metrics (lines of code, complexity, etc.) because the metrics are calculated only from the first of the built targets.\\n\\n\\n## Excluding projects from analysis\\nSome project types, such as [Microsoft Fakes](https://msdn.microsoft.com/en-us/library/hh549175.aspx), are automatically excluded from analysis. To manually exclude a different type of project from the analysis, place the following in its .xxproj file.\\n```\\n<!-- in .csproj -->\\n<PropertyGroup>\\n  <!-- Exclude the project from analysis -->\\n  <SonarQubeExclude>true</SonarQubeExclude>\\n</PropertyGroup>\\n```\\n\\n## Advanced topics\\n**Analyzing MSBuild 12 projects with MSBuild 14**  \\nThe Sonar Scanner for MSBuild requires your project to be built with MSBuild 14.0. We recommend installing Visual Studio 2015 update 3 or later on the analysis machine in order to benefit from the integration and features provided with the Visual Studio ecosystem (VSTest, MSTest unit tests, etc.).\\n\\nProjects targeting older versions of the .NET Framework can be built using MSBuild 14.0 by setting the \\\"TargetFrameworkVersion\\\" MSBuild property as documented by Microsoft:\\n\\n* [How to: Target a Version of the .NET Framework](https://msdn.microsoft.com/en-us/library/bb398202.aspx)\\n* [MSBuild Target Framework and Target Platform](https://msdn.microsoft.com/en-us/library/hh264221.aspx)\\n\\nIf you do not want to switch your production build to MSBuild 14.0, you can set up a separate build dedicated to the SonarQube analysis.\\n\\n**Detection of Test Projects**  \\nSonarQube analyzes test projects differently from non-test projects, so it is important to correctly classify test projects.\\n\\nBy default, the SonarQube Scanner for MSBuild will detect as test project:\\n\\n. MSTest unit test projects, thanks to the presence of a well-known project type GUID in .csproj file of such projects.\\n1. Projects with names ending in \\\"Test\\\" or \\\"Tests\\\". This behavior can be changed by providing the parameter `sonar.msbuild.testProjectPattern` to the begin step (regex follows .NET Regular Expression in a case-sensitive way with the default value `.*Tests?\\\\.(cs|vb)proj$`). This regex is applied against the fullname of the `.csproj` or `.vbproj` which is why it's recommended to keep at the end of your custom regex `\\\\.(cs|vb)proj$`.\\nTo manually classify a project as a test project, mark it with `<SonarQubeTestProject>true</SonarQubeTestProject>`:\\n```\\n<!-- in .csproj -->\\n<PropertyGroup>\\n  <!-- Mark the project as being a test project -->\\n  <SonarQubeTestProject>true</SonarQubeTestProject>\\n</PropertyGroup>\\n```\\n\\n**Per-project analysis parameters**\\nSome analysis parameters can be set for a single MSBuild project by adding them to its .csproj file.\\n```\\n<!-- in .csproj -->\\n<ItemGroup>\\n  <SonarQubeSetting Include=\\\"sonar.stylecop.projectFilePath\\\">\\n    <Value>$(MSBuildProjectFullPath)</Value>\\n  </SonarQubeSetting>\\n</ItemGroup>\\n```\\n\\n**Concurrent Analyses on the Same Build Machine**  \\nConcurrent analyses (i.e. parallel analysis of two solutions on the same build machine using a unique service account) are not supported by default by the Scanner for MSBuild. You can enable it as follows:\\n\\n1. Locate the folder containing the Scanner for MSBuild\\n1. Go in the `Targets` folder and copy the folder `SonarQube.Integration.ImportBefore.targets`\\n1. Paste it under your build tool global `ImportBefore` folder (if the folder doesn't exist, create it).\\n   * For MSBuild, the path is `<MSBUILD_INSTALL_DIR>\\\\<Version>\\\\Microsoft.Common.targets\\\\ImportBefore` where <MSBUILD_INSTALL_DIR> is:\\n      *For v14, default path is: `C:\\\\Program Files (x86)\\\\MSBuild\\\\14.0\\\\Microsoft.Common.Targets\\\\ImportBefore`\\n      * For v15, default path is: `C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Community\\\\MSBuild\\\\15.0\\\\Microsoft.Common.targets\\\\ImportBefore` (for VS Community Edition)\\n      * For v16, default path is: `C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Enterprise\\\\MSBuild\\\\Current\\\\Microsoft.Common.targets` (for VS Community Edition)\\n   * For dotnet, the path is `<DOTNET_SDK_INSTALL_DIR>\\\\15.0\\\\Microsoft.Common.targets\\\\ImportBefore` where `<DOTNET_SDK_INSTALL_DIR>` can be found using the `dotnet --info` and looking for the Base Path property.\\n\\nThe performance impact of this global installation for projects that aren't analyzed is negligible as this target is only a bootstrapper and will bail out nearly instantaneously when the `.sonarqube` folder is not found under the folder being built.\\n\\n**Using SonarScanner for MSBuild with a Proxy**  \\nOn build machines that connect to the Internet through a proxy server you might experience difficulties connecting to {instance}. To instruct the Java VM to use the system proxy settings, you need to set the following environment variable before running the SonarScanner for MSBuild:\\n```\\nSONAR_SCANNER_OPTS = \\\"-Djava.net.useSystemProxies=true\\\"\\n```\\nTo instruct the Java VM to use specific proxy settings or when there is no system-wide configuration use the following value:\\n```\\nSONAR_SCANNER_OPTS = \\\"-Dhttp.proxyHost=yourProxyHost -Dhttp.proxyPort=yourProxyPort\\\"\\n```\\nWhere _yourProxyHost_ and _yourProxyPort_ are the hostname and the port of your proxy server. There are additional proxy settings for https, authentication and exclusions that could be passed to the Java VM. For more information see the following article: https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html\\n\"},{\"path\":\"analysis/scan/sonarscanner\",\"content\":\"---\\ntitle: SonarScanner\\nurl: /analysis/scan/sonarscanner/\\n---\\n\\n[[info]]\\n| **Download SonarScanner 4.2** - Compatible with SonarQube 6.7+ (LTS)\\n| By [SonarSource](https://www.sonarsource.com/) – GNU LGPL 3 – [Issue Tracker](https://jira.sonarsource.com/browse/SQSCANNER) – [Source](https://github.com/Sonarsource/sonar-scanner-cli)   \\n|\\n| [Linux 64-bit](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip) |\\n| [Windowx 64-bit](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-windows.zip) |\\n| [Mac OS X 64-bit](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-macosx.zip) |\\n| [Any*](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip)\\n| *Requires a pre-installed JVM - with the same requirements as the SonarQube server.\\n\\nThe SonarScanner is the scanner to use when there is no specific scanner for your build system.\\n\\n## Installation\\n* Expand the downloaded file into the directory of your choice. We'll refer to it as `$install_directory` in the next steps.\\n* Update the global settings to point to your SonarQube server by editing `$install_directory/conf/sonar-scanner.properties`:\\n```\\n#----- Default SonarQube server\\n#sonar.host.url=http://localhost:9000\\n```\\n* Add the `$install_directory/bin` directory to your path.\\n* Verify your installation by opening a new shell and executing the command `sonar-scanner -h` (`sonar-scanner.bat -h` on Windows). You should get output like this:\\n\\n   ```\\n   usage: sonar-scanner [options]\\n  \\n   Options:\\n     -D,--define <arg>     Define property\\n     -h,--help             Display help information\\n     -v,--version          Display version information\\n     -X,--debug            Produce execution debug output\\n   ```\\n\\nIf you need more debug information you can add one of the following to your command line: `-X`, `--verbose`, or `-Dsonar.verbose=true`.\\n\\n## Use\\nCreate a configuration file in the root directory of the project: `sonar-project.properties`\\n```\\nsonar-project.properties\\n# must be unique in a given SonarQube instance\\nsonar.projectKey=my:project\\n\\n# --- optional properties ---\\n\\n# defaults to project key\\n#sonar.projectName=My project\\n# defaults to 'not provided'\\n#sonar.projectVersion=1.0\\n \\n# Path is relative to the sonar-project.properties file. Defaults to .\\n#sonar.sources=.\\n \\n# Encoding of the source code. Default is default system encoding\\n#sonar.sourceEncoding=UTF-8\\n```\\nRun the following command from the project base directory to launch the analysis:  \\n`sonar-scanner`\\n\\n## Sample Projects\\nTo help you get started, simple project samples are available for most languages on github. They can be [browsed](https://github.com/SonarSource/sonar-scanning-examples) or [downloaded](https://github.com/SonarSource/sonar-scanning-examples/archive/master.zip). You'll find them filed under sonarqube-scanner/src.\\n\\n\\n## Alternatives to sonar-project.properties\\nIf a sonar-project.properties file cannot be created in the root directory of the project, there are several alternatives:\\n\\n* The properties can be specified directly through the command line. Ex:\\n```\\nsonar-scanner -Dsonar.projectKey=myproject -Dsonar.sources=src1\\n```\\n* The property project.settings can be used to specify the path to the project configuration file (this option is incompatible with the `sonar.projectBaseDir` property). Ex:\\n```\\nsonar-scanner -Dproject.settings=../myproject.properties\\n```\\n* The root folder of the project to analyze can be set through the `sonar.projectBaseDir` property since SonarScanner 2.4. This folder must contain a `sonar-project.properties` file if `sonar.projectKey` is not specified on the command line.\\nAdditional analysis parameters can be defined in this project configuration file or through command-line parameters. \\n\\n## Alternate Analysis Directory\\nIf the files to be analyzed are not in the directory where the analysis starts from, use the `sonar.projectBaseDir` property to move analysis to a different directory. E.G. analysis begins from `jenkins/jobs/myjob/workspace` but the files to be analyzed are in `ftpdrop/cobol/project1`.\\n```\\nsonar-project.properties\\nsonar.projectBaseDir=/home/ftpdrop/cobol/project1\\nsonar.sources=src\\nsonar.cobol.copy.directories=/copy\\nFor more, see the listing of analysis parameters.\\n```\\n\\n\\n## Troubleshooting\\n**Java heap space error or java.lang.OutOfMemoryError**  \\nIncrease the memory via the `SONAR_SCANNER_OPTS` environment variable:\\n```\\nexport SONAR_SCANNER_OPTS=\\\"-Xmx512m\\\"\\n```\\nOn Windows environments, avoid the double-quotes, since they get misinterpreted and combine the two parameters into a single one.\\n```\\nset SONAR_SCANNER_OPTS=-Xmx512m\\n```\\n\\n**Unsupported major.minor version**  \\nUpgrade the version of Java being used for analysis or use one of the native package (that embed its own Java runtime).\\n\\n**Property missing: `sonar.cs.analyzer.projectOutPaths'. No protobuf files will be loaded for this project.**  \\nScanner CLI is not able to analyze .NET projects. Please, use Scanner for MSBuild. If you are running Scanner for MSBuild, ensure that you are not hitting a known limitation.\\n\\n\"},{\"path\":\"analysis/scm-integration\",\"content\":\"---\\ntitle: SCM Integration\\nurl: /analysis/scm-integration/\\n---\\n\\nCollecting SCM data during code analysis can unlock a number of SonarQube features:\\n\\n* Automatic Issue Assignment\\n* code annotation (blame data) in the Code Viewer\\n* SCM-driven detection of new code (to help with [Fixing the Water Leak](/user-guide/fixing-the-water-leak/)). Without SCM data, SonarQube determines new code using analysis dates (to timestamp modification of lines).\\n\\nSCM integration requires support for your individual SCM provider. Git and SVN are supported by default. <!-- sonarqube -->For other SCM providers, see the Marketplace.<!-- /sonarqube -->\\n\\nIf need be, you can toggle it off at global/project level via administration settings.\\n\\n## Git\\n[Git](http://www.git-scm.com/) integration is supported out of the box with a pure Java implementation so there's no need to have Git command line tool installed on the machine where analysis is performed.\\n\\nAuto-detection of Git during analysis will happen if there is a .git folder in the project root directory or in one of its parent folders. Otherwise you can force the provider using `-Dsonar.scm.provider=git`. A full clone is required for this integration to be able to collect the required blame information (see Known Issues). If a shallow clone is detected, a warning will be logged and no attempt will be made to retrieve blame information..\\n\\n### Known Issues\\n\\n* Git doesn't consider old \\\"Mac\\\" line ends (CR) as new lines. As a result the blame operation will contain fewer lines than expected by SonarQube and analysis will fail. The solution is to fix line ends to use either Windows (CR/LF) or Unix (LF) line ends.\\n* JGit doesn't support .mailmap file to \\\"clean\\\" email adress during the blame\\n* \\\"Missing blame information...\\\" can be caused by checking out with a partial / shallow clone, or using Git submodules.\\n\\n### Advanced information\\nThe plugin uses [JGit](https://www.eclipse.org/jgit/) 4.9.0. JGit is a pure Java implementation of Git client.\\n\\n### How to investigate error during blame (only possible on Unix/Linux)?\\n\\nIf you get an error when blame is executed on a file, it may be a limitation or a bug in JGit. To confirm please follow these steps:\\n\\n1. Download the standalone JGit command line distribution\\n\\n2. Try to execute the blame command on the offending file:  \\n    `chmod +x /path/to/org.eclipse.jgit.pgm-4.9.0.201710071750-r.sh /path/to/org.eclipse.jgit.pgm-4.9.0.201710071750-r.sh blame -w /path/to/offending/file`\\n\\n3. If you get the same error as during analysis, then this really looks like a bug in JGit (especially if you don't have an issue with the native git command line tool). Please try to do the previous steps with latest version of JGit and report all information to the [SonarQube Community Forum](https://community.sonarsource.com/).\\n\\n\\n## Subversion\\n[Subversion](https://subversion.apache.org/) integration is supported out of the box for Subversion 1.6 to 1.9.x.\\n\\nAuto-detection of SVN during analysis will happen if there is a `.svn` folder somewhere in the parent hierarchy of the project root. Otherwise you can force the provider using `-Dsonar.scm.provider=svn` on the analysis command line.\\n\\n### Known issues\\nIf you get errors like:\\n\\n`Caused by: org.tmatesoft.svn.core.SVNException: svn: E200007: Retrieval of mergeinfo unsupported by 'https://pmd.svn.sourceforge.net/svnroot/pmd/trunk/pmd/src/main/java/net/sourceforge/pmd/AbstractConfiguration.java';`\\nIt means the SVN server is not advertising the 'mergeinfo' capability. You can check the advertised capabilities by simply connecting to it:\\n\\n`telnet <svn_server> 3690`\\nOften this is because your SVN server is not >= 1.5 or your project was not properly migrated after a server upgrade. It could also be a misconfiguration of the server.\\n\\nYou should try to run svnadmin upgrade **on the server**. For more information, please read https://subversion.apache.org/docs/release-notes/1.5.html#repos-upgrades.\\n\\n\"},{\"path\":\"analysis/security_configuration\",\"content\":\"---\\ntitle: Security Engine Custom Configuration\\nurl: /analysis/security_configuration/\\n---\\n*Security Engine Custom Configuration is available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/).*\\n\\nThe security engine tracks the path that data follows through your code. It detects when data that's potentially manipulated by a malicious user reaches a sensitive piece of code where an attack can occur.\\n\\nThose potentially malicious data are also called **tainted data**, because they are tainted by user inputs. \\n\\nSonarQube's security engine already knows a lot of APIs that are potential sources of attack and APIs that are potential targets of attack. While we do our best to identify publicly available APIs, we can't know everything about your homemade frameworks particularly when it comes to sanitizing your data. Because of this, SonarQube allows you to customize the security engine to add your own \\\"sources\\\", \\\"sanitizers\\\", \\\"passthroughs\\\", and \\\"sinks\\\" (see the **Elements** section below for more on these elements).\\n\\nFor example, you may want to:\\n\\n* add a source to add support for a framework that SonarQube doesn't cover out of the box\\n* use a custom sanitizer to tell to the security engine that all data going through sanitizers should be considered as safe. This allows you to remove false positives and tailor the security engine to your company.\\n\\n## Elements\\n\\nYou can add the following elements to your custom configuration:\\n\\n* **Source** – Where you get user data. You should always consider user data tainted and vulnerable to injection attacks.\\n  Example: Calling `HttpServletRequest#getParam(\\\"foo\\\")` will return tainted content\\n* **Sanitizer** – Finds and removes malicious content from tainted data.\\n* **Passthrough** – Allows you to keep track of tainted data sent to a library outside of the current function. When you pass a tainted value to a library functions outside of the current function, SonarQube automatically assumes it's being passed to a sanitizer. If the tainted data isn't being passed to a sanitizer, you can set up a passthrough to keep track of the data.\\n* **Sink** – A piece of code that can perform a security sensitive task. Data should not contain any malicious content once it reaches a sink.\\n  Example: Running an SQL query with `java.sql.Statement#execute`\\n\\n## Analysis Parameters\\n\\nTo customize the SonarQube security engine, you need to feed security configuration data through parameters given to the SonarScanners. To do this, you should provide JSON files with the value of the new analysis parameters. The parameters should use the following syntax:\\n\\n```\\nsonar.security.[ConfigType].[RuleRepository].[RuleKey]=[FileName]\\n```\\nThe `ConfigType` value can be one of the following:\\n\\n* `sources`\\n* `sanitizers`\\n* `passthroughs`\\n* `sinks`\\n\\nThe `RuleRepository` value can be one of the following:\\n\\n* `javasecurity`: if you want to customize the Java Security Engine\\n* `phpsecurity`: if you want to customize the PHP Security Engine\\n* `roslyn.sonaranalyzer.security.cs`: if you want to customize the C# Security Engine\\n\\nThe `RuleKey` value can be one of the following:\\n* For Java\\n  * [S3649](https://rules.sonarsource.com/java/RSPEC-3649): SQL Injection\\n  * [S5131](https://rules.sonarsource.com/java/RSPEC-5131): XSS\\n  * [S5146](https://rules.sonarsource.com/java/RSPEC-5146): Open Redirect\\n  * [S5167](https://rules.sonarsource.com/java/RSPEC-5167): HTTP Response Splitting\\n  * [S2083](https://rules.sonarsource.com/java/RSPEC-2083): Path Traversal Injection\\n  * [S2078](https://rules.sonarsource.com/java/RSPEC-2078): LDAP Injection\\n  * [S5145](https://rules.sonarsource.com/java/RSPEC-5145): Log Injection\\n  * [S2076](https://rules.sonarsource.com/java/RSPEC-2076): OS Command Injection\\n  * [S2631](https://rules.sonarsource.com/java/RSPEC-2631): RegExp Injection\\n  * [S5144](https://rules.sonarsource.com/java/RSPEC-5144): Server-Side Request Forgery (SSRF)\\n  * [S2091](https://rules.sonarsource.com/java/RSPEC-2091): XPath Injection\\n  * [S5135](https://rules.sonarsource.com/java/RSPEC-5135): Deserialization Injection\\n  * [S5334](https://rules.sonarsource.com/java/RSPEC-5334): Code Injection\\n* For PHP\\n  * [S3649](https://rules.sonarsource.com/php/RSPEC-3649): SQL Injection\\n  * [S5131](https://rules.sonarsource.com/php/RSPEC-5131): XSS\\n  * [S5146](https://rules.sonarsource.com/php/RSPEC-5146): Open Redirect\\n  * [S5167](https://rules.sonarsource.com/php/RSPEC-5167): HTTP Response Splitting\\n  * [S2083](https://rules.sonarsource.com/php/RSPEC-2083): Path Traversal Injection\\n  * [S2078](https://rules.sonarsource.com/php/RSPEC-2078): LDAP Injection\\n  * [S5145](https://rules.sonarsource.com/php/RSPEC-5145): Log Injection\\n  * [S2076](https://rules.sonarsource.com/php/RSPEC-2076): OS Command Injection\\n  * [S2631](https://rules.sonarsource.com/php/RSPEC-2631): RegExp Injection\\n  * [S5144](https://rules.sonarsource.com/php/RSPEC-5144): Server-Side Request Forgery (SSRF)\\n  * [S2091](https://rules.sonarsource.com/php/RSPEC-2091): XPath Injection\\n  * [S5135](https://rules.sonarsource.com/php/RSPEC-5135): Deserialization Injection\\n  * [S5334](https://rules.sonarsource.com/php/RSPEC-5334): Code Injection\\n  * [S5335](https://rules.sonarsource.com/php/RSPEC-5335): Include Injection\\n* For C#\\n  * [S3649](https://rules.sonarsource.com/csharp/RSPEC-3649): SQL Injection\\n  * [S5131](https://rules.sonarsource.com/csharp/RSPEC-5131): XSS\\n  * [S5146](https://rules.sonarsource.com/csharp/RSPEC-5146): Open Redirect\\n  * [S5167](https://rules.sonarsource.com/csharp/RSPEC-5167): HTTP Response Splitting\\n  * [S2083](https://rules.sonarsource.com/csharp/RSPEC-2083): Path Traversal Injection\\n  * [S2078](https://rules.sonarsource.com/csharp/RSPEC-2078): LDAP Injection\\n  * [S5145](https://rules.sonarsource.com/csharp/RSPEC-5145): Log Injection\\n  * [S2076](https://rules.sonarsource.com/csharp/RSPEC-2076): OS Command Injection\\n  * [S2631](https://rules.sonarsource.com/csharp/RSPEC-2631): RegExp Injection\\n  * [S5144](https://rules.sonarsource.com/csharp/RSPEC-5144): Server-Side Request Forgery (SSRF)\\n  * [S2091](https://rules.sonarsource.com/csharp/RSPEC-2091): XPath Injection\\n\\n[[info]]\\n| ![](/images/info.svg) The configuration works per rule. There is no way to share configuration between rules. \\n\\n## File Format\\n\\nThe configuration is provided through JSON files. Here is a sample JSON file that help to understand the expected JSON format.\\n\\n**JSON File Format Example for PHP**\\n\\n```\\n{\\n  \\\"sources\\\": [\\n    {\\n      \\\"methodId\\\": \\\"My\\\\\\\\Namespace\\\\\\\\ClassName\\\\\\\\ServerRequest::getQuery\\\"\\n    }\\n  ],\\n  \\\"sanitizers\\\": [\\n    {\\n      \\\"methodId\\\": \\\"str_replace\\\"\\n    }\\n  ],\\n  \\\"passthroughs\\\": [\\n    {\\n      \\\"methodId\\\": \\\"rawurldecode\\\",\\n      \\\"args\\\": [\\n        1\\n      ]\\n    }\\n  ],\\n  \\\"sinks\\\": [\\n    {\\n      \\\"methodId\\\": \\\"mysql_query\\\",\\n      \\\"args\\\": [\\n        1\\n      ]\\n    },\\n    {\\n      \\\"methodId\\\": \\\"My\\\\\\\\Namespace\\\\\\\\SqlStatement::execute\\\",\\n      \\\"isMethodPrefix\\\": true, // this is to say that all the methods starting with execute on the SqlStatement object will be considered\\n      \\\"args\\\": [\\n        0,\\n        1\\n      ]\\n    },\\n    {\\n      \\\"methodId\\\": \\\"My\\\\\\\\Namespace\\\\\\\\SqlStatement::run\\\",\\n      \\\"interval\\\": {\\n        \\\"fromIndex\\\": 1 // every parameter from the number 1 will be considered\\n      }\\n    }\\n  ]  \\n}\\n```\\n\\nThe `args` is the index of the parameter that can receive a tainted variable. Index starts:\\n* `1` for a fonction call. \\n* `0` for a method call, index `0` beeing the current instance (`this`) \\n\\n## MethodId\\n\\nAll the custom configurations rely on the accuracy of the `methodIds` provided. For each language, the format of the `methodId` is different.\\n\\n### MethodId for Java\\n\\nThe `methodId` format is inspired by the bytecode. The easiest way to get a `methodId` is to write a simple piece of Java code, compile it and then look at the bytecode generated using the `javap -c path_to.class` file, and transform it a little. Looking at the following real-life example will help you understand the format.\\n\\nLet's imagine you want to declare `org.rapidoid.jdbc.JdbcClient.execute(String sql, Object... args)` as a new sink (you don't need to do this because Rapidoid is part of what is covered out of the box).\\n\\nWrite a simple piece of code calling the JdbcClient.execute(...) method. The code doesn't need to actually do anything.\\n\\n```\\nimport org.rapidoid.http.Req;\\nimport org.rapidoid.jdbc.JdbcClient;\\n\\npublic static void callJDBCMethods(Req req) {\\n  String tainted = req.param(\\\"TAINTED\\\");\\n  JdbcClient jdbc = JDBC.api();\\n  dbc.execute(tainted, req); // Noncompliant\\n}      \\n```\\n\\nRun the `javap -c` and locate the piece of bytecode corresponding to the call to `JdbcClient.execute`\\n\\n```\\n[...]\\norg/rapidoid/jdbc/JdbcClient.execute:(Ljava/lang/String;[Ljava/lang/Object;)I\\n[...]\\n````\\n\\n* Replace the `/` in the package name with  `.`\\n* Remove the `:`\\n* Replace the `.` separating the Class name and the Method name with a `#`\\n\\nThe resulting `methodId` is:\\n```\\norg.rapidoid.jdbc.JdbcClient#execute(Ljava/lang/String;[Ljava/lang/Object;)I\\n```\\n\\n### MethodId for PHP\\n\\nThe `methodId` can be:\\n* the name of a PHP function \\n* the fully qualified name of a method following this format: `namespace\\\\\\\\ClassName::methodName`\\n\\nExample: `Symfony\\\\\\\\Component\\\\\\\\HttpFoundation\\\\\\\\Request::getUser` for the `getUser()` method of the `Request` object provided by `Symfony`\\n\\nNote: the `methodId` should be related to methods or functions that are part of the analysis scope. Because we recommended to not analyze code of frameworks at the same time that you scan your own source code, defining methods or functions from frameworks will have no effect.\\nThis is linked to the fact that the SonarQube security engine needs to know the runtime type of each variable. The type can't be guessed when objects are created by frameworks' factories. Out of the box, the SonarQube security engine supports the main Symfony and Laravel types.\\n\\n### MethodId for C&#35;\\n\\nIf you want to declare the constructor `SqlCommand` belonging to the namespace `System.Data.SqlClient` as a sink, the `methodId` should be:\\n\\n```\\nSystem.Data.SqlClient.SqlCommand.SqlCommand(string, System.Data.SqlClient.SqlConnection)\\n```\\n\\nYou simply need to provide the fully qualified name of the method or constructor plus the types of the arguments.\\n\\n## Deactivate Core Configuration\\n\\nYou can disable the core configuration per language or per rule using the following:\\n\\n```\\nsonar.security.[ConfigType].[RuleRepository].noDefaultConfig=[true|false]\\nsonar.security.[ConfigType].[RuleRepository].[RuleKey].noDefaultConfig=[true|false]\\n```\\n\"},{\"path\":\"architecture/architecture-integration\",\"content\":\"---\\ntitle: Architecture and Integration\\nurl: /architecture/architecture-integration/\\n---\\n## Overview\\nThe SonarQube Platform is made of 4 components:  \\n![SonarQube Platform.](/images/architecture-scanning.png)\\n\\n1. One SonarQube Server starting 3 main processes:\\n    * Web Server for developers, managers to browse quality snapshots and configure the SonarQube instance\\n    * Search Server based on Elasticsearch to back searches from the UI\\n    * Compute Engine Server in charge of processing code analysis reports and saving them in the SonarQube Database\\n2. One SonarQube Database to store:\\n    * the configuration of the SonarQube instance (security, plugins settings, etc.)\\n    * the quality snapshots of projects, views, etc.\\n3. Multiple SonarQube Plugins installed on the server, possibly including language, SCM, integration, authentication, and governance plugins\\n4. One or more SonarScanners running on your Build / Continuous Integration Servers to analyze projects\\n\\n## Integration\\nThe following schema shows how SonarQube integrates with other ALM tools and where the various components of SonarQube are used.  \\n![SonarQube Integration.](/images/architecture-integrate.png)\\n\\n1. Developers code in their IDEs and use [SonarLint](https://sonarlint.org) to run local analysis.\\n2. Developers push their code into their favourite SCM : git, SVN, TFVC, ...\\n3. The Continuous Integration Server triggers an automatic build, and the execution of the SonarScanner required to run the SonarQube analysis.\\n4. The analysis report is sent to the SonarQube Server for processing.\\n5. SonarQube Server processes and stores the analysis report results in the SonarQube Database, and displays the results in the UI.\\n6. Developers review, comment, challenge their Issues to manage and reduce their Technical Debt through the SonarQube UI.\\n7. Managers receive Reports from the analysis.\\nOps use APIs to automate configuration and extract data from SonarQube.\\nOps use JMX to monitor SonarQube Server.\\n\\n## About Machines and Locations\\n* The SonarQube Platform cannot have more than one SonarQube Server (although the Server can be installed [as a cluster](/setup/install-cluster/)) and one SonarQube Database.\\n* For optimal performance, each component (server, database, scanners) should be installed on a separate machine, and the server machine(s) should be dedicated.\\n* SonarScanners scale by adding machines.\\n* All machines must be time synchronized.\\n* The SonarQube Server and the SonarQube Database must be located in the same network\\n* SonarScanners don't need to be on the same network as the SonarQube Server.\\n* There is **no communication** between **SonarScanners** and the **SonarQube Database**.\\n\"},{\"path\":\"branches/branches-faq\",\"content\":\"---\\ntitle: Frequently Asked Branches Questions\\nurl: /branches/branches-faq/\\n---\\n\\n<!-- sonarqube -->\\n\\n_Branch analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\n<!-- /sonarqube -->\\n\\n\\n## How long are branches retained?  \\nLong-lived branches are retained until you delete them manually (**Administration > Branches**).\\nShort-lived branches are deleted automatically after 30 days with no analysis.\\nThis can be updated in **Configuration > General > Number of days before purging inactive short living branches**. For more, see [Housekeeping](/instance-administration/housekeeping/).\\n\\n## Does my project need to be stored in an SCM like Git or SVN?  \\nNo, you don't need to be connected to a SCM. But if you use Git or SVN we can better track the new files on short-lived branches and so better report new issues on the files that really changed during the life of the short-lived branch.\\n\\n## What if I mark an Issue \\\"Won't Fix\\\" or \\\"False-Positive\\\" in a branch?\\nIt be replicated as such when merging my short-lived branch into the Master. Each time there is an analysis of a long-lived branch, we look at the issues on the short-lived branches and try to synchronize them with the newly raised issues on the long-lived branch. In case you made some changes on the issues (false-positive, won't fix), these changes will be reported on the long-lived branch.\\n\\n## Can I manually delete a branch?  \\nThis can be achieved by going into the Administration menu at Project's level, then Branches.\\n\\n## How do I control the lifespan of a short-lived branch?  \\nAs a global admin, you can set the parameter `sonar.dbcleaner.daysBeforeDeletingInactiveShortLivingBranches` to control how many days you want to keep an inactive short-lived branch.\\n\\n## Does the payload of the Webhook include branch information?  \\nYes, an extra node called \\\"branch\\\" is added to the payload.\\n\\n## When are Webhooks called?  \\nWhen the computation of the background task is done for a given branch but also when an issue is updated on a short-lived branch.\\n\\n## What is the impact on my LOCs consumption vs my license?  \\nThe LOC of your largest branch are counted toward your license limit. All other branches are ignored.  \\n\"},{\"path\":\"branches/long-lived-branches\",\"content\":\"---\\ntitle: Long-lived Branches\\nurl: /branches/long-lived-branches/\\n---\\n\\n<!-- sonarqube -->\\n\\n_Branch analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\n<!-- /sonarqube -->\\n\\n## Status vs Quality Gate\\n\\nThe same quality gate that is applied to the project as a whole is automatically applied to long-lived branches as well. This is not editable.\\n\\n## Issue Creation and Synchronization\\n\\nDuring the **first analysis only**, issues (type, severity, status, assignee, change log, comments) are synchronized with the Main Branch. In each synchronized issue, a comment is added to the change log of the issue on the long-lived branch: \\\"The issue has been copied from branch 'master' to branch yyy\\\".\\n\\nThen, at each subsequent analysis of the long-lived branch, any new issue that comes from a short-lived branch automatically inherits the attributes (type, severity, ...) the issue had in the short-lived branch. A comment is added to the change log of the issue on the long-lived branch: \\\"The issue had been copied from branch 'the short-live branch' to branch yyy\\\".\\n\\n## New Code Period\\n\\nBecause long-lived branches will persist for a long time, you are likely to develop and release multiple versions from it, and so you can change the New Code period of a long-lived branch in **Administration > Branches**.\\n\\n## Settings and Quality Profiles on Branches\\n\\nBranch settings and quality profiles default to those set for the master branch, and by design, it's not possible to configure other values.\\n\"},{\"path\":\"branches/overview\",\"content\":\"---\\ntitle: Overview\\nurl: /branches/overview/\\n---\\n\\n<!-- sonarqube -->\\n_Branch analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n<!-- /sonarqube -->\\n\\n\\nBranch analysis allows you to\\n\\n* analyze long-lived branches\\n* analyze short-lived branches\\n* notify external systems when the status of a short-lived branch is impacted\\n\\n## Branch Types\\n\\n### Short-lived\\n\\nThis corresponds to Pull/Merge Requests or Feature Branches. This kind of branch:\\n\\n* will disappear quickly\\n* will be merged rapidly to prevent integration issues\\n* is developed for a given version, so the version does not change,\\n  and there is no way to set the New Code period; everything that has been changed in the branch is new code\\n* tracks all the new issues related to the code that changed on it.\\n\\n![conceptual illustration of short-lived branches.](/images/short-lived-branch-concept.png)\\n\\nFor more, see [Short-lived Branches](/branches/short-lived-branches/)\\n\\n### Long-lived\\n\\nThis corresponds to \\\"Maintenance\\\" Branches that will house several release versions.\\nThis kind of branch will:\\n\\n* last for a long time\\n* inevitably diverge more and more from the other branches\\n* house several release versions, each of which must pass the quality gate\\n  to go to production not be expected to be merged into another branch\\n\\n![conceptual illustration of long-lived branches.](/images/long-lived-branch-concept.png)\\n\\nFor more, see [Long-lived Branches](/branches/long-lived-branches/)\\n\\n### Master / Main Branch\\n\\nThis is the default, and typically corresponds to what's being developed for\\nyour next release. This is usually known within a development team as\\n\\\"master\\\" or \\\"head\\\", and is what is analyzed when no specific branch parameters\\nare provided. It is labeled \\\"Main Branch\\\" and defaults to the name \\\"master\\\",\\nbut can be renamed from within the interface. When you are not using Developer Edition, this is the only branch you see.\\n\\n## Analysis\\n\\nA branch is created when the `sonar.branch.name` parameter is passed during analysis.\\n\\n| Parameter Name        | Description                                                                                                                                                                                                                                                             |\\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| `sonar.branch.name`   | Name of the branch (visible in the UI)                                                                                                                                                                                                                                  |\\n| `sonar.branch.target` | Name of the branch where you intend to merge your short-lived branch at the end of its life. If left blank, this defaults to the master branch. It can also be used while initializing a long-lived branch to sync the issues from a branch other than the Main Branch. |\\n\\n### Git History\\n\\nBy default, TravisCI only fetches the last 50 git commits. You must use `git fetch --unshallow` to get the full history. If you don't, new issues may not be assigned to the correct developer.\\n\\n### Configuring the Branch type\\n\\nA regular expression is used to determine whether a branch is treated as long-lived or short-lived. By default, branches that have names starting with either \\\"branch\\\" or \\\"release\\\" will be treated as long-lived.\\n\\nThis can be updated <!-- sonarqube -->globally in **Configuration > General Settings > General > Detection of long-lived branches** or <!-- /sonarqube -->at a project's level in **Admininstration > Branches & Pull requests**.\\n\\nOnce a branch type has been set, it cannot be changed. Explicitly, you cannot transform a long-lived to short-lived branch, or vice-versa.\\n\\n## See also\\n* [Short-lived Branches](/branches/short-lived-branches/)\\n* [Long-lived Branches](/branches/long-lived-branches/)\\n* [Frequently Asked Questions](/branches/branches-faq/)\\n\"},{\"path\":\"branches/short-lived-branches\",\"content\":\"---\\ntitle: Short-lived Branches\\nurl: /branches/short-lived-branches/\\n---\\n\\n<!-- sonarqube -->\\n\\n_Branch analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\n<!-- /sonarqube -->\\n\\nShort-lived branch analysis shows your analysis and quality gate status in the {instance} UI.\\n\\n## Quality Gate\\n\\nThe short-lived branch quality gate:\\n\\n* **Focuses on new code** – The short-lived branch quality gate only uses your project's quality gate conditions that apply to \\\"on New Code\\\" metrics.\\n* **Assigns a status** – Each short-lived branch shows a quality gate status reflecting whether it Passed (green) or Failed (red).\\n\\n## Issue Creation and Synchronization\\n\\nThe issues visible on the short-lived branch are the new issues corresponding to files modified in the branch.\\n\\nModified files are determined based on the checksum of each file on the sonar.branch.target and the short-lived branch.\\n\\n## New Code Period\\n\\nThe ephemeral nature of short-lived branches means the New Code Period is implicit; everything changed in the branch is new code.\\n\\n## Settings and Quality Profiles on Branches\\n\\nBranch settings and quality profiles default to those set for the master branch, and by design, it's not possible to configure other values.\\n\\n## Known Limitations\\n\\n* You cannot connect SonarLint to a short-lived branch.\\n* Analysis of a short-lived branch based on another short-lived branch is not supported.\\n\"},{\"path\":\"extend/adding-coding-rules\",\"content\":\"---\\ntitle: Adding Coding Rules\\nurl: /extend/adding-coding-rules/\\n---\\n\\nThere are two ways to extend coding rules:\\n\\n* Writing coding rules using Java via a SonarQube plugin\\n* Adding XPath rules directly through the SonarQube web interface\\n\\nIf both are available, the Java API will be more fully-featured than what's available for XPath, and is generally preferable.\\n\\n[[info]]\\n| ![](/images/info.svg) Before implementing a new coding rule, you should consider whether it is specific to your own context or might benefit others. If it might benefit others, you can propose it on the [Community Forum](https://community.sonarsource.com/). If there is shared interest, then it might be implemented for you directly in the related language plugin. It means less maintenance for you, and benefit to others.\\n\\n## Custom rule support by language\\nLanguages not listed here don't support custom rules\\n\\n &nbsp;  |XPath 1.0|Java|Other\\n---|---|---|---\\nC#| -  | -  | ![](/images/check.svg)[Importing Issues from Third-Party Roslyn Analyzers (C#, VB.NET)](/analysis/external-issues/)\\nCOBOL| ![](/images/check.svg) | -  | - \\nFlex|![](/images/check.svg) |  -  | - \\nJava |  -  | ![](/images/check.svg) |  - \\nJavaScript |  -  | ![](/images/check.svg) | - \\nPHP |  -  | ![](/images/check.svg)|  - \\nPL/SQL | ![](/images/check.svg) |  -  | - \\nPL/I | ![](/images/check.svg) |  -  | - \\nPython | Deprecated |  -  | - \\nRPG |  -  | ![](/images/check.svg)| - \\nVB.NET|  -  |  -  | ![](/images/check.svg)[Importing Issues from Third-Party Roslyn Analyzers (C#, VB.NET)](/analysis/external-issues/)\\nXML |  ![](/images/check.svg) |  -  | - \\n\\n\\n## Adding coding rules using Java\\nWriting coding rules in Java is a six-step process:\\n\\n* Create a SonarQube plugin.\\n* Put a dependency on the API of the language plugin for which you are writing coding rules.\\n* Create as many custom rules as required.\\n* Generate the SonarQube plugin (jar file).\\n* Place this jar file in the SONARQUBE_HOME/extensions/plugins directory.\\n* Restart SonarQube server.\\n\\nSee the following pages to see samples and details about how to create coding rules \\n\\n* [for COBOL](/analysis/languages/cobol/)\\n* [for Java](/analysis/languages/java/)\\n* [for JavaScript](/analysis/languages/javascript/)\\n* [for PHP](/analysis/languages/php/)\\n* [for RPG](/analysis/languages/rpg/)\\n\\n\\n## Adding coding rules using XPATH\\n\\nSonarQube provides a quick and easy way to add new coding rules directly via the web interface for certain languages using XPath 1.0 expressions. For XML, which is already immediately accessible to XPath, you can simply write your rules and check them using any of the [freely available tools](http://codebeautify.org/Xpath-Tester) for examining XPath on XML. If you're writing rules for XML, skip down to the Adding your rule to the server section once you've got your rules written.\\n\\nFor other languages how to access a variable, for example, in XPath is less obvious, so we've provided tools.\\n\\n### Writing an XPath Rule using SSLR Toolkit\\nThe rules must be written in XPath (version 1.0) to navigate the language's [Abstract Syntax Tree](http://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST). For most languages, an SSLR Toolkit is provided to help you navigate the AST. You need to download the `sslr-{language}-toolkit-{version}.jar` file corresponding to the version of your language plugin you have on your SonarQube instance.\\n\\nEach language's SSLR Toolkit is a standalone application that displays the AST for a piece of code source that you feed into it, allowing you to read the node names and attributes from your code sample and write your XPath expression. Knowing the XPath language is the only prerequisite, and there are a lot of tutorials on XPath online.\\n\\nThe latest version of SSLR Toolkit can be downloaded from following locations:\\n\\n* [Flex](https://binaries.sonarsource.com/Distribution/sonar-flex-plugin/)\\n* [PL/SQL](https://binaries.sonarsource.com/CommercialDistribution/sslr-plsql-toolkit/)\\n* [PL/I](https://binaries.sonarsource.com/CommercialDistribution/sslr-pli-toolkit/)\\n* [Python](https://binaries.sonarsource.com/Distribution/sslr-python-toolkit/) (Deprecated)\\n\\nFor an SSLR preview, consider the following source code sample:\\n```\\nfunction HelloWorld(hour) {\\n  if (hour) {\\n    this.hour = hour;\\n  } else {\\n    var date = new Date();\\n    this.hour = date.getHours();\\n  }\\n  this.displayGreeting = function() {\\n    if (this.hour >= 22 || this.hour <= 5)\\n      document.write(\\\"Good night, World!\\\");\\n    else\\n      document.write(\\\"Hello, World!\\\");\\n  } \\n}\\n```\\nWhile parsing source code, SonarQube builds an Abstract Syntax Tree (AST) for it, and the SSLR Toolkit provided for each language will show you SonarQube's AST for a given piece of code. Here's the AST for our sample:\\n\\n![AST example](/images/astSample.png)\\n\\nThe [XPath](http://en.wikipedia.org/wiki/XPath) language provides a way to write coding rules by navigating this AST, and the SSLR Toolkit for the language will give you the ability to test your new rules against your sample code.\\n\\n### Adding your Rule to the Server\\nOnce your new rule is written, you can add it SonarQube:\\n\\n1. Login as an Quality Profile Administrator\\n1. Go to Rules page\\n1. Select the Language for which you want to create the XPath rule\\n1. Tick the Template criterion and select \\\"Show Templates Only\\\" \\n1. Look for the XPath rule template\\n1. Click on it to select it, then use the interface controls to create a new instance\\n1. Fill in the form that pops up\\n1. Once you've created your rule, you'll need to add it to a Quality Profile and run analysis to see it in action.\\n\\n\\n## Coding rule guidelines\\nThese are the guidelines that SonarSource uses internally to specify new rules. Rules in community plugins are not required to adhere to these guidelines. They are provided here only in case they are useful.\\n\\nNote that fields \\\"title\\\", \\\"description\\\" and \\\"message\\\" have a different format when the rule type is \\\"Hotspot\\\".\\n\\n### Guidelines for Bug, Vulnerability, and Code Smell rules\\n#### Titles\\n\\n* The title of the rule should match the pattern \\\"X should [ not ] Y\\\" for most rules. Note that the \\\"should [ not ]\\\" pattern is too strong for Finding rules, which are about observations on the code. Finding titles should be neutral, such as \\\"Track x\\\".\\n* All other things being equal, the positive form is preferred. E.G.\\n   * \\\"X should Y\\\" is preferred to \\n   * \\\"X should not Z\\\"\\n* Titles should be written in plural form if at all possible. E.G.\\n   * ![](/images/check.svg)Flibbers should gibbet\\n   * ![](/images/cross.svg)A Flibber should gibbet\\n* Any piece of code in the rule title should be double-quoted (and not single-quoted).\\n* There should be no category/tag prefixed to the rule title, such as \\\"Accessibility - Image tags should have an alternate text attribute\\\"\\n* Titles should be as concise as possible. Somewhere around 70 or 80 characters is an ideal maximum, although this is not always achievable.\\n\\nNoncompliant Title Examples:\\n\\n* File should not have too many lines of code  // Noncompliant; singular form used\\n* Avoid file with too many lines of code  // Noncompliant; doesn't follow \\\"x should [not] y\\\" pattern\\n* Too many lines of code  // Noncompliant\\n* Don't use \\\"System.(out/err)\\\"  // Noncompliant\\n* Parameters in an overriding virtual function should either use the same default arguments as the function they override, or not specify any default arguments  // Noncompliant; waaaay too long\\n\\nCompliant Solutions:\\n\\n* Files should not have too many lines of code  \\n* \\\"System.(out/err)\\\" should not be used to log messages\\n* Overriding virtual functions should not change parameter defaults\\n\\nStarting with the subject, such as \\\"Files\\\", will ensure that all rules applying to files will be grouped together.\\n\\n#### Descriptions\\nRule descriptions should contain the following sections in the listed order:\\n\\n* **Rationale** (unlabeled) - explaining why this rule make sense. \\nIf it's not absolutely clear from the rationale what circumstances will cause an issue to be raised, then this section should end with \\\"This rule raises an issue when \\\\[ insert circumstances here ]\\\".\\n* **Noncompliant Code Example** - providing some examples of issues\\n   * Ideally, the examples should depend upon the default values of any parameters the rule has, and these default values should be mentioned before the code block. This is for the benefit of users whose rule parameters are tuned to something other than the default values. E.G.\\nWith a parameter of: <code>*:.*log4j.*</code>\\n   * The lines in these code samples where issues are expected should be marked with a \\\"Noncompliant\\\" comment\\n   * \\\"Compliant\\\" comments may be used to help demonstrate the difference between what is and is not allowed by the rule\\n   * It is acceptable to omit this section when demonstrating noncompliance would take too long, e.g. \\\"Classes should not have too many lines of code\\\"\\n* **Compliant Solution** - demonstrating how to fix the previous issues. Good to have but not required for rules that detect bugs. \\n   * There is no need to mark anything \\\"Compliant\\\" in the Compliant Solution; everything here is compliant by definition\\n   * It is acceptable to omit this section when there are too many equally viable solutions.\\n* **Exceptions** (optional) - listing and explaining some specific use cases where no issues are logged even though some might be expected. Note that this is sometimes incorporated into the rationale, instead.\\n* **See** (optional) - listing references and/or links to external standards like MISRA, SEI, CERT, &etc.\\nDeprecated (optional): listing replacement rules with links\\n\\nCode samples for COBOL should be in upper case. \\n\\nWhen displayed in SonarQube, any code or keywords in the description should be enclosed in <code> tags. For descriptions written in JIRA, this means using double curly braces (`{{` and `}}`) to enclose such text. They will be translated in the final output.\\n\\n#### Messages\\nIssue messages should contain the remediation message for bug and quality rules. For potential-bug rules, it should make it explicit that a manual review is required. It should be in the imperative mood (\\\"Do x\\\"), and therefore start with a verb.\\n\\nAn issue message should always end with a period ('.') since it is an actual sentence, unless it ends with a regular expression, in which case the regular expression should be preceded by a colon and should end the message.\\n\\nAny piece of code in the the rule message should be double-quoted (and not single-quoted). Moreover, if an issue is triggered because a number was above a threshold value, then both the number and the threshold value should be mentioned in the issue message. \\n\\nSample messages:\\n\\n* Remove or refactor this useless \\\"switch\\\" statement. // Compliant\\n* This \\\"switch\\\" statement is useless and should be refactored or removed. // Noncompliant\\n* Every \\\"switch\\\" statement shall have at least one case-clause. // Noncompliant\\n* Rename this variable to comply with the regular expression: [a-z]+  // Compliant\\n\\n[[collapse]]\\n| ## Sample Specification\\n| ### Generic exceptions should not be thrown\\n|\\n| Using generic exceptions such as `Error`, `RuntimeException`, `Throwable`, and `Exception` prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.\\n| \\n| **Noncompliant Code Example**  \\n| ```\\n| With the default regular expression [a-z][a-zA-Z0-9]+:\\n| \\n| try { /* ... */ } catch (Exception e) { LOGGER.info(\\\"context\\\"); } // Noncompliant; exception is lost\\n| try { /* ... */ } catch (Exception e) { LOGGER.info(e); } // Noncompliant; context is required\\n| try { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); } // Noncompliant; exception is lost (only message is preserved)\\n| try {\\n| /* ... */\\n| } catch (Exception e) { // Noncompliant - exception is lost\\n| throw new RuntimeException(\\\"context\\\");\\n| }\\n| ```\\n|\\n| **Compliant Solution**  \\n| ```\\n| try { /* ... */ } catch (Exception e) { LOGGER.info(\\\"context\\\", e); }\\n| try {\\n| /* ... */\\n| } catch (Exception e) {\\n| throw new RuntimeException(\\\"context\\\", e);\\n| }\\n| ```\\n| **Exceptions**  \\n| Generic exceptions in the signatures of overriding methods are ignored.\\n| ```\\n| @Override\\n| public void myMethod() throws Exception {...}\\n| ```\\n| **See**  \\n| * MISRA C:2004, 4.5.2\\n| * MITRE, [CWE-580](http://cwe.mitre.org/data/definitions/580.html) - clone() Method Without super.clone()\\n|\\n| **See also**  \\n| S4567 - Rule title here\\n\\n### Guidelines for Hotspot rules\\n\\nSee [RSPEC-4721](https://jira.sonarsource.com/browse/RSPEC-4721) for an example of Hotspot rule.\\n\\n#### Titles\\n* The title should start with a verb in the present participle form (-ing)\\n* The title should end with \\\"is security-sensitive\\\"\\n\\nNoncompliant Title Examples:\\n\\n*  Avoid executing OS commands\\n\\nCompliant Solution:\\n\\n* Executing OS commands is security-sensitive\\n* Deserializing objects from an untrusted source is security-sensitive\\n\\n#### Descriptions\\nRule descriptions should contain the following sections in the listed order:\\n\\n* **Rationale** (unlabeled) - explaining why this rule make sense.\\n   * It starts with a copy of the title. The \\\"is security sensitive\\\" part can be replaced with \\\"can lead to ...<DESCRIBE RISK>\\\" when there is one risk and it is easy to describe in a short manner.\\n   * Next is added the phrase \\\"For example, it has led in the past to the following vulnerabilities:\\\".\\n   * Next is a list of CVE links formatted as bullet points. Each CVE should point to their description on the (Example: CVE-2018-12465).\\n* **Ask Yourself Whether** - listing a set of questions which the developer should ask herself/himself.\\n   * Those questions should check if the context in which the code is makes it dangerous.\\nFor example, if some code enables a user to insert custom data the database, one of the questions could be: Is the user input sanitized?\\n   * Some additional questions can be added to remind the developer that there might not be a need for this code.\\nFor example, if some code enables a user to send and then execute custom code, the question could be: Does the user really need to execute code dynamically?\\n   * This section ends with \\\"You are at risk if you answered yes to any of those questions.\\\" with an asterisk marking the corresponding questions if it is not the case for all of them.\\n* **Recommended Secure Coding Practices** - describing all the ways to mitigate the risk.\\n   * It usually contains a mix of all the advices provided by OWASP rules.\\n   * Add detailed solutions whenever possible.\\n* one of the following:\\n   * **Noncompliant Code Example** - same as for Bug, Vulnerability and Code Smell rules.\\nsome code can be added to give an example of dangerous context. For example: putting a password in an insecure cookie.\\n   * **Sensitive Code Example** - use this instead of \\\"Noncompilant code example\\\" when the Hotspot highlights some code which is not dangerous but might be the source of some vulnerability. Example: an opening Socket.\\n* **See** (optional) -  same as for Bug, Vulnerability and Code Smell rules.\\n* **Deprecated** (optional) -  listing replacement rules with links.\\n\\nGuidelines regarding COBOL, keywords and code are the same as for other rules.\\n\\n#### Messages\\nMost of the time you can paraphrase the title:\\n* start the sentence with \\\"Make sure that\\\"\\n* replace \\\"is security-sensitive\\\" with \\\"is safe here\\\"\\n\\nHowever for some rules it can make sense to change the title. See the examples below: \\n\\n* Title: Executing OS commands is security-sensitive\\n   * Message: make sure that executing this OS command is safe here.\\n* Title: Delivering code in production with debug mode activated is security-sensitive\\n   * Message: Make sure this debug mode is deactivated before delivering the code in production.\\n\\n### Guidelines applicable to all rules\\n#### See/References\\nWhen a reference is made to a standards specification, e.g. MISRA, the following steps must also be taken:\\n\\n* add any related tags, such as: security, bug, &etc.\\n* add the relevant standard-related tag/label such as cwe, misra, etc. (If you forget, the overnight automation will remember for you.) \\n* update the appropriate field on the References tab with the cited id. (If you forget, the overnight automation will remember for you.) \\n\\nIf needed, references to other rules should be listed under a \\\"See also\\\" heading. If a \\\"See\\\" heading exists in the rule, then the \\\"See also\\\" title should be at the h3 level. Otherwise, use an h2 for it.\\n\\nOther rules should be linked to only if they are related or contradictory (such as a pair of rules about where `{` should go).\\n\\nWhy list references to other rules under \\\"see also\\\" instead of \\\"see\\\"? The see section is used to support the current rule, and one rule cannot be used as justification for another rule. \\n\\n#### Rule Type\\nNow that you've fleshed out the description, you should have a fairly clear idea of what type of rule this is, but to be explicit:\\n\\n**Bug** - Something that's wrong or potentially wrong. \\n\\n**Code Smell** - Something that will confuse a maintainer or cause her to stumble in her reading of the code.\\n\\n**Vulnerability** - Something that has a high chance of being exploited by an attacker.\\n\\n**HotSpot** - Something that could result in a vulnerability depending on the context in which this code is present. \\n\\nSometimes the line between Bug and Code Smell is fuzzy. When in doubt, ask yourself: \\\"Is code that breaks this rule doing what the programmer probably intended?\\\" If the answer is \\\"probably not\\\" then it's a Bug. Everything else is a Code Smell.\\n\\n#### Default severities\\nWhen assessing the default severity of a rule, the first thing to do is ask yourself \\\"what's the worst thing that could happen?\\\" In answering, you should factor in Murphy's Law without predicting Armageddon.\\n\\nOnce you have your answer, it's time to assess whether the Impact and Likelihood of the Worst Thing are High or Low. To do that, ask yourself these specific questions:\\n\\nVulnerability\\n* Impact: Could the exploitation of the vulnerability result in significant damage to your assets or your users? (Yes = High)\\n* Likelihood: What is the probability a hacker will be able to exploit the issue?\\n\\nBug\\n* Impact: Could the bug cause the application to crash or corrupt stored data?\\n(Languages where an error can cause program termination: COBOL, Python, PL/SQL, RPG.) \\n* Likelihood: What is the probability the worst will happen?\\n\\nCode Smell\\n* Impact: Could the Code Smell lead a maintainer to introduce a bug?\\n* Likelihood: What is the probability the worst will happen?\\n\\nOnce you have your Impact and Likelihood assessments, the rest is easy:\\n\\n&nbsp;| impact|likelihood\\n---|---|---\\nBlocker|![](/images/check.svg)|![](/images/check.svg)\\nCritical|![](/images/check.svg)|![](/images/cross.svg)\\nMajor|![](/images/cross.svg)|![](/images/check.svg)\\nMinor|![](/images/cross.svg)|![](/images/cross.svg)\\n\\n#### Tags\\nRules can have 0-n tags, although most rules should have at least one. Many of the common-across-languages tags are described in [the issues docs](/user-guide/issues/).\\n\\n#### Evaluation of the remediation cost\\nFor most rules, the SQALE remediation cost is constant per issue. The goal of this section is to help defining the value of this constant and to unify the way those estimations are done to prevent having some big discrepancies among language plugins. \\n\\nFirst step, classify the effort to do the remediation :\\n\\n1. TRIVIAL\\nNo need to understand the logic and no potential impact. \\nExamples: remove unused imports, replace tabulations by spaces, remove call to System.out.println() used for debugging purpose, ...\\n1. EASY\\nNo need to understand the logic but potential impacts. \\nExamples: rename a method, rename a parameter, remove unused private method, ...\\n1. MEDIUM\\nUnderstanding the logic of a piece of code is required before doing a little and easy refactoring (1 or 2 lines of code). But understanding the big picture is not required.\\nExamples : CURSORs should not be declared inside a loop, EXAMINE statement should not be used, IF should be closed with END-IF, ...\\n1. MAJOR\\nUnderstanding the logic of a piece of code is required and it's up to the developer to define the remediation action.\\nExamples: Too many nested IF statements, Methods should not have too many parameters, UNION should not be used in SQL SELECT statements, Public java method should have a javadoc, Avoid using deprecated methods, ...\\n1. HIGH\\nThe remediation action might lead to locally impact the design of the application.\\nExamples: Classes should not have too many responsibilities, Cobol programs should not have too many lines of code, Architectural constraint, ...\\n1. COMPLEX\\nThe remediation action might lead to impact the overall design of the application.\\nExamples: Avoid cycles between packages, ...\\n\\nThen use the following table to get the remediation cost according to the required remediation effort and to the language:\\n\\n&nbsp;|Trivial|Easy|Medium|Major|High|Complex\\n---|---|---|---|---|---|---\\nABAP, COBOL, ...| 10min | 20min | 30min | 1h | 3h | 1d \\nOther languages| 5min |10min|20min|1h|3h|1d\\n\\nFor rules using either the \\\"linear\\\" or \\\"linear with offset\\\" remediation functions, the \\\"Effort To Fix\\\" field must be fed on each issue and this field is used to compute the remediation cost.  \\n\\n#### Issue location(s) and highlighting\\nFor any given rule, highlighting behavior should be consistent across languages within the bounds of what's relevant for each language.\\n\\nWhen possible, each issue should be raised on the line of code that needs correction, with highlighting limited to the portion of the line to be corrected. For example:\\n\\n* an issue for a misnamed method should be raised on the line with the method name, and the method name itself should be highlighted.\\n\\nWhen correcting an issue requires action across multiple lines, the issue should be raised on the the lowest block that encloses all relevant lines. For example an issue for:\\n\\n* method complexity should be raised on the method signature\\n* method count in a class should be raised on the class declaration\\n\\nWhen an issue could be made clearer by highlighting multiple code segments, such as a method complexity issue, additional issue locations may be highlighted, and additional messages may optionally be logged for those locations. In general, these guidelines should be followed for secondary issue locations:\\n\\n* highlight the minimum code to show the line's contribution to the issue. \\n* avoid using an additional message if the secondary location is likely to be on the same issue as the issue itself. For example: the rule \\\"Parameters should be final\\\" will raise an issue on the method name, and highlight each non-final parameter. Since all locations are likely to be on the same line, additional messages would only confuse the issue.\\n* don't write a novel. The message for a secondary location is meant to be a hint to push the user in the right direction. Don't take over the interface with a narrative.\\n\\n\"},{\"path\":\"extend/adding-scm\",\"content\":\"---\\ntitle: Supporting SCM Providers\\nurl: /extend/adding-scm/\\n---\\nSonarQube Scanner uses information from the project's SCM, if available, to:\\n\\n* Assign a new issue to the person who introduced it. The last committer on the related line of code is considered to be the author of the issue. \\n* Estimate the coverage on new code, including added and changed code, on the new code period. \\n* Display the most recent commit on each line the code viewer.\\n![Commit info is available from the margin of the code viewer](/images/commit-info-in-code-viewer.png)\\n\\nThe only required SCM command is \\\"blame\\\", which gets the last committer of each line for a given file. This command is executed by a SonarQube plugin through the extension point  org.sonar.api.batch.scm.ScmProvider. See the multiple existing plugins, for instance [Git](https://docs.sonarqube.org/display/SONAR/Git+Integration), for more details.\\n\"},{\"path\":\"extend/contributing\",\"content\":\"---\\ntitle: Contributing\\nurl: /extend/contributing/\\n---\\n\\nPlease be aware that we are not actively looking for feature contributions to SonarQube itself because it's extremely difficult for someone outside SonarSource to comply with our roadmap and expectations. Therefore, we typically only accept minor cosmetic changes and typo fixes for SonarQube, but we do happily welcome contributions to the other open source projects under the SonarSource umbrella. \\n\\n\\n## General guidelines\\n* Choose an open ticket in [JIRA](https://jira.sonarsource.com/secure/Dashboard.jspa) or propose your change on the [SonarQube Community Forum](https://community.sonarsource.com) - the discussion there is likely to result in an open JIRA ticket. ;-)\\n* Use the SonarSource conventions, which you'll find neatly packaged here: https://github.com/SonarSource/sonar-developer-toolset#the-almost-unbreakable-build\\n* Use pull requests to submit your work\\n\\n## New rule implementations in existing plugins\\n* Start from an existing [RSpec](https://jira.sonarsource.com/browse/RSPEC-1973?filter=10375) (Rule Specification) that lists your language of interest in the \\\"Targeted languages\\\" field. \\n   * If the RSpec you're interested in doesn't target the language where you want to implement it, raise the question on the Community Forums .\\n   * If no RSpec exists for the rule you want to implement, raise the question on the [Community Forum](https://community.sonarsource.com/).\\n* Put your rule implementation class in the [language]-checks (e.g. java-checks, javascript-checks, &etc.) module, in the checks sub-package\\n* The naming convention for implementation classes is [A-Z][A-Za-z]+Check.java. (Yes, put \\\"Check\\\" in the name too.) The class name should be descriptive and not reflect the rule key. E.G. FindBadCodeCheck.java, not S007.java.\\n* A good way to get started on a rule implementation is to look at the implementations of rules that do similar things.\\n* During development there's no need to load the plugin in a server to test your implementation, use the rule's unit test for that.\\n* For a complete implementation, make sure all of the following are done:\\n   * create HTML description file and metadata file\\n   * write test class\\n   * register the rule in CheckList.java\\n   * add the rule to the profile used for the integration test in `profile.xml`\\n   * run the integration test and add any new issues to the set of expected issues \\n\"},{\"path\":\"extend/deploying-to-marketplace\",\"content\":\"---\\ntitle: Deploying to the Marketplace\\nurl: /extend/deploying-to-marketplace/\\n---\\n\\nIf you have developed a SonarQube plugin, and it meets the requirements, we can even add it in the [SonarQube Marketplace](/instance-administration/marketplace/).\\n\\n## Requirements\\nIf your plugin meets the following requirements, then you can ask SonarSource (via the [Community Forum](https://community.sonarsource.com/c/plugins)) to reference your plugin in the [SonarQube Marketplace](/instance-administration/marketplace/):\\n\\n1. Your plugin is open-source\\n   1. Source is freely accessible\\n   1. The license is a known FLOSS one (check [the list provided by the Open Source Initiative](http://opensource.org/licenses))\\n   1. There's a public issue tracking system\\n   1. Documentation is available online in English\\n   1. Binaries of each version are accessible somewhere\\n1. Releases follow open source conventions. For each release, the following must be available:\\n   1. release notes that reflect all significant changes in the version\\n   1. plugin jar\\n1. The key of your plugin must be:\\n   1. short and unique\\n   1. lowercase (no camelcase)\\n   1. composed only of [a-z0-9]\\n   1. related to the name of your plugin\\n   1. not just the name of a language (e.g. cannot be java, rust, js/javascript, ...)  \\n   examples of good keys: motionchart, communityphp, scmactivity\\n1. The description of your plugin must not be misleading in terms of content (the code needs to do pretty much what the name and description say it does). \\n1. On initial entry into the Marketplace, SonarSource staff will test the plugin to verify reasonable functionality and quality. SonarSource staff must be provided with the necessary means to do this testing *without* the need to sign any agreements or fill out any forms. Ideally, the means to do this testing will be made available to the community at large, with the same lack of restrictions.\\n1. Your plugin does not compete with existing or soon-to-be-released SonarSource products (sorry, but we gotta pay the bills somehow).\\n1. It is analyzed on [SonarCloud](https://sonarcloud.io/) and the quality gate is green when doing a release.\\n1. It is compatible with the platform requirements (e.g. it runs on the minimum listed JRE).\\n1. If your plugin adds analysis of a language which is not analyzed by any SonarSource analyzer you must provide the NCLOC and NCLOC_DATA [metrics](/user-guide/metric-definitions/), which are both required to make the user experience within SonarQube consistent. You can take a look at how those metrics are provided by SonarJava ([NCLOC](https://github.com/SonarSource/sonar-java/blob/4cb1065f405edccbb7d229633945b3c56aeab04c/java-frontend/src/main/java/org/sonar/java/Measurer.java#L109), [NCLOC_DATA](https://github.com/SonarSource/sonar-java/blob/4cb1065f405edccbb7d229633945b3c56aeab04c/java-frontend/src/main/java/org/sonar/java/ast/visitors/FileLinesVisitor.java#L101)). \\n1. Last but not least: your plugin must be aligned with the goal of the SonarQube platform: management of the technical debt and the quality of the code.  \\nTo be more precise: every feature of SonarQube is tied to the code, so if your plugin provides data that can't be attached to a source or a test file, then there are chances that your plugin won't be accepted in the Marketplace\\n\\nIf your plugin meets these requirements, feel free to start a new thread on the Community Forum requesting inclusion. This thread should include:\\n\\n* plugin description\\n* plugin home page url\\n* plugin project homepage on SonarCloud\\n* the link to a PR adding a file for your plugin to the sonar-update-center-properties repo, and the elements of a \\\"new release\\\" email listed below.\\n\\n[[info]]\\n| ![](/images/info.svg) We reserve the right to exclude from the Marketplace plugins that we feel would be a dis-service to the community.\\n\\n## Announcing new releases\\nWhen you've got a new release that should be published in the Marketplace, please:\\n\\n* create a PR on the [sonar-update-center-properties repo](https://github.com/SonarSource/sonar-update-center-properties) updating the file for your plugin with the data for your new release\\n* start a new topic on the Community Forum with the following information:\\n   * Subject: [NEW RELEASE] Plugin Name & version\\n   * Body contains:\\n      * Short description: a few words about what's new in this version.\\n      * SonarQube compatibility: unchanged or specific versions.\\n      * Link to SonarCloud project dashboard so that we can check the quality gate status\\n      * Link to your PR\\n   * If it is the first release of the plugin, please mention that the plugin should be added to the Plugin Library page. (Otherwise, we're likely to forget!)\\n\\nOnce this thread is created, someone from SonarSource will review your PR and perform the manual steps to make the version available in the Marketplace.\\n\\n\\n## How to fill in the `sonar-update-center-properties` files\\n\\n### Initial creation\\n\\n#### Create file\\nIn https://github.com/SonarSource/sonar-update-center-properties\\n\\nFile name should correspond to plugin's `pluginKey` and end with a `.properties` extension. Plugin key is set in the plugin module's pom (not the top-level pom):\\n\\n* Explicitly in a `sonar.pluginKey` property. This is the first choice / preferred\\n* Implicitly by the artifactId:\\n   * `sonar-{pluginKey}-plugin`\\n   * when the `sonar-x-plugin` pattern is not used for the artifactId, the plugin key will be the whole artifact id.\\n\\n#### Populate file\\nProvide the following meta values:\\n\\n* `category` - one of: Coverage, Developer Tools, External Analyzers, Governance, Integration, Languages, Localization, Visualization/Reporting\\n* `description`\\n* `homepageUrl`\\n* `archivedVersions`=\\\\[ leave this blank for now ]\\n* `publicVersions`=\\\\[versionId] \\n \\n* `defaults.mavenGroupId`=\\\\[the Maven `groupId`]\\n* `defaults.mavenArtifactId`=\\\\[value of the top-level `artifactId`]\\n\\nFor the initially listed version create the following block:\\n\\n* `[versionId].description`=\\\\[free text. Spaces allowed. No quoting required]\\n* `[versionId].sqVersions`=\\\\[compatibility information. See 'Filling in sqVersions compatibility ranges' below]\\n* `[versionId].date`=\\\\[release date with format: YYYY-MM-DD]\\n* `[versionId].changelogUrl`=\\n* `[versionId].downloadUrl`=\\n\\nThe full list of meta information that can be provided (potentially overriding pom file values) can be found on [GitHub](https://github.com/SonarSource/sonar-update-center/blob/master/sonar-update-center-common/src/main/java/org/sonar/updatecenter/common/Plugin.java#L154).\\n\\n\\n#### Register file\\nAdd file name (without `.properties` extension) to `plugins` value in https://github.com/SonarSource/sonar-update-center-properties/blob/master/update-center-source.properties\\n\\n\\n### Updating for new releases\\nCreate a new block in the file with this format: \\n\\n* `[versionId].description`=\\\\[free text. Spaces allowed. No quoting required]\\n* `[versionId].sqVersions`=\\\\[compatibility information. See 'Filling in sqVersions compatibility ranges' below]\\n* `[versionId].date`=\\\\[release date with format: YYYY-MM-DD]\\n* `[versionId].changelogUrl`=\\n* `[versionId].downloadUrl`=  \\n\\nAdd `[versionId]` to the `publicVersions` list. Move to `archivedVersions` any versions with identical compatibility. See also 'Filling in sqVersions, publicVersions, and archivedVersions' below\\n\\n\\n### Filling in `sqVersions`, `publicVersions` and `archivedVersions`\\n\\nThe global field `publicVersions` is a comma-delimited list of plugin versions which should be offered to the user in the Marketplace and listed in the Plugin Version Matrix.\\n\\n* Compatibility of Public versions cannot overlap\\n* Multiple versions can be in publicVersions if the versions of SonarQube they are compatible with do not overlap. \\n\\nThe global field `archivedVersions` is a comma-delimited list of no-longer-preferred plugin versions. If a user has an archived version of a plugin installed, the Marketplace will offer an upgrade to the relevant public version. Upgrades will not be offered for plugin versions which are not found in `archivedVersions`.\\n\\n* Compatibility of Archived versions can overlap\\n* If new version and previous version are compatible with the same versions of SonarQube, move the previous version into `archivedVersions`.\\n\\nThe `sqVersions` field of a release block gives the versions of SonarQube with which the plugin version is compatible. \\n\\n* Compatibility can be with a range, with a single version, or with a list of versions / ranges\\n* Compatibility is generally listed as a range in the form of [start,end]\\n* The value of start should be a SonarQube version number. \\n* The value used for end may either be a version number or the special string `LATEST`.\\n* Only one version of a plugin can be compatible with `LATEST`, and it must be the most recent release\\n* Compatibility of public versions cannot overlap, so if necessary edit the range end for the older version to stop just before the newer version's compatibility starts. \\n* You can use a wildcard at the end of a range, but not at the beginning.\\n   * ![](/images/check.svg) `[6.7,6.7.*]`\\n   * ![](/images/cross.svg) `[6.7.*,LATEST]`\\n* Multiple entries in a compatibility list should be comma-delimited, E.G. `5.5,[6.7,6.7.*],[7.3,LATEST]`\\n\\n## Suggestions to manage your plugin development\\nA project hosted in a GitHub repository can easily meet the requirements:\\n\\n* Sources are on Git - and you can easily configure them to be built by Travis CI\\n* GitHub Issues can be used as a bug tracking system\\n* GitHub Wiki or `README.md` can be used to write the documentation\\n* GitHub Releases can be used to publish your binaries\\n\\nYou can obviously use the [Community Forum](https://community.sonarsource.com/c/plugins) to ask for feedback on your plugin. You may want to post an RFF (Request for Feedback) before a release although it is not required. If you do, please close the thread before final release with a \\\"feedback period closed\\\" notice.\\n\\n\\n## Plugin deprecation\\n\\nOccasionally, there's a need to deprecate a plugin. Typically for one or more of the following reasons:\\n\\n* the functionality is obsolete or relies on deprecated platform functionality.\\n* It's no longer maintained by its authors and is buggy.\\n* It's no longer compatible with supported versions of the SonarQube platform.\\n\\nIn such case, the plugin is removed from the Marketplace.\\n\\n## FAQ\\n**Q.** What should the release candidate announcement look like?  \\nThis is up to you, but ideally, it will contain a:\\n* link to download the RC\\n* link to the version change log \\n* deadline for feedback\\n\\nAlso, you should probably mention the contributors to the version if you didn't handle it solo.\\n\\n**Q.** How long should the feedback period be?  \\nAgain, that's up to you; it's your plugin. At SonarSource, when we put out a Release Candidate (we don't always & its optional for you too), we use a minimum 72 hour feedback period (with variations for holidays, weekends, and significant feedback).\\n\\n**Q.**  Who can give feedback?  \\nAnyone! In fact, the more feedback the better. That's what makes developing in a community so wonderful. We just ask that when you have feedback, you keep it polite and respectful.\\n\\n**Q.**  What if I don't get any feedback on my release candidate?  \\nYou have two choices: agitate for more attention or consider no news to be good news and proceed with your release.\\n\\n**Q.**  What if I get feedback that should block the release?  \\nThe normal course of action here is to address the feedback and put out another release candidate. Typically, you would extend the feedback period to give people time to test the new version.\\n\\n**Q.**  What happens when the feedback period is over?  \\nIf you didn't get any feedback that you feel should block the release, then send a \\\"period closed\\\" notification on the same thread, perform the release, and in a separate thread ask that the new version be added to the Marketplace.\\n\\n**Q.**  Should the initial release of a plugin be handled any differently than subsequent releases?  \\nNot necessarily, although it's probably more critical to get feedback on an initial release. So if there's no response within the initial feedback period, you should probably agitate for more attention, instead of assuming that no news is good news. It's up to you, though.\\n\\n**Q.**  Who performs the release process?  \\nYou do.\\n\\n**Q.**  Where should the jars be posted for download?  \\nUp to you. If you're using GitHub to host your source code, then the easiest thing to do is create a project release and post downloads there.\\n\\n**Q.**  What should the release notes look like?  \\nIn the best case, it will be a publicly accessible list of work tickets handled in the version, similar to what you can get from Jira or GitHub Issues. At minimum, it will be an outline of the work done. In either case, it must reflect all significant changes.\\n\"},{\"path\":\"extend/developing-plugin\",\"content\":\"---\\ntitle: Plugin basics\\nurl: /extend/developing-plugin/\\n---\\n\\n## Building your plugin\\n\\n### Prerequisites\\nTo build a plugin, you need Java 8 and Maven 3.1 (or greater). Gradle can also be used thanks to https://github.com/iwarapter/gradle-sonar-packaging-plugin. Note that this Gradle plugin is not officially supported by SonarSource.\\n\\n### Create a Maven Project\\nThe recommended way to start is by duplicating the plugin example project: https://github.com/SonarSource/sonar-custom-plugin-example.\\n\\nIf you want to start the project from scratch, use the following Maven pom.xml template:\\n\\n[[collapse]]\\n| ## pom.xml\\n| ```\\n| <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n| <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n|   <modelVersion>4.0.0</modelVersion>\\n|   <groupId>YOUR_GROUP_ID</groupId>\\n|   <!-- it's recommended to follow the pattern \\\"sonar-{key}-plugin\\\", for example \\\"sonar-myphp-plugin\\\" -->\\n|   <artifactId>YOUR_ARTIFACT_ID</artifactId>\\n|   <version>YOUR_VERSION</version>\\n|   \\n|   <!-- this is important for sonar-packaging-maven-plugin -->\\n|   <packaging>sonar-plugin</packaging>\\n|  \\n|   <dependencies>\\n|     <dependency>\\n|       <groupId>org.sonarsource.sonarqube</groupId>\\n|       <artifactId>sonar-plugin-api</artifactId>\\n|       <!-- minimal version of SonarQube to support. -->\\n|       <version>6.7</version>\\n|       <!-- mandatory scope -->\\n|       <scope>provided</scope>\\n|     </dependency>\\n|   </dependencies>\\n|  \\n|   <build>\\n|     <plugins>\\n|       <plugin>\\n|         <groupId>org.sonarsource.sonar-packaging-maven-plugin</groupId>\\n|         <artifactId>sonar-packaging-maven-plugin</artifactId>\\n|         <version>1.18.0.372</version>\\n|         <extensions>true</extensions>\\n|         <configuration>\\n|           <!-- the entry-point class that extends org.sonar.api.SonarPlugin -->\\n|           <pluginClass>com.mycompany.sonar.reference.ExamplePlugin</pluginClass>\\n|            \\n|           <!-- advanced properties can be set here. See paragraph \\\"Advanced Build Properties\\\". -->\\n|         </configuration>\\n|       </plugin>\\n|     </plugins>\\n|   </build>\\n| </project>\\n| ```\\n\\n### Build\\nTo build your plugin project, execute this command from the project root directory:  \\n`mvn clean package`  \\nThe plugin jar file is generated in the project's `target/` directory.\\n\\n### Deploy\\n**\\\"Cold\\\" Deploy**  \\nThe standard way to install the plugin for regular users is to copy the JAR artifact, from the `target/` directory  to the `extensions/plugins/` directory of your SonarQube installation then start the server. The file `logs/sonar.log` will then contain a log line similar to:  \\n`Deploy plugin Example Plugin / 0.1-SNAPSHOT`  \\nScanner extensions such as sensors are immediately retrieved and loaded when scanning source code. \\n\\n### Debug\\n**Debugging web server extensions**  \\n\\n1. Edit conf/sonar.properties and set: `sonar.web.javaAdditionalOpts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000`\\n1. Install your plugin by copying its JAR file to extensions/plugins\\n1. Start the server. The line `Listening for transport dt_socket at address: 5005` is logged in  `logs/sonar.log`.\\n1. Attach your IDE to the debug process (listening on port 8000 in the example)\\n\\n**Debugging compute engine extensions**  \\nSame procedure as for web server extensions (see previous paragraph), but with the property: `sonar.ce.javaAdditionalOpts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000`\\n\\n**Debugging scanner extensions**  \\n```\\nexport SONAR_SCANNER_OPTS=\\\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000\\\"\\ncd /path/to/project\\nsonar-scanner \\n```\\nWhen using the Scanner for Maven, then simply execute:\\n```\\ncd /path/to/project\\nmvnDebug sonar:sonar\\n# debug port is 8000\\n```\\n\\n### Advanced Build Properties\\nPlugin properties are defined in the file `META-INF/MANIFEST.MF` of the plugin .jar file.\\n\\nMost of them are defined through the `<configuration>` section of the [sonar-packaging-maven-plugin](https://jira.sonarsource.com/browse/PACKMP). Some are taken from standard pom nodes Effective values are listed at the end of the build log:\\n```\\n[INFO] --- sonar-packaging-maven-plugin:1.15:sonar-plugin (default-sonar-plugin) @ sonar-widget-lab-plugin ---\\n[INFO] -------------------------------------------------------\\n[INFO] Plugin definition in Marketplace\\n[INFO]     Key: widgetlab\\n[INFO]     Name: Widget Lab\\n[INFO]     Description: Additional widgets\\n[INFO]     Version: 1.9-SNAPSHOT\\n[INFO]     Entry-point Class: org.codehaus.sonar.plugins.widgetlab.WidgetLabPlugin\\n[INFO]     Required Plugins:\\n[INFO]     Use Child-first ClassLoader: false\\n[INFO]     Base Plugin:\\n[INFO]     Homepage URL: https://redirect.sonarsource.com/plugins/widgetlab.html\\n[INFO]     Minimal SonarQube Version: 4.5.1\\n[INFO]     Licensing: GNU LGPL 3\\n[INFO]     Organization: Shaw Industries\\n[INFO]     Organization URL: http://shawfloors.com\\n[INFO]     Terms and Conditions:\\n[INFO]     Issue Tracker URL: http://jira.codehaus.org/browse/SONARWIDLB\\n[INFO]     Build date: 2015-12-15T18:28:54+0100\\n[INFO]     Sources URL: https://github.com/SonarCommunity/sonar-widget-lab\\n[INFO]     Developers: G. Ann Campbell,Patroklos Papapetrou\\n[INFO] -------------------------------------------------------\\n[INFO] Building jar: /dev/sonar-widget-lab/target/sonar-widget-lab-plugin-1.9-SNAPSHOT.jar \\n```\\n\\nSupported standard pom node properties:\\n\\nMaven Property|Manifest Key|Notes\\n---|---|---\\n`version` | Plugin-Version | (required) Plugin version as displayed in page \\\"Marketplace\\\". Default: ${project.version}\\n- | Sonar-Version | (required) Minimal version of supported SonarQube at runtime. For example if value is 5.2, then deploying the plugin on versions 5.1 and lower will fail. Default value is given by the version of sonar-plugin-api dependency. It can be overridden with the Maven property sonarQubeMinVersion (since sonar-packaging-maven-plugin 1.16). That allows in some cases to use new features of recent API and to still be compatible at runtime with older versions of SonarQube. Default: version of dependency sonar-plugin-api\\n`license` | Plugin-License | Plugin license as displayed in page \\\"Marketplace\\\". Default `${project.licenses}`\\n`developers` | Plugin-Developers | List of developers displayed in page \\\"Marketplace\\\". Default: `${project.developers}`\\n\\nSupported `<configuration>` properties:\\n\\nMaven Property|Manifest Key|Notes\\n---|---|---\\n`pluginKey` | Plugin-Key | (required) Contains only letters/digits and is unique among all plugins. Examples: groovy, widgetlab. Constructed from `${project.artifactId}.` Given an artifactId of: `sonar-widget-lab-plugin`, your pluginKey will be: `widgetlab`\\n`pluginClass` | Plugin-Class | (required) Name of the entry-point class that extends `org.sonar.api.SonarPlugin`. Example: `org.codehaus.sonar.plugins.widgetlab.WidgetLabPlugin` \\n`pluginName` | Plugin-Name | (required) Displayed in the page \\\"Marketplace\\\". Default: `${project.name}`\\n`pluginDescription` | Plugin-Description | Displayed in the page \\\"Marketplace\\\". Default: `${project.description}`\\n`pluginUrl` |  Plugin-Homepage | Homepage of website, for example https://github.com/SonarQubeCommunity/sonar-widget-lab `${project.url}`\\n`pluginIssueTrackerUrl` |  Plugin-IssueTrackerUrl | Example: https://github.com/SonarQubeCommunity/sonar-widget-lab/issues. Default: `${project.issueManagement.url}`\\n`pluginTermsConditionsUrl`  |  Plugin-TermsConditionsUrl | Users must read this document when installing the plugin from Marketplace. Default: `${sonar.pluginTermsConditionsUrl}`\\n`useChildFirstClassLoader` | Plugin-ChildFirstClassLoader | Each plugin is executed in an isolated classloader, which inherits a shared classloader that contains API and some other classes. By default the loading strategy of classes is parent-first (look up in shared classloader then in plugin classloader). If the property is true, then the strategy is child-first. This property is mainly used when building plugin against API < 5.2, as the shared classloader contained many 3rd party libraries (guava 10, commons-lang, ...) false\\n`basePlugin` | Plugin-Base | If specified, then the plugin is executed in the same classloader as basePlugin.\\n`pluginSourcesUrl` | Plugin-SourcesUrl | URL of SCM repository for open-source plugins. Displayed in page \\\"Marketplace\\\". Default: `${project.scm.url}`\\n`pluginOrganizationName` | Plugin-Organization | Organization which develops the plugin, displayed in the page \\\"Marketplace\\\". Default: `${project.organization.name}`\\n`pluginOrganizationUrl` | Plugin-OrganizationUrl | URL of the organization, displayed in the page \\\"Marketplace\\\". Default: `${project.organization.url}`\\n`sonarLintSupported` | SonarLint-Supported | Whether the (language) plugin supports SonarLint or not. Only SonarSource analyzers (SonarJava, SonarJS, ...) and custom rules plugins for SonarSource analyzers should set this to true. \\n`pluginDisplayVersion` | Plugin-Display-Version | The version as displayed in SonarQube administration console. By default it's the raw version, for example \\\"1.2\\\", but can be overridden to \\\"1.2 (build 12345)\\\" for instance. Supported in sonar-packaging-maven-plugin 1.18.0.372. Default: `${project.version}`\\n\\n\\nThe Maven sonar-packaging-maven-plugin supports also these properties:\\n\\nMaven Property|Manifest Key|Notes\\n---|---|---\\n`addMavenDescriptor` |Copy pom file inside the directory META-INF of generated JAR file? | Boolean. Default: `${sonar.addMavenDescriptor}` / `true`.\\n`skipDependenciesPackaging` | Do not copy Maven dependencies into JAR file. | Default: `${sonar.skipDependenciesPackaging} / `false`.\\n\\nOther Manifest fields:  \\n\\n* `Implementation-Build` - Identifier of build or commit, for example the Git sha1 \\\"94638028f0099de59f769cdca776e506684235d6\\\". It is displayed for debugging purpose in logs when SonarQube server starts.\\n\\n## API basics\\n\\n### Extension points\\nSonarQube provides extension points for its three technical stacks:\\n\\n* Scanner, which runs the source code analysis\\n* Compute Engine, which consolidates the output of scanners, for example by \\n   * computing 2nd-level measures such as ratings\\n   * aggregating measures (for example number of lines of code of project = sum of lines of code of all files)\\n   * assigning new issues to developers\\n   * persisting everything in data stores\\n* Web application\\n\\nExtension points are not designed to add new features but to complete existing features. Technically they are contracts defined by a Java interface or an abstract class annotated with @ExtensionPoint. The exhaustive list of extension points is available in the javadoc.\\n\\nThe implementations of extension points (named \\\"extensions\\\") provided by a plugin must be declared in its entry point class, which implements org.sonar.api.Plugin and which is referenced in pom.xml:\\n\\nExamplePlugin.java\\n```\\npackage org.sonarqube.plugins.example;\\nimport org.sonar.api.Plugin;\\n \\npublic class ExamplePlugin implements Plugin {\\n  @Override\\n  public void define(Context context) {\\n    // implementations of extension points\\n    context.addExtensions(FooLanguage.class, ExampleProperties.class);\\n  }\\n}\\n```\\npom.xml\\n```\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project>\\n  ...\\n  <build>\\n    <plugins>\\n      <plugin>\\n        <groupId>org.sonarsource.sonar-packaging-maven-plugin</groupId>\\n        <artifactId>sonar-packaging-maven-plugin</artifactId>\\n        <extensions>true</extensions>\\n        <configuration>\\n          <pluginClass>org.sonarqube.plugins.example.ExamplePlugin</pluginClass>\\n        </configuration>\\n      </plugin>\\n    </plugins>\\n  </build>\\n</project>\\n```\\n### Lifecycle\\nA plugin extension exists only in its associated technical stacks. A scanner sensor is for example instantiated and executed only in a scanner runtime, but not in the web server nor in Compute Engine. The stack is defined by the annotations [@ScannerSide](http://javadocs.sonarsource.org/latest/apidocs/org/sonar/api/batch/ScannerSide.html), [@ServerSide](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/server/ServerSide.html) (for web server) and [@ComputeEngineSide](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/ce/ComputeEngineSide.html). \\n\\nAn extension can call core components or another extension of the same stack. These dependencies are defined by constructor injection:\\n\\n```\\n@ScannerSide\\npublic class Foo {\\n  public void call() {}\\n}\\n \\n// Sensor is a scanner extension point \\npublic class MySensor implements Sensor {\\n  private final Foo foo;\\n  private final Languages languages;\\n  \\n  // Languages is core component which lists all the supported programming languages.\\n  public MySensor(Foo foo, Languages languages) {   \\n    this.foo = foo;\\n    this.languages = languages;\\n  }\\n  \\n  @Override\\n  public void execute(SensorContext context) {\\n    System.out.println(this.languages.all());\\n    foo.call();\\n  }\\n}\\n \\n  \\npublic class ExamplePlugin implements Plugin {\\n  @Override\\n  public void define(Context context) {\\n    // Languages is a core component. It must not be declared by plugins.\\n    context.addExtensions(Foo.class, MySensor.class);\\n  }\\n}\\n```\\n\\nIt is recommended not to call other components in constructors. Indeed, they may not be initialized at that time. Constructors should only be used for dependency injection.\\n\\n[[warning]]\\n| ![](/images/exclamation.svg) Compilation does not fail if incorrect dependencies are defined, such as a scanner extension trying to call a web server extension. Still it will fail at runtime when plugin is loaded.\\n\\n### Third-party Libraries\\nPlugins are executed in their own isolated classloaders. That allows the packaging and use of 3rd-party libraries without runtime conflicts with core internal libraries or other plugins. Note that since version 5.2, the SonarQube API does not bring transitive dependencies, except SLF4J. The libraries just have to be declared in the pom.xml with default scope \\\"compile\\\":\\n\\npom.xml\\n```\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project>\\n  ...\\n  <dependencies>\\n    ...\\n    <dependency>\\n      <groupId>commons-codec</groupId>\\n      <artifactId>commons-codec</artifactId>\\n      <version>1.10</version>\\n    </dependency>\\n </dependencies>\\n</project>\\n```\\nTechnically the libraries are packaged in the directory META-INF/lib of the generated JAR file. An alternative is to shade libraries, for example with maven-shade-plugin. That minimizes the size of the plugin .jar file by copying only the effective used classes.\\n\\n[[info]]\\n| ![](/images/info.svg) The command `mvn dependency:tree` gives the list of all dependencies, including transitive ones.\\n\\n### Configuration\\nThe core component [`org.sonar.api.config.Configuration`](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/config/Configuration.html) provides access to configuration. It deals with default values and decryption of values. It is available in all stacks (scanner, web server, Compute Engine). As recommended earlier, it must not be called from constructors.\\n\\nMyExtension.java\\n```\\npublic class MyRules implements RulesDefinition {\\n  private final Configuration config;\\n  \\n  public MyRules(Configuration config) {   \\n    this.config = config; \\n  }\\n  \\n  @Override\\n  public void define(Context context) {\\n    int value = config.getInt(\\\"sonar.property\\\").orElse(0);\\n  }\\n}\\n```\\nScanner sensors can get config directly from SensorContext, without using constructor injection:\\n\\nMySensor.java\\n```\\npublic class MySensor extends Sensor {\\n  @Override\\n  public void execute(SensorContext context) {\\n    int value = context.config().getInt(\\\"sonar.property\\\").orElse(0);\\n  }\\n}\\n```\\n\\nIn the scanner stack, properties are checked in the following order, and the first non-blank value is the one that is used:\\n\\n1. System property\\n1. Scanner command-line (-Dsonar.property=foo for instance)\\n1. Scanner tool (<properties> of scanner for Maven for instance) \\n1. Project configuration defined in the web UI \\n1. Global configuration defined in the web UI \\n1. Default value\\n\\nPlugins can define their own properties so that they can be configured from web administration console. The extension point org.sonar.api.config.PropertyDefinition must be used :\\n```\\npublic class ExamplePlugin implements Plugin {\\n  @Override\\n  public void define(Context context) {\\n    context.addExtension(\\n      PropertyDefinition.builder(\\\"sonar.my.property\\\")\\n       .name(\\\"My Property\\\")\\n       .description(\\\"This is the description displayed in web admin console\\\")\\n       .defaultValue(\\\"42\\\")\\n       .build()\\n    );\\n  }\\n}\\n```\\n\\n[[info]]\\n| ![](/images/info.svg) Values of the properties suffixed with `.secured` are not available to non-authorized users (anonymous and users without project or global administration rights). `.secured` is needed for passwords, for instance.\\n\\nThe annotation [`@org.sonar.api.Property`](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/Property.html) can also be used on an extension to declare a property, but org.sonar.api.config.PropertyDefinition is preferred.\\n```\\n@Properties(\\n    @Property(key=\\\"sonar.my.property\\\", name=\\\"My Property\\\", defaultValue=\\\"42\\\")\\n)\\npublic class MySensor implements Sensor {\\n  // ...\\n}\\n  \\npublic class ExamplePlugin implements Plugin {\\n  @Override\\n  public void define(Context context) {\\n    context.addExtension(MySensor.class);\\n  }\\n}\\n```\\n\\n### Logging\\nThe class [`org.sonar.api.utils.log.Logger`](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/utils/log/Logger.html) is used to log messages to scanner output, web server logs/sonar.log, or Compute Engine logs (available from administration web console). It's convenient for unit testing (see class [`LogTester`](http://javadocs.sonarsource.org/latest/apidocs/index.html?org/sonar/api/utils/log/LogTester.html)).\\n```\\nimport org.sonar.api.utils.log.*;\\npublic class MyClass {\\n  private static final Logger LOGGER = Loggers.get(MyClass.class);\\n \\n  public void doSomething() {\\n    LOGGER.info(\\\"foo\\\");\\n  }\\n}\\n```\\nInternally [SLF4J](http://www.slf4j.org/) is used as a facade of various logging frameworks (log4j, commons-log, logback, java.util.logging). That allows all these frameworks to work at runtime, such as when they are required for a 3rd party library. SLF4J loggers can also be used instead of org.sonar.api.utils.log.Logger. Read the [SLF4J manual](http://www.slf4j.org/manual.html) for more details.\\n\\nAs an exception, plugins must not package logging libraries. Dependencies like SLF4J or log4j must be declared with scope \\\"provided\\\".\\n\\n### Exposing APIs to Other Plugins\\nThe common use case is to write a language plugin that will allow some other plugins to contribute additional rules (see for example how it is done in SonarJava). The main plugin will expose some APIs that will be implemented/used by the \\\"rule\\\" plugins.\\n\\nPlugins are loaded in isolated classloaders. It means a plugin can't access another plugin's classes. There is an exception for package names following pattern `org.sonar.plugins.<pluginKey>.api`. For example all classes in a plugin with the key myplugin that are located in `org.sonar.plugins.myplugin.api` are visible to other plugins.\\n\\n### Serving Static Resources\\nIf you need to serve static resources from your plugin such as images or JavaScript files, place them in a directory under `resources` named `static` (`myplugin/src/main/resources/static`). At runtime they'll be available from `http://{server}/static/{pluginKey}/{file}`. \\n\\n\\n## Versioning and API Deprecation\\n### Versioning Strategy\\nThe goal of this versioning strategy is both to:\\n\\n* Release often, release early in order to get quick feedback from the SonarQube community\\n* Release stable versions of the SonarQube platform for companies whose main priority is to set up a very stable environment. Even if the price for such stable environments is missing out on the latest, sexy SonarQube features\\n* Support the API deprecation strategy (see next section)\\n\\nThe rules are:\\n\\n* Each ~two months a new version of SonarQube is released. This version should increment the minor digit of the previous version (ex: 4.2 -> 4.3)\\n* After three (or more) releases, a bug-fix version is released, and becomes the new LTS. The major digit of the subsequent version is incremented to start a new cycle (ex: 5.6 -> 6.0)\\n\\nAnd here is the strategy in action:\\n```\\n4.4 -> 4.5 -> 5.0 -> 5.1 -> 5.2 -> ... -> 5.5 -> 6.0 -> ...     <- New release every ~2 months\\n        |                                  |\\n      4.5.1 -> 4.5.2 -> ...              5.5.1 -> 5.5.2 -> ...  <- New LTS\\n```\\n\\n### API Deprecation Strategy\\nThe goal of this deprecation strategy is to make sure that deprecated APIs will be dropped without side-effects at a given planned date. The expected consequence of such strategy is to ease the evolution of the SonarQube API by making such refactoring painless.\\n\\nThe rules are:\\n\\n* An API must be deprecated before being dropped\\n* A deprecated API must be fully supported until its drop (For instance the implementation of a deprecated method can't be replaced by `throw new UnsupportedOperationException())`\\n* If an API is deprecated in version X.Y, this API will be dropped in version (X+2).0. Example: an API deprecated in 4.1 is supported in 4.2, 4.3, 5.0, 5.1, 5.2, 5.3 and is dropped in version 6.0.\\n* According to the versioning strategy, that means that an API can remain deprecated before being dropped during 6 to 12 months.\\n* Any release of a SonarQube plugin must at least depend on the latest LTS version of the SonarQube API\\n* For each SonarQube plugin there must at least one release on each LTS version of SonarQube, which means at least one release each 6 months.\\n* No use of deprecated APIs is accepted when releasing a plugin. It raises a critical issue in SonarQube analysis. This issue can't be postponed.\\n* No deprecated API introduced 2 major versions ago is accepted when releasing SonarQube. It raises a critical issue in SonarQube analysis. This issue can't be postponed.\\n* An API is marked as deprecated with both:\\n   * the annotation @Deprecated\\n   * the javadoc tag @deprecated whose message must start with \\\"in x.y\\\", for example:\\n    ```\\n    /**\\n     * @deprecated in 4.2. Replaced by {@link #newMethod()}.\\n     */\\n    @Deprecated\\n    public void foo() {\\n    ```\\n\\n## API Changes\\n\\n### Release 7.9\\nNo changes\\n\\n### Release 7.8\\n\\n![](/images/check.svg) Added\\n* `org.sonar.api.web.WebAnalytics`\\n\\n![](/images/exclamation.svg) Deprecated\\n* `org.sonar.api.i18n.I18`\\n* `org.sonar.api.SonarQubeVersion` use `org.sonar.api.SonarRuntime` instead\\n* `org.sonar.api.profiles.XMLProfileParser`\\n* `org.sonar.api.notifications.NotificationChannel`\\n\\n![](/images/cross.svg) Removed\\n* Pico components relying on reflection to have their `start` or `stop` method called. Make your component implements `org.sonar.api.Startable` instead.\\n\\n### Release 7.7\\n\\n![](/images/check.svg) Added\\n* ` org.sonar.api.batch.scm.ScmProvider#ignoreCommand`\\n\\n![](/images/exclamation.svg) Deprecated\\n* `org.sonar.api.batch.fs.InputFile::status`\\n* `org.sonar.api.resources.Qualifiers#BRC`\\n\\n![](/images/cross.svg) Removed\\n* The preview/issues mode of scanner has been removed\\n\\n### Release 7.6\\n\\n![](/images/info.svg) Changed\\n\\n* `PostJob` moved to project level IoC container\\n* `InputFileFilter` moved to project level IoC container\\n\\n![](/images/check.svg) Added\\n\\n* New annotation `org.sonar.api.scanner.ScannerSide` to mark (project level) scanner components\\n* `org.sonar.api.batch.fs.InputProject` to create issues on project\\n* `org.sonar.api.scanner.ProjectSensor` to declare Sensors that only run at project level\\n\\n![](/images/exclamation.svg) Deprecated\\n\\n* `org.sonar.scanner.issue.IssueFilter` deprecated\\n* `org.sonar.api.batch.InstantiationStrategy` deprecated\\n* `org.sonar.api.batch.ScannerSide` deprecated\\n* `org.sonar.api.batch.fs.InputModule` deprecated\\n* Concept of global Sensor is deprecated (use `ProjectSensor` instead)\\n\\n![](/images/cross.svg) Removed\\n\\n* Support of scanner tasks was removed\\n* `RulesProfile` is no longer available for scanner side components (use `ActiveRules` instead)\\n\\n### Release 7.5\\nNo changes\\n\\n### Release 7.4\\n![](/images/info.svg) Changed\\n\\n* Allow identity provider to not provide login\\n\\n![](/images/check.svg) Added\\n\\n* Allow sensors to report adhoc rules metadata\\n\\n![](/images/cross.svg) Removed\\n\\n* `org.sonar.api.rules.RuleFinder` removed from scanner side\\n* `sonar-channel` removed from plugin classloader\\n* stop support of plugins compiled with API < 5.2\\n\\n### Release 7.3\\n\\n![](/images/check.svg) Added\\n\\n* `RulesDefinitions` supports HotSpots and security standards\\n\\n![](/images/exclamation.svg) Deprecated\\n* `org.sonar.api.batch.AnalysisMode` and `org.sonar.api.issue.ProjectIssues` since preview mode is already deprecated for a while\\n\\n### Release 7.2\\n![](/images/check.svg) Added\\n* `org.sonar.api.batch.sensor.SensorContext#newExternalIssue` to report external issues\\n* `org.sonar.api.batch.sensor.SensorContext#newSignificantCode` to report part of the source file that should be used for issue tracking\\n* `org.sonar.api.scan.issue.filter.FilterableIssue#textRange`\\n\\n![](/images/exclamation.svg) Deprecated\\n* org.sonar.api.scan.issue.filter.FilterableIssue#line\\n\\n### Release 7.1\\n![](/images/check.svg) Added\\n* `org.sonar.api.Plugin.Context#getBootConfiguration`\\n* `org.sonar.api.server.rule.RulesDefinition.NewRule#addDeprecatedRuleKey` to support deprecated rule keys\\n\\n### Release 7.0\\n![](/images/check.svg) Added\\n* `org.sonar.api.batch.scm.ScmProvider#relativePathFromScmRoot`, `org.sonar.api.batch.scm.ScmProvider#branchChangedFiles` and `org.sonar.api.batch.scm.ScmProvider#revisionId` to improve branch and PR support\\n\\n### Release 6.7\\nNo changes\\n\"},{\"path\":\"extend/executable-lines\",\"content\":\"---\\ntitle: Executable Lines\\nurl: /extend/executable-lines/\\n---\\n \\nThese are the guidelines that SonarSource uses internally when defining executable lines for a language. Community plugins are not required to adhere to these guidelines. They are provided here only in case they are useful.\\n\\n## Things that are executable\\nExecutable lines data is used to calculate missing test coverage for files that are not included in coverage reports. Ideally, executable line counts will be at or just under what coverage engines would calculate.\\n\\nGenerally, each line containing a statement should count as an executable line, with the exception that compound statements ({}) are ignored, although their contents are not\\n\\nSo:\\n```\\nvoid doTheThing ()        // +0\\n{                         // +0\\n  String fname=\\\"Finn\\\";    // +1\\n  etc();                  // +1\\n}                         // +0\\n```\\n\\n## Things that are ignored\\n### !Statement: +0 \\nSince some coverage engines mark these things as executable, it's worth stating explicitly that we will ignore them:\\n\\n* lines containing only punctuation: }, });, ;\\n* the method signature of a method definition\\n\\n### Imports, Declarations: +0\\nImports, package and namespace statements, declarations, and a few other things demonstrated below are ignored, \\n```\\npackage foo;     // +0\\nnamespace bar {  // +0\\n  ...\\n}\\n  \\nimport java.util.ArrayList;  // +0\\n#include <stdio>             // +0\\n  \\npublic interface FooFace {  // +0\\n  void doFoo();             // +0\\n}\\npublic class Foo1 implements FooFace {  // +0\\n  private String name;                  // +0\\n}\\nstruct PairWithOperator { // +0\\n  int x;                  // +0\\n  int y;                  // +0\\n  \\n  bool operator==(PairWithOperator rhs) const {  // +0\\n    return x == rhs.x && y == rhs.y;             // +1\\n  }\\n}\\n  \\nclass C {\\n  C(const C&) =default;  // +0 (explicit inheritance of parent method)\\n}\\n \\nusing Vec = std::vector<T,MyAllocator<T>>;       // +0\\n  \\nstatic {                 // +0\\n  ...\\n}\\n \\n01  ERROR-MESSAGE.                                      *> +0\\n        02  ERROR-TEXT  PIC X(132) OCCURS 10 TIMES      *> +0\\n                                   INDEXED BY ERROR-INDEX.\\n77  ERROR-TEXT-LEN      PIC S9(9)  COMP VALUE +132.     *> +0\\n```\\n\\n### Location\\nThe presence of executable code on a line makes the entire line executable.\\n\\nIf a statement is split over multiple lines, the line to be marked executable is the first one with executable code. \\nGiven that a for loop is considered executable:\\n```\\nfor         // +1\\n  (         // +0\\n   int i=0; // +0\\n   i < 10;  // +0\\n   i++      // +0\\n  )         // +0\\n{           // +0\\n}\\n```\\nRegardless of the number of lines across which nested statements are spread, the executable line count should only be incremented by one, since typically the execution of one naturally follows from the other. \\n\\n```\\nfoo(1, bar());  // +1\\n  \\nfoo(1,          // +1\\n    bar());     // +0\\n```\\nWe ignore here the possibility that `bar()` could throw an exception, preventing `foo` from being executed.\\n\\n## Exceptions\\n### Python\\nBased on observations from code on SonarCloud, `# pragma: no cover` exempts a block from coverage\\n\\n![# pragma: no cover example](/images/executable-lines-python-exception.png)\\n\\n### JavaScript\\nIt seems to be accepted practice in JavaScript to mark variable declarations executable, so we will too. E.G.\\n```\\nvar a;  // +1\\n```\\n\"},{\"path\":\"extend/extend-web-app\",\"content\":\"---\\ntitle: Adding pages to the webapp\\nurl: /extend/extend-web-app/\\n---\\nSonarQube's UI is built as a Single Page Application using [React](https://reactjs.org/). It provides the ability to add a new pages to the UI using JavaScript. A page (or page extension) is a self-contained JavaScript application that runs in the SonarQube environment. You can find the example of page extensions in the [SonarQube](https://github.com/SonarSource/sonarqube) or [sonar-custom-plugin-example](https://github.com/SonarSource/sonar-custom-plugin-example/tree/7.x/) repositories on GitHub.\\n\\nBefore reading this guide, make sure you know how to [build, deploy, and debug a plugin](/extend/developing-plugin/).\\n\\n## Step 1. Create a Java class implementing PageDefinition\\n\\nFor each page, you'll need to set a key and a name. The page key should have the format `plugin_key/page_id` (e.g.: `governance/project_dump`). The `plugin_key` is computed from the `<artifactId>` in your `pom.xml`, or can be set explicitly in the pom using the `<pluginKey>` parameter in the `sonar-packaging-maven-plugin` configuration. All the pages should be declared in this class.\\n\\nExample:\\n\\n```\\nimport org.sonar.api.web.page.Page;\\nimport org.sonar.api.web.page.PageDefinition;\\nimport org.sonar.api.web.page.Context;\\n\\nimport static org.sonar.api.web.page.Page.Scope.COMPONENT;\\nimport static org.sonar.api.web.page.Page.Qualifier.VIEW;\\nimport static org.sonar.api.web.page.Page.Qualifier.SUB_VIEW;\\n \\npublic class MyPluginPageDefinition implements PageDefinition {\\n  @Override\\n  public void define(Context context) {\\n    context\\n      .addPage(Page.builder(\\\"my_plugin/global_page\\\")\\n        .setName(\\\"Global Page\\\")\\n        .build())\\n      .addPage(Page.builder(\\\"my_plugin/project_page\\\")\\n        .setName(\\\"Project Page\\\")\\n        .setScope(COMPONENT)\\n        .build())\\n      .addPage(Page.builder(\\\"my_plugin/portfolio_page\\\")\\n        .setName(\\\"Portfolio Page\\\")\\n        .setScope(COMPONENT)\\n        .setComponentQualifiers(VIEW, SUB_VIEW)\\n        .build())\\n      .addPage(Page.builder(\\\"my_plugin/admin_page\\\")\\n        .setName(\\\"Admin Page\\\")\\n        .setAdmin(true)\\n        .build());\\n  }\\n}\\n```\\n\\n### Configuring each page\\n\\nThere are 3 settings available when you define the page extensions using the `PageDefinition` class:\\n\\n* `setAdmin(boolean admin)`: flag this page as restricted to users with \\\"administer\\\" permission. Defaults to `false`.\\n* `setScope(org.sonar.api.web.page.Page.Scope scope)`: set the scope of this page. Available scopes are `GLOBAL` (default), which will add this page to the main menu, and `COMPONENT`, which will add the page to a project, application, or portfolio menu (applications and portfolios only apply to Enterprise Edition and above).\\n* `setComponentQualifiers(org.sonar.api.web.page.Qualifier... qualifiers)`: if `setScope()` is set to `COMPONENT`, this sets to what kind of component the page applies to. Available qualifiers are `PROJECT`, `APP`, `VIEW` (portfolio), and `SUB_VIEW` (`APP`, `VIEW`, and `SUB_VIEW` only apply to Enterprise Edition and above). You can pass multiple qualifiers. If no qualifier is set, it will apply to all types.\\n\\n## Step 2. Create a JavaScript file per page\\n\\nThe `PageDefinition` will register each key as an available route in SonarQube. Whenever this route is visited, SonarQube will asynchronously fetch a single JavaScript file from your plugin's `/static/` directory, and boot up your page's application. This file should have the same name as the `page_id` you defined in your `PageDefinition` class. In the example in Step 1, you would need 4 different JavaScript files:\\n\\n* `/static/global_page.js`\\n* `/static/project_page.js`\\n* `/static/portfolio_page.js`\\n* `/static/admin_page.js`\\n\\nEach file *must* call the global `window.registerExtension()` function, and pass its *full key* as a first argument (`plugin_key/page_id`, e.g.: `governance/project_dump`). The second argument is the *start* callback. This function will be called once your page is started, and receive information about the current page as an argument (see below). The return value of the start callback depends on how you want to implement your page:\\n\\n* If you want to use [React](https://reactjs.org/), you should return a React Component:\\n  ```\\n  // static/global_page.js\\n  import React from \\\"react\\\";\\n  import App from \\\"./components/App\\\";\\n  \\n  window.registerExtension('my_plugin/global_page', function (options) {\\n    return <App options={options} />\\n  });\\n  ```\\n* If you want to use any other framework, you should perform any start logic directly inside the start function body, and **return a shutdown callback**:\\n  ```\\n  // static/global_page.js\\n  const init = require(\\\"./my-app/init\\\");\\n  \\n  window.registerExtension('my_plugin/global_page', function (options) {\\n    // Start up my custom application, passing the DOM element which will serve as\\n    // the container.\\n    init.boot(options.el, options.currentUser, options.component);\\n  \\n    // Whenever the user leaves the page, cleanly shut everything down\\n    // (i.e., remove event listeners, stop running timers, etc).\\n    return function () {\\n      init.removeEventListeners();\\n      init.clearState();\\n      init.shutdown();\\n    };\\n  });\\n  ```\\n\\nThe `options` object will contain the following:\\n* `options.el`: a DOM node you must use to inject your content.\\n* `options.currentUser`: information about the current user.\\n* (optional) `options.component`: contains the information of the current project, application, or portfolio.\\n\\n[[info]]\\n| SonarQube doesn't guarantee any JavaScript library availability at runtime (except React). If you need a library, include it in the final file.\\n\\n## Examples\\n\\nIt is highly recommended you check out [sonar-custom-plugin-example](https://github.com/SonarSource/sonar-custom-plugin-example/tree/7.x/). It contains detailed examples using several front-end frameworks, and its code is thoroughly documented. It also describes how to run a local development server to speed up the front-end development, without requiring a full rebuild and re-deploy to test your changes.\\n\"},{\"path\":\"extend/i18n\",\"content\":\"---\\ntitle: Internationalization\\nurl: /extend/i18n/\\n---\\n\\nThis page gives guidelines to I18n for:\\n\\n* Plugin developers who would like to apply the i18n mechanism in their own plugins, so that these plugins can be available in several languages.\\n* People who would like to help the community by making the platform available in a new language.\\n\\n## Principles\\nAlthough the basics of the i18n mechanism are the same for every part of the ecosystem, the packaging differs depending on what you are developing:\\n\\n* Translations for SonarQube: making SonarQube available in a new language requires you to develop and publish a new Language Pack plugin. \\n   * By default SonarQube embeds the English Pack.\\n   * All other Language Pack plugins, like the French Pack plugin, are maintained by the community, and are available through Marketplace (category \\\"Localization\\\").\\n* Translations for the SonarQube Community Plugins: open-source plugins from the SonarQube Community must embed only the bundles for the default locale (en). Translations will be done in the Language Pack plugins.\\n\\n* Translations for other Plugins: closed-source/commercial/independent plugins must embed the bundles for the default locale and the translations for every language they want to support.\\n\\n## Translation Bundles\\nLocalized messages are stored in properties files:\\n\\n* These are regular properties files with key/value pairs where you put most translations\\n* These files must be stored in the org.sonar.l10n package (usually in the `src/main/resources/org/sonar/l10n` directory)\\n* The names of these files must follow the convention `<key of the plugin to translate>_<language>.properties`, for example `widgetlabs_fr.properties` or `core_fr.properties` for the core bundle. See `sonar-packaging-maven-plugin` for details on plugin key derivation.\\n* Messages can accept arguments. Such entries would look like:\\n   * `myplugin.foo=This is a message with 2 params: the first \\\"{0}\\\" and the second \\\"{1}\\\".`\\n* Messages can accept pluralization. Such entries would look like:\\n   * `myplugin.foo={x, number} {x, plural, one {thing} other {things}}`\\n   * We use it for example with a combination of 2 labels: `component_navigation.last_analysis_had_warnings=Last analysis had {warnings}` and `component_navigation.x_warnings={warningsCount, number} {warningsCount, plural, one {warning} other {warnings}}`. This renders `Last analysis had 1 warning` if `warningsCount` equals 1 and `Last analysis had 2 warnings` otherwise, in this case 2.\\n   * Learn more about this syntax [here](https://formatjs.io/guides/message-syntax/#plural-format).\\n   \\n[[warning]]\\n| **UTF-8 encoding**  \\n| In the Java API, properties files are supposed to be encoded in ISO-8859 charset. Without good tooling, it can be quite annoying to write translations for languages that do not fit in this charset.\\n| This is why we decided to encode the properties files in UTF-8, and let Maven turn them into ASCII at build time thanks to native2ascii-maven-plugin (check the French plugin pom.xml). This makes the process of writing translations with a standard editor far easier.\\n\\n### How to read localized messages from a plugin extension?\\nThe component `org.sonar.api.i18n.I18n` is available for web server extensions. Scanner extensions cannot load bundles.\\n\\n## Writing a Language Pack\\nA Language Pack defines bundles for SonarQube and/or plugins.\\n\\n### Creating a Language Pack\\nThe easiest way to create a new pack is to copy the [Chinese Pack](https://github.com/SonarQubeCommunity/sonar-l10n-zh) and adapt it to your language.\\n\\n### Maintaining a Language Pack\\nIn the pom file, set the versions of SonarQube and of the plugins you want to translate. When it's time to update your language pack for a new version of SonarQube or a plugin, the easiest way to see what keys are missing is to run:\\n```\\nmvn test\\n```\\nIf the build fails, it means that some keys are missing. Go to `target/l10n` to check the reports for each bundle. Missing keys are listed under 'Missing translations are:'\\n```\\nMissing translations are:\\ncode_viewer.no_info_displayed_due_to_security=Due to security settings, no information can be displayed.\\ncomparison.version.latest=LATEST\\n...\\n```\\n\\nEach time you add a new bundle or update an existing one, please create a JIRA ticket on the corresponding L10n component in order to track changes.\\n\\n## Localizing a Plugin\\nThis section applies if you are developing a closed-source plugin. If your plugin falls in this category, it must embed its own bundles. Bundle must be defined in `src/main/resources/org/sonar/l10n/<plugin key>_<language>.properties`\\n\\nThe default bundle is mandatory, and must be English. For example the plugin with key \\\"mysonarplugin\\\" must define the following files in order to enable the French translation:\\n\\n* `org/sonar/l10n/mysonarplugin.properties`\\n* `org/sonar/l10n/mysonarplugin_fr.properties`\\n\"},{\"path\":\"extend/new-languages\",\"content\":\"---\\ntitle: Supporting New Languages\\nurl: /extend/new-languages/\\n---\\n\\n\\nThe steps to cover a new programming language are:\\n\\n1. Write the grammar. This is the hardest part.\\n1. Write a parser (a parser simply parses an input based on your grammar to yield a parse tree).\\n1. Test your grammar, to ensure it is able to parse real-life language files.\\n1. Write a few parse tree visitors. Some visitors will compute metrics such as [executable lines](/extend/executable-lines/), while others will enforce [coding rules](/extend/adding-coding-rules/). A dozen or so visitors is sufficient for an initial release.\\n1. Write a scanner Sensor, in a SonarQube plugin, to launch the visitors. \\n1. Compute\\n   1. issues\\n   1. raw measures\\n   1. code duplications\\n   1. syntax highlighting\\n   1. symbol table\\n   1. coverage information (lines/branches to cover, line/branch hits)\\n   \\nIn fulfilling these steps, the [SonarSource Language Recognizer (SSLR)](https://github.com/SonarSource/sslr) can be an important resource.\\n   \\n\\n \\n\\n\"},{\"path\":\"extend/web-api\",\"content\":\"---\\ntitle: Web API Authentication\\nurl: /extend/web-api/\\n---\\nSonarQube provides web API to access its functionalities from applications. The web services composing the web API are documented within SonarQube, through the URL [/web_api](/#sonarqube#/web_api), which can also be reached from a link in the page footer. \\n\\nAdministrative web services are secured and require the user to have specific permissions. In order to be authenticated, the user must provide credentials as described below.\\n\\n## User Token\\n\\nThis is the recommended way. Benefits are described in the page [User Token](/user-guide/user-token/). The token is sent via the login field of HTTP basic authentication, without any password.\\n```\\n# note that the colon after the token is required in curl to set an empty password \\ncurl -u THIS_IS_MY_TOKEN: https://sonarqube.com/api/user_tokens/search\\n```\\n\\n## HTTP Basic Access\\nLogin and password are sent via the standard HTTP Basic fields:\\n```\\ncurl -u MY_LOGIN:MY_PASSWORD https://sonarqube.com/api/user_tokens/search\\n```\\nUsers who authenticate in web application through an OAuth provider, for instance GitHub or Bitbucket, don't have credentials and can't use HTTP Basic mode. They must generate and use tokens.\\n\"},{\"path\":\"faq\",\"content\":\"---\\ntitle: Frequently Asked Questions\\nurl: /faq/\\n---\\n\\n## How do I get rid of issues that are False-Positives?\\n**False-Positive and Won't Fix**  \\nYou can mark individual issues False Positive or Won't Fix through the issues interface. If you're using Short-lived branch and PR analysis provided by the Developer Edition, issues marked False Positive or Won't Fix will retain that status after merge. This is the preferred approach.\\n\\n**//NOSONAR**  \\nMost language analyzers support the use of the generic mechanism: `//NOSONAR` at the end of the line of the issue. This will suppress the all issues - now and in the future - that might be raised on the line.\\n\\n## How do I find and remove projects that haven't been analyzed in a while?\\nIn **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management)** you can search for **Last analysis before** to filter projects not analyzed since a specific date, and then use bulk **Delete** to remove the projects that match your filter.\\n\\nThis can be automated by using the corresponding Web API: `api/projects/bulk_delete?analyzedBefore=YYYY-MM-DD`.\\n\\n<!-- sonarqube -->\\n## How do I trigger a full ElasticSearch reindex?\\nCurrently, the only way to force a reindex is to:\\n\\n* Stop your server\\n* Remove the contents of the $SQ_HOME/data/es6 directory\\n* Start your server\\n\\nBefore doing this, you should be aware first that processes are in place on the SonarQube side that out-of-sync indices are detected and corrected, and second that a full re-index can be quite lengthy depending on the size of your instance.\\n\\n## Why can't I use my HTTP Proxy since I upgraded to Java8u111?\\n\\nIf you are getting this error in the logs when trying to use the Marketplace:\\n```\\njava.io.IOException: Unable to tunnel through proxy. Proxy returns \\\"HTTP/1.1 407 Proxy Authentication Required\\n```\\n... you probably upgraded your Java8 installation with an update greater than 111. To fix that, update _$SONARQUBE_HOME/conf/sonar.properties` like this:\\n```\\nsonar.web.javaOpts=-Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError -Djdk.http.auth.tunneling.disabledSchemes=\\\"\\\"\\n```\\nReference: http://www.oracle.com/technetwork/java/javase/8u111-relnotes-3124969.html\\n<!-- /sonarqube -->\\n\\n\"},{\"path\":\"index\",\"content\":\"---\\ntitle: Documentation\\nurl: /\\n---\\n\\n<!-- sonarcloud -->\\n\\nSonarCloud is the leading product for Continuous Code Quality online, totally free for open-source projects. It supports all major programming languages, including Java, C#, JavaScript, TypeScript, C/C++ and many more. If your code is closed source, SonarCloud also offers [a paid plan](/sonarcloud-pricing/) to run private analyses.\\n\\nSonarCloud offers end-to-end integrations for teams leveraging the following solutions in their development processes:\\n\\n* [GitHub.com](/integrations/github/)\\n* [Bitbucket Cloud](/integrations/bitbucketcloud/)\\n* [Azure DevOps Services](/integrations/vsts/)\\n\\nAre you ready to eliminate bugs and vulnerabilities? Will you champion quality code in your projects?\\n\\n<!-- /sonarcloud -->\\n<!-- static -->\\n\\n[[info]]\\n| **Welcome to the new SonarQube documentation**  \\n| If you already have a SonarQube instance, you should be aware that we've made this documentation available within SonarQube itself (from v7.4). Just look under the \\\"?\\\" in the top menu to be sure you're always looking at the right documentation for _your_ version!\\n<!-- /static -->\\n<!-- sonarqube -->\\n\\n[SonarQube](http://www.sonarqube.org/)® is an automatic code review tool to detect bugs, vulnerabilities and code smells in your code. It can integrate with your existing workflow to enable continuous code inspection across your project branches and pull requests.\\n\\nBelow are a few key pointers, otherwise head over to the left pane for full documentation content and search capabilities.\\n\\n### I'm new to SonarQube\\n* Installing a [quick demo version](/setup/get-started-2-minutes/).\\n* Installing a [production instance](/setup/install-server/).\\n\\n### I need to set up analysis\\n* [Analyzing Source Code](/analysis/overview/)\\n* [Branches](/branches/overview/)\\n* [Pull Requests](/analysis/pull-request/)\\n\\n### I write code\\n* Why [new code](/user-guide/fixing-the-water-leak/) is the most important\\n* [Concepts](/user-guide/concepts/)\\n* [Quality Gates](/user-guide/quality-gates/)\\n* [Issues](/user-guide/issues/)\\n\\n### I administer a project\\n* [Project Existence](/project-administration/project-existence/)\\n* What's [included, excluded](/project-administration/narrowing-the-focus/) from analysis \\n* [Webhooks](/project-administration/webhooks/)\\n* [Project Settings](/project-administration/project-settings/)\\n\\n### I administer a SonarQube Instance\\n* [Security](/instance-administration/security/)\\n* [Notifications](/instance-administration/notifications/)\\n* [Housekeeping](/instance-administration/housekeeping/)\\n\\n### I do DevOps\\n* Installing a [production instance](/setup/install-server/).\\n* [Upgrading](/setup/upgrading/)\\n* [Monitoring](/instance-administration/monitoring/)\\n* [Running a Cluster](/setup/operate-cluster/)\\n\\n### Stay in touch!\\n* [Get help in the community](https://www.sonarqube.org/community/)\\n* [Source code](https://github.com/SonarSource)\\n* [Issue tracker](https://jira.sonarsource.com/)\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"instance-administration/compute-engine-performance\",\"content\":\"---\\ntitle: Compute Engine Performance\\nurl: /instance-administration/compute-engine-performance/\\n---\\n\\n_The ability to manage Compute Engine performance is available as part of [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\n\\n### How can I get analyses through the Compute Engine Queue faster?\\nIf analyses are taking too long to process, it may be that you need to increase the number of Compute Engine (CE) workers (**[Administration > Projects > Background Tasks > Number of Workers](/#sonarqube-admin#/admin/background_tasks)**). \\n\\nThere are two cases to consider:\\n\\n1. slowness comes from the fact that the queue is often full of pending tasks\\n1. individual tasks take a long time to process\\n\\nIn the first case, increasing the number of workers could help. The second case should be carefully evaluated. In either case, when considering increasing the number of CE workers, two questions should be answered.\\n\\n* does my infrastructure allow me to increase the number of workers?\\n* to what extent should I increase the number of workers? I.E. What number should I configure?\\n\\nIncreasing the number of workers will increase the stress on the resources consumed by the Compute Engine. Those resources are:\\n\\n* the DB\\n* disk I/O\\n* network\\n* heap\\n* CPU\\n\\nOf those, only the last two are internal to the CE.\\n\\nIf slowness comes from any of the external resources (DB, disk I/O, network), then increasing the number of workers could actually slow the processing of individual reports (think of two people trying to go through a door at  the same time). However, if your slowness is caused by large individual analysis reports hogging the CE worker for extended periods of time, then enabling parallel processing by adding another worker could help. But if you do, you need to take a look at the internal resources.\\n\\nCE workers are not CPU-intensive and memory use depends entirely on the project that was analyzed. Some need a lot of memory, others don't. But with multiple CE workers, you should increase CE heap size by a multiple of the number of workers. The same logic applies to CPU: if running with one worker consumes up to Y% of CPU, then you should plan for Z workers requiring Y*Z% of CPU.\\n\\nTo accurately diagnose your situation, monitor network latency, the I/O of the SonarQube instance, and the database CPU and memory usage to evaluate whether slowness is mainly/mostly/only related to external resources. \\n\"},{\"path\":\"instance-administration/custom-measures\",\"content\":\"---\\ntitle: Custom Measures\\nurl: /instance-administration/custom-measures/\\n---\\n\\nSonarQube collects a maximum of measures in an automated manner but there are some measures for which this is not possible, such as when: the information is not available for collection, the measure is computed by a human, and so on. Whatever the reason, SonarQube provides a service to inject those measures manually and allow you to benefit from other services: the Manual Measures service. The manual measures entered will be picked during the next analysis of the project and thereafter treated as \\\"normal\\\" measures.\\n\\n## Managing Custom Metrics\\nAs with measures that are collected automatically, manual measures are the values collected in each analsis for manual metrics. Therefore, the first thing to do is create the metric you want to save your measure against. In order to do so, log in as a system administrator and go to **[Administration > Configuration > Custom Metrics](/#sonarqube-admin#/admin/custom_metrics)**, where the interface will guide you in creating the Metric you need. \\n\\n## Managing Custom Measures\\nCustom measures can be entered at project level. To add a measure, sign in as a project administrator, navigate to the desired project and choose **Administration > Custom Measures**, where you will find a table with the latest measure value entered for each metric. \\n\\nValues entered in this interface are \\\"Pending\\\", and will not be visible outside this administrative interface until the next analysis. \\n\\n\"},{\"path\":\"instance-administration/db-copy\",\"content\":\"---\\ntitle: SonarQube DB Copy Tool\\nurl: /instance-administration/db-copy/\\n---\\n\\n_The SonarQube DB Copy Tool is available to customers with [SonarSource support](https://www.sonarsource.com/support/)._\\n\\nThis tool is provided to help you migrate your SonarQube database from one DB vendor to another. If, for instance, you've been using your SonarQube instance with Oracle and you want to migrate to PostgreSQL without loosing your analysis history, the SonarQube DB Copy Tool is what you need. \\n\\nIn the following lines we will talk about \\\"source\\\" and \\\"target\\\" SonarQube database instances. The source instance is the database you want to discard and the target is the one you want to move to.\\n\\nThe procedure is basically as follows:\\n\\n* connect to both the source and target databases\\n* read the data from the source database table by table\\n* save the data into the target database table by table\\n* recreate the sequences, index, ... on the target database\\n\\n## Installation\\nThe SonarQube DB Copy Tool is provided as a standalone JAR file. **It must not be installed in your source or target SonarQube instances**. Put the JAR wherever your want on your machine, the only prerequisite is that this machine must be authorized to access your source and target SonarQube databases.\\n\\nThe version of the JAR to use must be at least **1.3.3.627**\\n\\n## DB Copy Preparation Phase\\nIn the preparation phase, you ready the target database by setting up SonarQube schema and populating it with the necessary tables so that you end up with the same  database schema in the source and the target.\\n\\n1. Make sure your target database is up and running\\n1. On your target database, create the `sonar` schema. \\n1. Download and expand a copy of SonarQube that exactly matches the version you're running. \\n1. Configure your SonarQube copy to connect to the target database. (If you've placed your SonarQube copy on the same server that runs your primary SonarQube instance, you'll also need to configure non-default ports for your copy SonarQube instance.)\\n1. Start your copy SonarQube instance. It will connect to your empty target and populate the schema.\\n1. Once your copy instance is up and running (this indicates that the schema is fully populated), you can stop and delete it.\\n1. Refresh the Database Statistics on the target database before restarting SonarQube\\n\\nAt this point, you have in your source and target databases the exact same lists of tables.\\n\\n## DB Copy Run Phase\\nThere are only four steps in this phase:\\n\\n1. **Stop your primary SonarQube instance.**\\n1. Execute the base command jar with the correct parameters. \\n1. Update your primary SonarQube instance's configuration to point to the target DB\\n1. Restart your primary SonarQube instance.\\n\\n### Base command\\n```\\njava -jar sonar-db-copy-1.3.3.627-jar-with-dependencies.jar\\n```\\n\\n### Parameters\\nName | Description | Required\\n---|---|---|---\\n`-help`|Print this parameters help| no  \\n`-urlSrc`|JDBC URL of the source database|yes\\n`-userSrc`|Username of the source database|yes\\n`-pwdSrc`|Password of the source database|yes\\n`-urlDest`|JDBC URL of the target database|yes\\n`-userDest`|Username of the target database|yes\\n`-pwdDest`|Password of the target database|yes\\n`-driverDest`|JDBC Driver of the target database|no\\n`-driverSrc`|JDBC Driver of the source database|no\\n`-T`|Comma separated list of tables to migrate|no\\n\\n## Execution Examples\\nFirst sonar-db-copy verifies if URLs can be reached and the database versions:  \\n![verify urls](/images/db-copy/verify-urls.png)\\n\\nWhen the versions are different, the application stops.  \\n![stop for different versions](/images/db-copy/verify-versions.png)\\n\\nSometime when you have restarted the copy, the destination database version is 0. This is not a problem, the copy will continue.  \\n![version 0 in target is okay](/images/db-copy/version0-ok.png)\\n\\nThen it searches tables in source and destination database:  \\n![search tables](/images/db-copy/search-tables.png)\\n\\nIf there are missing tables, you will read this log:  \\n![missing table warning](/images/db-copy/missing-table-warning.png)\\n\\nSecond sonar-db-copy truncates tables in target database and indicates the number of tables purged:  \\n![truncate tables in target](/images/db-copy/truncate-tables.png)\\n\\nOf course, the tables missing can not be purged:  \\n![missing tables aren't purged](/images/db-copy/missing-table-not-purged.png)\\n\\nThird, sonar-db-copy reproduces data from source to destination and adjusts the sequence of destination database after the copy:  \\n![copy data](/images/db-copy/copy-data.png)\\n\\nIf there are some missing tables:  \\n![missing tables not copied](/images/db-copy/missing-table-not-copied.png)\\n\\nIf errors appear during the copy, the process does NOT stop but the errors are displayed:  \\n![copy errors displayed](/images/db-copy/copy-errors-shown.png)\\n\\nAt the end sonar-db-copy reiterates the difference between source and destination database. An error message is displayed if the databases are different. \\n![final warning of remaining differences](/images/db-copy/summary-of-differences.png)\\n\"},{\"path\":\"instance-administration/delegated-auth\",\"content\":\"---\\ntitle: Delegating Authentication\\nurl: /instance-administration/delegated-auth/\\n---\\n\\n\\nSonarQube comes with an onboard user database, as well as the ability to delegate authentication via HTTP Headers, GitHub Authentication, GitLab Authentication, SAML, or LDAP. Each method offers user identity management, group synchronization/mapping, and authentication.\\n\\n## Group Mapping\\nWhen using group mapping, the following caveats apply regardless of which delegated authentication method is used:\\n* membership in synchronized groups will override any membership locally configured in SonarQube _at each login_\\n* membership in a group is synched only if a group with the same name exists in SonarQube\\n* membership in the default group `sonar-users` remains (this is a built-in group) even if the group does not exist in the identity provider\\n\\n[[warning]]\\n|When group mapping is configured, the delegated authentication source becomes the one and only place to manage group membership, and the user's groups are re-fetched with each log in.\\n\\n\\n## HTTP Header Authentication\\nYou can delegate user authentication to third-party systems (proxies/servers) using HTTP Header Authentication.\\n\\nWhen this feature is activated, SonarQube expects that the authentication is handled prior any query reaching the server. \\nThe tool that handles the authentication should:\\n\\n* intercept calls to the SonarQube server\\n* take care of the authentication\\n* update the HTTP request header with the relevant SonarQube user information\\n* re-route the request to SonarQube with the appropriate header information\\n\\n![HTTP Header Authentication flow](/images/http-header-authentication.png)\\n\\nAll the parameters required to activate and configure this feature are available in SonarQube server configuration file (in _$SONARQUBE-HOME/conf/sonar.properties_).\\n\\nUsing Http header authentication is an easy way integrate your SonarQube deployment with an in-house SSO implementation.\\n\\n## GitHub Authentication\\nYou can delegate authentication to GitHub Enterprise using a dedicated GitHub OAuth application. Alternately, if you're using the pull request decoration provided as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/) you can harness the [GitHub application needed for PR decoration](/instance-administration/github-application/) to also provide authentication.\\n\\n### Dedicated GitHub OAuth application\\n1. You'll need to first create a GitHub OAuth application. Click [here](https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/) for general instructions:\\n   1. \\\"Homepage URL\\\" is the public URL to your SonarQube server, for example \\\"https://sonarqube.mycompany.com\\\". For security reasons HTTP is not supported. HTTPS must be used. The public URL is configured in SonarQube at **[Administration -> General -> Server base URL](/#sonarqube-admin#/admin/settings)**\\n   1. \\\"Authorization callback URL\\\" is <Homepage URL>/oauth2/callback, for example \\\"https://sonarqube.mycompany.com/oauth2/callback\\\"\\n1. In SonarQube, navigate to **[Administration > Configuration > General Settings > Security > GitHub](/#sonarqube-admin#/admin/settings?category=security)**:\\n   1. Set **Enabled** to `true`\\n   1. Set the **Client ID** to the value provided by the GitHub developer application\\n   1. Set the **Client Secret** to the value provided by the GitHub developer application\\n  \\nOn the login form, the new \\\"Log in with GitHub\\\" button allows users to connect with their GitHub Enterprise accounts. \\n\\n### Re-use GitHub PR decoration application\\n1. In the GitHub app, in **Permission & events > User permissions**: Add **Read-only** access in **Emails**.\\n1. In SonarQube settings, update the **Client ID** and **Client Secret** and use values defined in the GitHub app\\n\\nIf you previously used a dedicated GitHub OAuth application for authentication, it can be removed.\\n\\n## GitLab Authentication  \\nYou can delegate authentication to GitLab using a dedicated GitLab OAuth application.\\n\\nCreate a GitLab OAuth application from your GitLab account. Click [here](https://docs.gitlab.com/ee/integration/oauth_provider.html/) for general instructions.\\n\\n   1. In the **Name** text box, name your app SonarQube.\\n   1. In the **Redirect URI** text box, enter your SonarQube URL with the path `/oauth2/callback/gitlab/`. For example, `https://YourSonarQubeURL.com/oauth2/callback/gitlab/`.\\n   1. Under **Scopes**, select **api**.\\n\\nAfter saving your application, GitLab gives you your **Application ID** and **Secret**. Keep these at hand, open your SonarQube instance, and navigate to **[Administration > Configuration > General Settings > Security](/#sonarqube-admin#/admin/settings?category=security/)** to finish setting up GitLab authentication:\\n\\n1. Set **Enabled** to `true`.\\n1. Enter the Application ID provided by GitLab in the **Application ID** text box.\\n1. Enter the Secret provided by GitLab in the **Secret** text box.\\n\\nOn the login form, the new \\\"Log in with GitLab\\\" button allows users to connect with their GitLab accounts.\\n\\n### GitLab group synchronization\\nSetting **Synchronize groups** to `true` at **[Administration > Configuration > General Settings > Security](/#sonarqube-admin#/admin/settings?category=security/)** associates GitLab groups with SonarQube groups of the same name (if they exist). GitLab users inherit membership to subgroups from parent groups so a user that is a member of a group will also be a member of the group's subgroups. \\n\\nTo synchronize a GitLab group or subgroup with a SonarQube group, name the SonarQube group with the full path of the of the GitLab group or subgroup URL. For example, say you have a GitLab group named \\\"My Group\\\" with a subgroup named \\\"My Subgroup\\\" and the subgroup URL is `https://YourGitLabURL.com/my-group/my-subgroup`. You would name your SonarQube group `my-group/my-subgroup` to synchronize it with your GitLab subgroup.\\n\\n## SAML Authentication  \\nYou can delegate authentication to a SAML 2.0 Identity Provider using SAML Authentication.\\n\\n### Limitations\\n* SAML requests are not signed. Client signature validation should be disabled in the Identity Provider.\\n* SAML encrypted responses are not supported. SAML encryption should be disabled in the Identity Provider.\\n\\n### Example: Using Keycloak as a SAML Identity Provider\\nThe following example may be useful if you're using Keycloak as a SAML Identity Provider. If you're not using Keycloak, your settings are likely to be different.\\n\\n[[collapse]]\\n| ## In the Keycloak server, create a new SAML client\\n| Create a new client\\n|\\n| 1. \\\"Client ID\\\" is something like \\\"sonarqube\\\" \\n| 1. \\\"Client Protocol\\\" must be set to \\\"saml\\\"\\n| 1. \\\"Client SAML Endpoint\\\" can be left empty\\n|\\n| Configure the new client\\n|\\n| 1. in Settings\\n|    1. Set\\\"Client Signature Required\\\" to OFF\\n|    1. Set \\\"Valid Redirect URIs\\\" to \\\"<Your SonarQube URL>/oauth2/callback/*, E.G https://sonarqube.mycompany.com/oauth2/callback/saml\\n| 1. in Client Scopes > Default Client Scopes , remove \\\"role_list\\\" from \\\"Assigned Default Client Scopes\\\" (to prevent the error `com.onelogin.saml2.exception.ValidationError: Found an Attribute element with duplicated Name` during authentication)\\n| 1. In Mappers create a mapper for each user attribute (Note that values provided below for Name, SAML Attribute Name, Role Attribute Name are only example values): \\n|    1. Create a mapper for the login: \\n|       * Name: Login\\n|       * Mapper Type: User Property\\n|       * Property: Username (Note that the login should not contain any special characters other than `.-_@` to meet SonarQube restrictions.)\\n|       * SAML Attribute Name: login\\n|    1. Create a mapper for the name: \\n|       * Name: Name\\n|       * Mapper Type: User Property\\n|       * User Attribute: Username (It can also be another attribute you would previously have specified for the users)\\n|       * SAML Attribute Name: name\\n|    1. (Optional) Create a mapper for the email: \\n|       * Name: Email\\n|       * Mapper Type: User Property\\n|       * Property: Email\\n|       * SAML Attribute Name: email\\n|    1. (Optional) Create a mapper for the groups (If you rely on a list of roles defined in \\\"Roles\\\" of the Realm (not in \\\"Roles\\\" of the client)):\\n|       * Name: Groups\\n|       * Mapper Type: Role list\\n|       * Role Attribute Name: groups\\n|       * Single Role Attribute: ON\\n|    1. If you rely on a list of groups defined in \\\"Groups\\\":\\n|       * Name: Groups\\n|       * Mapper Type: Group list\\n|       * Role Attribute Name: groups\\n|       * Single Role Attribute: ON\\n|       * Full Group Path: OFF\\n|\\n| Download the XML configuration file from Keycloak.\\n\\n[[collapse]]\\n| ## In SonarQube, Configure SAML authentication\\n| Go to **[Administration > Configuration > General Settings > Security > SAML](/#sonarqube-admin#/admin/settings?category=security)**\\n| * **Enabled** should be set to true\\n| * **Application ID** is the value of the \\\"Client ID\\\" you set in Keycloak (for example \\\"sonarqube\\\")\\n| * **Provider ID** is the value of the \\\"EntityDescriptor\\\" > \\\"entityID\\\" attribute in the XML configuration file (for example \\\"http://keycloak:8080/auth/realms/sonarqube\\\" where sonarqube is the name of the realm)\\n| * **SAML login url** is the value of \\\"SingleSignOnService\\\" > \\\"Location\\\" attribute in the XML configuration file (for example \\\"http://keycloak:8080/auth/realms/sonarqube/protocol/saml\\\")\\n| * **Provider certificate** is the value you get from *Reaml Settings* -> *Keys* -> click on the *Certificate* button\\n| * **SAML user login attribute** is the value set in the login mapper in \\\"SAML Attribute Name\\\"\\n| * **SAML user name attribute** is the value set in the name mapper in \\\"SAML Attribute Name\\\"\\n| * (Optional) **SAML user email attribute** is the value set in the email mapper in \\\"SAML Attribute Name\\\"\\n| * (Optional) **SAML group attribute** is the value set in the groups mapper in \\\"Role/Group Attribute Name\\\"\\n|\\n| In the login form, the new button \\\"Log in with SAML\\\" allows users to connect with their SAML account.\\n\\n## LDAP Authentication\\nYou can configure SonarQube authentication and authorization to an LDAP server (including LDAP Service of Active Directory) by configuring the correct values in _$SONARQUBE-HOME/conf/sonar.properties_.\\n\\nThe main features are:\\n\\n* Password checking against the external authentication engine.\\n* Automatic synchronization of usernames and emails.\\n* Automatic synchronization of relationships between users and groups (authorization).\\n* Ability to authenticate against both the external and the internal authentication systems. There is an automatic fallback on SonarQube internal system if the LDAP server is down.\\n* During the first authentication trial, if the user's password is correct, the SonarQube database is automatically populated with the new user. Each time a user logs into SonarQube, the username, the email and the groups this user belongs to that are refreshed in the SonarQube database. You can choose to have group membership synchronized as well, but this is not the default.\\n\\n\\n&nbsp;| Apache DS | OpenLDAP | Open DS | Active Directory\\n----|-----------|----------|---------|-----------------\\nAnonymous | ![](/images/check.svg) |![](/images/check.svg) |![](/images/check.svg) |  &nbsp;\\nSimple|![](/images/check.svg)|![](/images/check.svg)|![](/images/check.svg)|![](/images/check.svg)\\nLDAPS|![](/images/check.svg)|![](/images/check.svg)|  |![](/images/check.svg)\\nDIGEST-MD5|![](/images/check.svg)|  |![](/images/check.svg)|![](/images/check.svg)\\nCRAM-MD5|![](/images/check.svg)|  |![](/images/check.svg)|![](/images/check.svg)\\nGSSAPI|![](/images/check.svg)|  |  |  \\n![](/images/check.svg) = successfully tested\\n\\n### Setup\\n1. Configure LDAP by editing _$SONARQUBE-HOME/conf/sonar.properties_ (see table below)\\n2. Restart the SonarQube server and check the log file for:\\n```\\nINFO org.sonar.INFO Security realm: LDAP ...\\nINFO o.s.p.l.LdapContextFactory Test LDAP connection: OK\\n```\\n1. Log into SonarQube\\n1. On logout users will be presented a login page (_/sessions/login_), where they can choose to login as technical user or a domain user by passing appropriate credentials\\n\\nFrom SonarScanners, we recommend using [local technical users](/instance-administration/security/) for authentication against SonarQube Server.\\n\\n**General Configuration**\\n\\nProperty|Description|Default value|Required|Example\\n---|---|---|---|---\\n`sonar.security.realm`|Set this to `LDAP` authenticate first against the external sytem. If the external system is not reachable or if the user is not defined in the external system, authentication will be performed against SonarQube's internal database.| none |Yes|`LDAP` (only possible value)\\n`sonar.authenticator.downcase`|Set to true when connecting to a LDAP server using a case-insensitive setup.|`false`|No\\n`ldap.url`|URL of the LDAP server. If you are using ldaps, you should install the server certificate into the Java truststore.| none |Yes|`ldap://localhost:10389`\\n`ldap.bindDn`|The username of an LDAP user to connect (or bind) with. Leave this blank for anonymous access to the LDAP directory.|none|No|`cn=sonar,ou=users,o=mycompany`\\n`ldap.bindPassword`|The password of the user to connect with. Leave this blank for anonymous access to the LDAP directory.|none|No|`secret`\\n`ldap.authentication`|Possible values: `simple`, `CRAM-MD5`, `DIGEST-MD5`, `GSSAPI`. See [the tutorial on authentication mechanisms](http://java.sun.com/products/jndi/tutorial/ldap/security/auth.html)|`simple`|No\\n`ldap.realm`|See [Digest-MD5 Authentication](http://java.sun.com/products/jndi/tutorial/ldap/security/digest.html), [CRAM-MD5 Authentication](http://java.sun.com/products/jndi/tutorial/ldap/security/crammd5.html)| none|No|example.org\\n`ldap.contextFactoryClass`|Context factory class.|`com.sun.jndi.ldap.LdapCtxFactory`|No\\n`ldap.StartTLS`|Enable use of `StartTLS`|`false`|No\\n`ldap.followReferrals`|Follow referrals or not. See [Referrals in the JNDI](http://docs.oracle.com/javase/jndi/tutorial/ldap/referral/jndi.html)|`true`\\n\\n**User Mapping**\\n\\nProperty|Description|Default value|Required|Example for Active Directory\\n---|---|---|---|---\\n`ldap.user.baseDn`|Distinguished Name (DN) of the root node in LDAP from which to search for users.|None|Yes|`cn=users,dc=example,dc=org`\\n`ldap.user.request`|LDAP user request.|`(&(objectClass=inetOrgPerson)(uid={login}))`|No|`(&(objectClass=user)(sAMAccountName={login}))`\\n`ldap.user.realNameAttribute`|Attribute in LDAP defining the user’s real name.|`cn`|No|  \\n`ldap.user.emailAttribute`|Attribute in LDAP defining the user’s email.|`mail`|No| \\n\\n**Group Mapping**\\nOnly groups (not roles) and static groups (not dynamic groups) are supported. Click [here](http://identitycontrol.blogspot.fr/2007/07/static-vs-dynamic-ldap-groups.html) for more information.\\n\\nFor the delegation of authorization, [groups must be first defined in SonarQube](/instance-administration/security/). Then, the following properties must be defined to allow SonarQube to automatically synchronize the relationships between users and groups.\\n\\nProperty|Description|Default value|Required|Example for Active Directory\\n---|---|---|---|---\\n`ldap.group.baseDn`|Distinguished Name (DN) of the root node in LDAP from which to search for groups.|none|No|`cn=groups,dc=example,dc=org`\\n`ldap.group.request`|LDAP group request.|`(&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))`|No|`(&(objectClass=group)(member={dn}))`\\n`ldap.group.idAttribute`|Property used to specifiy the attribute to be used for returning the list of user groups in the compatibility mode.|`cn`|No|`sAMAccountName`\\n\\n### Sample Configuration\\n```\\n# LDAP configuration\\n# General Configuration\\nsonar.security.realm=LDAP\\nldap.url=ldap://myserver.mycompany.com\\nldap.bindDn=my_bind_dn\\nldap.bindPassword=my_bind_password\\n  \\n# User Configuration\\nldap.user.baseDn=ou=Users,dc=mycompany,dc=com\\nldap.user.request=(&(objectClass=inetOrgPerson)(uid={login}))\\nldap.user.realNameAttribute=cn\\nldap.user.emailAttribute=mail\\n \\n# Group Configuration\\nldap.group.baseDn=ou=Groups,dc=sonarsource,dc=com\\nldap.group.request=(&(objectClass=posixGroup)(memberUid={uid}))\\n```\\n\\n## Advanced LDAP Topics\\n### Authentication Methods\\n* **`Anonymous`** -  Used when only read-only access to non-protected entries and attributes is needed when binding to the LDAP server.\\n* **`Simple`** Simple authentication is not recommended for production deployments not using the ldaps secure protocol since it sends a cleartext password over the network.\\n* **`CRAM-MD5`** - The Challenge-Response Authentication Method (CRAM) based on the HMAC-MD5 MAC algorithm ([RFC 2195](http://tools.ietf.org/html/rfc2195)).\\n* **`DIGEST-MD5`** - This is an improvement on the CRAM-MD5 authentication method ([RFC 2831](http://www.ietf.org/rfc/rfc2831.txt)).\\n* **`GSSAPI`** - GSS-API is Generic Security Service API ([RFC 2744](http://www.ietf.org/rfc/rfc2744.txt)). One of the most popular security services available for GSS-API is the Kerberos v5, used in Microsoft's Windows 2000 platform.\\n\\nFor a full discussion of LDAP authentication approaches, see [RFC 2829](http://www.ietf.org/rfc/rfc2829.txt) and [RFC 2251](http://www.ietf.org/rfc/rfc2251.txt).\\n\\n### Multiple Servers\\nTo configure multiple servers:\\n```\\n# List the different servers\\nldap.servers=server1,server2\\n  \\n# Configure server1\\nldap.server1.url=ldap://server1:1389\\nldap.server1.user.baseDn=dc=dept1,dc=com\\n...\\n \\n# Configure server2\\nldap.server2.url=ldap://server2:1389\\nldap.server2.user.baseDn=dc=dept2,dc=com\\n...\\n```\\n\\nAuthentication will be tried on each server, in the order they are listed in the configurations, until one succeeds. User/Group mapping will be performed against the first server on which the user is found.\\n\\nNote that all the LDAP servers must be available while (re)starting the SonarQube server.\\n\\n### Troubleshooting\\n* Detailed connection logs (and potential error codes received from LDAP server) are output to SonarQube's _$SONARQUBE_HOME/logs/web.log_, when logging is in `DEBUG` mode.\\n\\n* Time out when running SonarQube analysis using LDAP\\nJava parameters are documented here: http://docs.oracle.com/javase/jndi/tutorial/ldap/connect/config.html. Such parameters can be set in `sonar.web.javaAdditionalOpts` in _$SONARQUBE-HOME/conf/sonar.properties_.\\n\"},{\"path\":\"instance-administration/github-application\",\"content\":\"---\\ntitle: GitHub Enterprise Integration\\nurl: /instance-administration/github-application/\\n---\\n_GitHub Enterprise Integration is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\nYou can add Pull Request decoration to Checks in GitHub Enterprise by creating a GitHub Application, configuring your SonarQube instance, and installing the app in your organizations.\\n\\n## Creating a GitHub Application\\n\\nClick [here](https://developer.github.com/apps/building-github-apps/creating-a-github-app/) for general instructions on creating a GitHub App.\\n\\nFrom the \\\"Register new GitHub App\\\" page, follow these steps to create your GitHub App for PR decoration:\\n\\n1. Under **GitHub App name**, give your app a name (such as SonarQubePRChecks).\\n2. GitHub requires a **Homepage URL** and a **Webhook URL**. These values aren't important for Pull Request decoration, so you can use any URL (such as https://www.sonarqube.org/).\\n3. Grant access for the following **Permissions**\\n\\n\\t| Permission          | Access       |\\n\\t|---------------------|--------------|\\n\\t| Checks              | Read & write |\\n\\t| Repository metadata | Read-only    |\\n\\t| Pull Requests       | Read-only    |\\n\\t| Commit statuses     | Read-only    |\\n\\n4. Under \\\"Where can this GitHub App be installed?,\\\" select **Any account**.\\n5. Click **Create GitHub App**.\\n\\n## Generating and Setting Your Private Key\\n\\nAfter creating your app, you'll be prompted with a link to \\\"generate a private key\\\" at the top of the page. Click the link to download your `.pem` private key file. You can also download your `.pem` file by scrolling down to \\\"Private Key\\\" and clicking **Generate Private Key**.\\n\\nAfter downloading your `.pem` file, you'll need to set your private key in SonarQube global settings by copying and pasting the content of your private key file into the text box at [**Administration > Pull Requests > GitHub > GitHub App private key**](/#sonarqube-admin#/admin/settings?category=pull_request/).\\n\\n## Configuring Your SonarQube Instance\\n\\nYou'll need to configure the following global settings in SonarQube.\\n\\n### Setting Your GitHub Enterprise Instance API URL\\n\\nEnter your GitHub Enterprise Instance API URL in the text box at [**Administration > Pull Requests > GitHub > GitHub API URL**](/#sonarqube-admin#/admin/settings?category=pull_request/).\\nYour GitHub Enterprise instance API URL is formatted as follows: `https://<your-github-enterprise-address>/api/v3`\\n\\n### Setting Your App Name and ID\\n \\n1. Enter your app name in the text box at [**Administration > Pull Requests > GitHub > GitHub App name**](/#sonarqube-admin#/admin/settings?category=pull_request/).\\n2. Enter your app ID in the text box at [**Administration > Pull Requests > GitHub > GitHub App ID**](/#sonarqube-admin#/admin/settings?category=pull_request/). You can find your GitHub App ID on the app's settings page at `https://<your-github-enterprise>/settings/apps/<appname>`.\\n\\n## Installing Your App\\n\\nTo install your app in your organizations:\\n\\n1. Go to your GitHub App URL.\\n\\t* GitHub App URLs are specific to your GitHub Enterprise Address and your app name and are formatted as follows: `https://<your-github-enterprise-address>/github-apps/<YourAppName>`.\\n\\t* For example, if your GitHub Enterprise address is `github-enterprise-1.yoursite.com` and your app name is `SonarQubePRChecks`, your GitHub App URL will be `https://github-enterprise-1.yoursite.com/github-apps/SonarQubePRChecks`.\\n2. From your GitHub App page, click the **Install** or **Configure** button.\\n3. Choose the organization where you want to install your app from the list.\\n4. Click the **Install** button.\\n\"},{\"path\":\"instance-administration/housekeeping\",\"content\":\"---\\ntitle: Housekeeping\\nurl: /instance-administration/housekeeping/\\n---\\n\\nWhen you run a new analysis of your project or its branches or pull requests(PRs), some data that was previously available is cleaned out of the database. For example the source code of the previous analysis, measures at directory and file levels, and so on are automatically removed at the end of a new analysis. Additionally, some old analysis snapshots, PR analyses, and branches are also removed.\\n\\nWhy? Well, it's useful to analyze a project frequently to see how its quality evolves. It is also useful to be able to see the trends over weeks, months, years. But when you look back in time, you don't really need the same level of detail as you do for the project's current state. To save space and to improve overall performance, the Database Cleaner deletes some rows in the database. Here is its default configuration:\\n\\n* For each project:\\n  * only one snapshot per day is kept after 1 day. Snapshots marked by an event are not deleted.\\n  * only one snapshot per week is kept after 1 month. Snapshots marked by an event are not deleted.\\n  * only one snapshot per month is kept after 1 year. Snapshots marked by an event are not deleted.\\n  * only snapshots with version events are kept after 2 years. Snapshots without events or with only other event types are deleted.\\n  * **all snapshots** older than 5 years are deleted, including snapshots marked by an event. \\n* All closed issues more than 30 days old are deleted\\n* History at package/directory level is removed\\n\\nThese settings can be changed at [Administration > General > Database Cleaner](/#sonarqube-admin#/admin/settings).\\n\"},{\"path\":\"instance-administration/license-manager\",\"content\":\"---\\ntitle: License Manager\\nurl: /instance-administration/license-manager/\\n---\\n\\n_The License Manager is accessible from **[Administration > Configuration> License Manager](/#sonarqube-admin#/admin/extension/license/app)** as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\n## License Manager\\n\\nThe License Manager enables retrieval of your Server ID (required for obtaining a License Key) and configuration of your SonarSource-provided License key.\\n\\n### Retrieving Server ID\\nThe Server ID is always available on the License Manager page, as well as in the System section of the System Info .\\n\\nNote that if the database connection string is updated, the server ID will be re-generated and a new license will be needed. When it is generated, the Server ID is unique. The same Server ID will never be generated twice, even on the same SonarQube instance.\\n\\n### Setting a License\\nUsing the \\\"Set new license\\\" button, you can set a new License to enable or disable features in SonarQube, or simply to update your license.\\n\\n### LOCs Consumption\\nThe gauge indicates the quantity of LOCs you are currently scanning and allows you to check if you are near the limit and if you need to purchase additional LOCs.\\n\\n### Global admin notifications\\nThe License Manager comes with two notification mechanisms built-in (notifications are sent to Global Admins):\\n\\n- when the license is about to expire–sent two months before expiration, with a reminder one month before\\n- when the configurable LOC threshold is exceeded–this threshold can be modified via the indicator present on the LOC gauge\\n- the background job, that checks threshold and decide if a notification should be sent, runs at server startup, then every 24 hours\\n- the background job does not check validity of smtp server settings and if the emails addresses are set up for global administrators, \\ntherefore for notifications to be received, these settings needs to be correctly configured before the LOC threshold is reached or exceeded\\n\\n### Features Included section\\n\\nThis sections of the License Manager page lists the commercial features that are enabled by the license currently set.\\n\\n## Support\\n\\n### Access to SonarSource Support\\nIf your License entitles you to SonarSource Support, A **Support** tab will appear at **[Administration > Support](/#sonarqube-admin#/admin/extension/license/support)** to guide you through interactions with SonarSource Support.\\n\\nThis page also allows you to collect the Support Information File of your instance. Make sure to provide this file for any interaction with SonarSource Support.\\n\\n![Support Information File.](/images/support-information-file.png)\\n\"},{\"path\":\"instance-administration/look-and-feel\",\"content\":\"---\\ntitle: Look and Feel\\nurl: /instance-administration/look-and-feel/\\n---\\n\\n## Home logo\\nYou can set your own \\\"home\\\" logo in **[Administration > General > Look & Feel](/#sonarqube-admin#/admin/settings)**. Simply provide an image URL and width. Ideally, the width will scale the height to 30 pixels. This logo will be used in both the menu bar and on the About page.\\n\\n## Content of the \\\"About\\\" page\\nYou also have the ability to add content to the About page, which anonymous users land on by default: **[Administration > General > Look & Feel](/#sonarqube-admin#/admin/settings)**.\\n\\n## Gravatar\\nGravatar support is enabled by default, using gravatar.com. You can configure a different server or disable the feature altogether. When enabled, gravatars show up next to most uses of the user name.\\n\"},{\"path\":\"instance-administration/marketplace\",\"content\":\"---\\ntitle: Marketplace\\nurl: /instance-administration/marketplace/\\n---\\n\\nAdministrators can access the Marketplace via **[Administration > Marketplace](/#sonarqube-admin#/admin/marketplace)**. The Marketplace is the place for keeping the pieces of the SonarQube platform up to date. It lets you:\\n\\nSee\\n\\n* The currently installed SonarQube Edition\\n* Which plugins are installed\\n* Whether plugin updates are available\\n* Which other plugins are compatible with your version of SonarQube\\n\\nDiscover\\n\\n* Which other Editions are available, to enable more features\\n\\nInstall\\n\\n* New plugins\\n* Plugin updates\\n\\nTo view/install plugin updates, your SonarQube server needs internet access. Installations require the platform to be restarted before they take effect.\\n\\n## Pending Operations\\n\\nWhen you perform an action in the Markplace (install, update or uninstall a plugin), a yellow banner appears at the top of the page showing pending operations that will be executed once SonarQube is restarted. Pending operations can be canceled until the server is restarted.\\n\\n## Restart SonarQube\\nRestarting SonarQube can be done manually from the command line by running `sonar.sh restart` or directly from the UI:\\n\\n* in the Update Center when you have Pending Changes, the restart button will be displayed in the yellow banner (see Pending Operations)\\n* in the System Info page at any time\\n\\n## Manual Updates\\nIf your server has no access to the internet, you won't be able to rely on the Marketplace for plugins, and will have to handle plugin installations and upgrades manually.\\n\\nTo see what plugins are available and which version of a plugin is appropriate for your server, use the [plugin version matrix](/instance-administration/plugin-version-matrix/), which is kept up to date with current plugin availability and compatibility.\\n\\nTo install a plugin, simply download it using the manual download link on the plugin documentation page, place it in _$SONARQUBE-HOME/extensions/downloads_, and restart the server.\\n\\n## Which URLs does the Marketplace connect to?\\nThe SonarQube Marketplace connects to https://update.sonarsource.org/ to get the list of plugins. Most of the referenced plugins are downloaded from:\\n* https://binaries.sonarsource.com/\\n* https://github.com/\\n\\n## Using the Marketplace behind a Proxy\\nMarketplace uses HTTP(S) connections to external servers to provide these services. If SonarQube is located behind a proxy, additional information must be provided in the _$SONARQUBE-HOME/conf/sonar.properties_ configuration file:\\n```\\nhttp.proxyHost=<your.proxy.host>\\nhttp.proxyPort=<yout.proxy.port>\\n\\n#If proxy authentication is required\\nhttp.proxyUser=<your.proxy.user>\\nhttp.proxyPassword=<your.proxy.password> \\n```\\nNote: the same properties can be used in the 'https.' form for HTTPS connections.\\n\"},{\"path\":\"instance-administration/monitoring\",\"content\":\"---\\ntitle: Monitoring\\nurl: /instance-administration/monitoring/\\n---\\n\\nMonitoring your SonarQube instance is key to keeping it healthy and having happy users.\\n\\nAs a start, you can use this Web API to get an overview of the health of your SonarQube installation:\\n\\n* [api/system/health](/#sonarqube-admin#/api/system/health)\\n\\n## Java Process Memory\\n\\nThe SonarQube application server consists of three main Java processes:\\n\\n* Web (including embedded web server)\\n* ElasticSearch\\n* Compute Engine\\n\\nEach of these Java processes has its own memory settings that can be configured in the _$SONARQUBE-HOME/conf/sonar.properties_ file. The default memory settings that ship with SonarQube are fine for most instances. If you are supporting a large SonarQube instance (more than 100 users or more than 5,000,000 lines of code) or an instance that is part of your Continuous Integration pipeline, you should monitor the memory and CPU usage of all three key Java processes on your instance, along with overall disk space. Monitoring will allow you to see if any of the processes is running short of resources and take action ahead of resource shortages. There are a large number of monitoring tools available, both open source and commercial, to help you with this task. SonarSource does not recommend or endorse any particular tool.\\n\\n## Memory settings\\n\\nYou may need to increase your memory settings if you see the following symptoms:\\n\\n* Your monitoring tools show one or more of the SonarQube processes is reaching its memory limit\\n* Any of the SonarQube processes crashes and/or generates an out-of-memory error in the sonar.log file\\n* A SonarQube background task fails with an out-of-memory error in the background task log\\n* The size of the Issues index of your ElasticSearch instance (visible in the System Info) is greater than or equal to the memory allocated to the ElasticSearch Java process\\n\\nYou can increase the maximum memory allocated to the appropriate process by increasing the  -Xmx memory setting for the corresponding Java process in your _$SONARQUBE-HOME/conf/sonar.properties_ file:\\n\\n* For Web: sonar.web.javaOpts\\n* For ElasticSearch: sonar.search.javaOpts\\n* For Compute Engine: sonar.ce.javaOpts\\n\\nThe -Xmx parameter accepts numbers in both megabytes (e.g. -Xmx2048m) and gigabytes (e.g. -Xmx2G)\\n\\nFor detailed information on JMX Beans exposed by SonarQube and more ElasticSearch monitoring options, please visit our Monitoring Details page.\\n\\n## Exposed JMX MBeans\\n\\nThe SonarQube Server offers visibility about what happens internally through the exposure of JMX MBeans.\\n\\nIn addition to the classical Java MBeans providing information about the ClassLoader, OS, Memory and Threads you have access to four more MBeans in the SonarQube Server:\\n\\n* ComputeEngine\\n* Database\\n* SonarQube\\n\\nAll these MBeans are read-only. It's not possible to modify or reset their values in real time.\\n\\n## ComputeEngineTasks MBean\\n\\n[[collapse]]\\n| ## ComputeEngineTasks MBean\\n| Attribute Name | Description\\n| ---|---\\n| ProcessingTime | Measure the time (in ms) spent to process Background Tasks since the last restart of SonarQube. Its value will always increase and will be reset by a restart of SonarQube.  This measure is very powerful when combined with SuccessCount and ErrorCount measures to get the average time to handle a Background Task, or when used to understand how much time the SonarQube Server is spending during a day to handle Background Tasks. It gives you an indication of the load on your server.\\n| ErrorCount | Number of Background Tasks which failed since the last restart of SonarQube\\n| PendingCount | Number of Background Tasks waiting to be processed since the last restart of SonarQube\\n| InProgressCount | Number of Background Tasks currently under processing. Its value is either 1 or 0, since SonarQube can process only one task at a time.\\n| SuccessCount | Number of Background Tasks successfully processed since the last restart of SonarQube\\n| WorkerCount | Number of Background Tasks that can be processed at the same time\\n| PendingTime | Pending time (in ms) of the oldest Background Task waiting to be processed. This measure, together with PendingCount, helps you know if analyses are stacking and taking too long to start processing. This helps you evaluate if it might be worth configuring additional Compute Engine workers (Enterprise Edition) or additional nodes (Data Center Edition) to improve SonarQube performance.\\n|\\n| Note:\\n| * the total number of Background Tasks handled since the last restart of SonarQube is equal to SuccessCount + ErrorCount\\n| * these values are reset to their default values by restarting SonarQube\\n\\n[[collapse]]\\n| ## Database MBean\\n| ### Same attributes are available for both ComputeEngineServer and WebServer.\\n| Attribute Name | Description\\n| ---|---\\n| MigrationStatus | Possible values are: UP_TO_DATE, REQUIRES_UPGRADE, REQUIRES_DOWNGRADE, FRESH_INSTALL (only available for WebServer).\\n| PoolActiveConnections\\t| Number of active database connections\\n| PoolIdleConnections | Number of database connections waiting to be used\\n| PoolInitialSize | Initial size of the database connections pool.\\n| PoolMaxActiveConnections | Maximum number of active database connections\\n| PoolMaxIdleConnections | Maximum number of database connections waiting to be used\\n| PoolMaxWaitMillis | In milliseconds\\n| PoolRemoveAbandoned | Possible values : true, false\\n| PoolRemoveAbandonedTimeoutSeconds | In Seconds\\n\\n[[collapse]]\\n| ## SonarQube MBean\\n| Attribute Name | Description\\n| ---|---\\n| LogLevel | Log Level: INFO, DEBUG, TRACE\\n| ServerId | SonarQube Server ID\\n| Version | SonarQube Version\\n\\n## How do I Activate JMX?\\n\\n### Local Access\\n\\nThere is nothing to activate to view SonarQube MBeans if your tool is running on the same server as the SonarQube Server.\\n\\n### Remote Access\\n\\nHere are examples of configuration to activate remote access to JMX MBeans.\\n\\nFor the WebServer:\\n```\\n# JMX WEB - 10443/10444\\nsonar.web.javaAdditionalOpts=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.port=10443 -Dcom.sun.management.jmxremote.rmi.port=10444 -Dcom.sun.management.jmxremote.password.file=/opt/sonarsource/sonar/conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=/opt/sonarsource/sonar/conf/jmxremote.access\\n```\\n\\nFor the ComputeEngine:\\n\\nThere is no specific javaAdditionalOpts entry, simply amend the sonar.ce.javaOpts one.\\n\\nExample of `jmxremote.access`:\\n\\n```\\n#\\n# JMX Access Control file\\n#\\nreader readonly\\nadmin  readwrite \\\\\\n    create javax.management.monitor.*,javax.management.timer.*,com.sun.management.*,com.oracle.jrockit.* \\\\\\n    unregister\\n```\\n\\nExample of `jmxremote.password`:\\n\\n```\\n#\\n# JMX Access Password file\\n#\\nreader readerpassword\\nadmin  adminpassword\\n```\\n\\nNote: on `jmxremote.password`, you should apply `chmod 600` or `400` for security reasons.\\n\\n\"},{\"path\":\"instance-administration/notifications\",\"content\":\"---\\ntitle: Notifications\\nurl: /instance-administration/notifications/\\n---\\nAt the end of each analysis, notifications are computed for each subscribed user. Then, asynchronously, these notifications are sent via email.\\n\\nTo set the frequency with which the notification queue is processed, set `the sonar.notifications.delay` property (in seconds) in _$SONARQUBE-HOME/conf/sonar.properties_. The server must be restarted for the new value to be taken into account.\\n\\n## Who gets notifications\\nOnly users who subscribe themselves will get notifications. With only one exception, there is no admin functionality to proactively subscribe another user. If you believe a user should be receiving notifications, then it's time to practice the gentle art of persuasion.\\n\\n### The exception\\nNotifications will automatically (without user opt-in) be sent to users with Quality Profile Administration rights when built-in quality profiles are updated. These updates can only happen via an upgrade of the relevant analyzer. This type of notification is on by default, and can be toggled globally in **[Administration > General Settings > General](/#sonarqube-admin#/admin/settings/)**.\\n\\n## Email Configuration\\nTo configure the email server, go to **[Administration > General Settings > Email](/#sonarqube-admin#/admin/settings)**.\\n\\nCheck also the Server base URL property at Administration > General Settings > General to make sure that links in those notification emails will redirect to the right SonarQube server URL.\\n\"},{\"path\":\"instance-administration/plugin-version-matrix\",\"content\":\"---\\ntitle: Plugin Version Matrix\\nurl: /instance-administration/plugin-version-matrix/\\n---\\n\\n\\n![(Supported by SonarSource)](https://update.sonarsource.org/plugins/onde-sonar-16.png) = Supported by SonarSource  \\n![(not compatible)](https://update.sonarsource.org/plugins/error.png) = Not compatible  \\n\\n<iframe src=\\\"https://update.sonarsource.org/plugins/compatibility-matrix.html\\\" height=\\\"3100\\\">Your browser does not support iframes.</iframe>\\n\\n\"},{\"path\":\"instance-administration/project-move\",\"content\":\"---\\ntitle: Project Move\\nurl: /instance-administration/project-move/\\n---\\n\\n_Project Move is available as part of [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n\\nProject Move allows you to export a project from one SonarQube instance and import it into another, identically configured SonarQube instance. To use Project Move, you must have the Administer permission on the project in the source instance, and access to the file systems of both instances.\\n\\n## When to Use \\\"Project Move\\\"\\nIn the following cases:\\n\\n* you want to create a central SonarQube instance at enterprise level and you want to keep the history created on N instances used previously at the team level\\n* your company is acquiring another company that already has a central SonarQube instance\\n* an application is transferred from one team to another in a large company and that company has several SonarQube instances\\n\\n## Prerequisites\\nIn order to be able to export and then load your Project's data, the two SonarQube instances must have:\\n\\n* the exact same version\\n* the same plugins with the same versions\\n* the same custom metrics\\n* the same custom rules\\n\\n## How To Export\\nOn the source instance:\\n* reanalyze the project one last time to make sure it is populated with data corresponding to your current SonarQube installation\\n* navigate to the project and at the project level, choose **Administration > Import / Export**\\n* click on the **Export** button to generate a zip file containing the settings and history of your Project (but not the source code). Note that if you need to change the Project's key, you must to do it before performing the export.\\n\\nA zip file containing all project data ex is generated in _$SONAR_SOURCE_HOME/data/governance/project_dumps/export/_ named _<project_key>.zip_\\n\\n## How To Import\\nOn the target instance:\\n\\n* With a user having the \\\"Administer System\\\" and \\\"Create Projects\\\" permissions, go to [**Administration > Projects > Management**](/#sonarqube-admin#/admin/projects_management/) and [provision the project](/project-administration/project-existence/) using the same key the project had in the source instance.\\n* Configure the Project's permissions, and the Quality Profiles and Quality Gate associated to the Project\\n* Put the generated zip file into the directory *$SONAR\\\\_TARGET\\\\_HOME/data/governance/project_dumps/import*\\n* Go to the Project's Home Page and choose **Administration > Import / Export**\\n* Click on the Import button to start importing your data\\n* Source code is not included in the zip file. Once the import is finished, trigger an analysis to import source files into the new instance.\\n\\nNotes:\\n\\n* If the import is successful, the zip file will automatically be deleted.\\n* It is not possible to import a Project that has been already analyzed on the target instance.\\n* Security reports in an imported project will be empty until analysis has run.\\n\"},{\"path\":\"instance-administration/quality-profiles\",\"content\":\"---\\ntitle: Quality Profiles\\nurl: /instance-administration/quality-profiles/\\n---\\n\\n## Overview\\n\\n**Quality Profiles** are a core component of {instance}, since they are where you define sets of [**Rules**](/user-guide/rules/) that when violated should raise issues on your codebase (example: Methods should not have a Cognitive Complexity higher than 15). Quality Profiles are defined for individual languages.\\n\\nTo manage Quality Profiles, browse to the the [**Quality Profiles**](/#sonarqube#/profiles) page <!-- sonarcloud --> of your organization<!-- /sonarcloud --> where you'll find Quality Profiles grouped by language.\\n\\nIdeally all of your projects will be measured with the same Quality Profiles, but that is not _always_ practical. In some cases, you may find that:\\n\\n- You have different technical requirements from one project to another (different rules might apply to a threaded/non-threaded Java application)\\n- You want to ensure stronger requirements for some of your projects (internal frameworks, for example)\\n\\nWhile it's recommended to have as few Quality Profiles as possible to ensure consistency across projects, you can define as many Quality Profiles as are necessary to fit your specific needs.\\n\\nEach language must have a default Quality Profile (marked with the Default tag). Projects that are not explicitly assigned to specific Quality Profiles will be analyzed using the default Quality Profiles. There is also at least one built-in Quality Profile (the **Sonar way**) per language. These Quality Profiles are designed by SonarSource with rules that are generally applicable for most projects. \\n\\nThe Sonar way Quality Profiles are a good starting-point as you begin analyzing code, and they start out as the default Quality Profiles for each language. That being said, we recommend that you **Copy** this profile and begin to fine-tune the contents. Why?\\n\\n- Default Quality Profiles are not editable, so you won't be able to customize the Sonar way to your needs\\n- The Sonar way becomes a baseline against which you can track your own Quality Profiles\\n- The Sonar way may be updated over time to adjust which rules are included and adjust rule severities.\\n\\n## How do I...\\n\\n### Delegate the management of Quality Profiles to someone else?\\n\\nBy default, only users with the \\\"Administer Quality Profiles\\\" permission can edit Quality Profiles. But in large organizations, it may not be desirable to grant permissions to change all the Quality Profiles without distinction. That's why you can also grant users/groups the permission to edit an individual Quality Profile so that, for instance, the management of the Swift profile can be delegated to a group of Swift experts, and the same for COBOL, ...\\n\\nThis delegation of permission can only be performed by someone who already has the \\\"Administer Quality Profiles\\\" permission or individual edit rights on the profile to which additional permissions should be granted. The interface to grant individual permissions is available on the profile detail page.\\n\\n### Copy the rules from one profile to another?\\n\\nMany times people want to work from a profile that's based on a built-in profile without actually using the built-in profile. The easiest thing to do in this case is to go to the original profile, we'll call it _Source_, in **Quality Profiles**. From there, click through on the total number of rules in _Source_ to land on the **Rules** page at a pre-narrowed search of _Source_'s rules. Use **Bulk Activate** to turn Source's rules on in your target profile.\\n\\n### Know what's changed in a profile?\\n\\nWhen {instance} notices that an analysis was performed with a profile that is different in some way from the previous analysis, a Quality Profile event is added to the project's event log. To see the changes in a profile, navigate to the profile (**Quality Profiles > [ Profile Name ]**), and choose **Changelog**. This may help you understand how profile changes impact the issues raised in an analysis.\\n\\nAdditionally, users with Quality Profile administration privileges are notified by email each time a built-in profile (one that is provided directly by an analyzer) is updated. These updates can only be caused by analyzer updates.\\n\\n### Copy a profile from one SonarQube instance to another?\\n\\nUse the **Back up** feature on the source instance to export the profile to an XML file. Use the **Restore Profile** feature on the target instance to import the file. Note that some [limitations](https://jira.sonarsource.com/browse/SONAR-5366) on this feature exist.\\n\\n### Apply a core set of rules plus additional rules to a project?\\n\\nLet's say your company has a minimum set of coding rules that all teams must follow, but you want to add rules that are specific to the in use technology in your project. Those rules are good for your team, but irrelevant or even misleading for others. This situation calls for inheritance. Set up a base profile, we'll call it _Root_ with your core set of rules. Then create a child profile, we'll call it _Sprout_. Once it's created, you can **Change parent** to inherit from _Root_, then add your missing rules.\\n\\nAny profile that inherits from another Quality Profile will be updated when the parent Quality Profile is updated.\\n\\n### Make sure my non-default profile is used on a project?\\n\\nOne profile for each language is marked the default. Barring any other intervention, all projects that use that language will be analyzed with that profile. To have a project analyzed by a non-default profile instead, start from **Quality Profiles**, and click through on your target profile, then use the Projects part of the interface to manage which projects are explicitly assigned to the profile.\\n\\n### Make sure I've got all the relevant new rules in my profile?\\n\\nEach time a language plugin update is released, new rules are added, but they won't appear automatically in your profile unless you're using a built-in profile such as _Sonar way_.\\n\\nIf you're not using a built-in profile, you can compare your profile to the built-in profile to see what new on-by-default rules you're missing.\\n\\nAnother option is to go to the **Rules** space, and use the **Available Since** search facet to see what rules have been added to the platform since the day you upgraded the relevant plugin.\\n\\nAnd finally, the profile interface itself will help you be aware of rules added in a new plugin version in the **Latest New Rules** section on the right of the interface.\\n\\n### Compare two profiles?\\n\\nStarting from the **Quality Profiles** page, click through on one of the profiles you'd like to compare, then use the **Actions > Compare** interface to select the second profile and see the differences.\\n\\n### Make sure I don't have any deprecated rules in my profile?\\n\\nThe **Deprecated Rules** section of the rules interface itself is your first warning that a profile contains deprecated rules. This pink-background section gives the total number of instances of deprecated rules that are currently active in profiles, and a breakdown of deprecated count per profile. A click-through here takes you to the **Rules** page to edit the profile in question.\\n\\nAlternately, you can perform a **Rules** search for the rules in a profile (either manually or by clicking-through from **Quality Profiles** page) and use the **Status** rule search facet to narrow the list to the ones that need attention.\\n\\n## Security\\n\\nThe Quality Profiles service can be accessed by any user (even anonymous users). All users can view every aspect of a profile. That means anyone can see which rules are included in a profile, and which ones have been left out, see how a profile has changed over time, and compare the rules in any two profiles.\\n\\nTo make rule profile changes (create, edit or delete) users must be granted the **Administer Quality Profiles and Gates** permission.\\n\\nA **project administrator** can choose which profiles his project is associated with. See Project Settings for more.\\n\"},{\"path\":\"instance-administration/security\",\"content\":\"---\\ntitle: Security\\nurl: /instance-administration/security/\\n---\\n\\n## Overview\\n\\nSonarQube comes with a number of global security features:\\n\\n* on-board authentication and authorization mechanisms\\n* the ability to force users to authenticate before they can see any part of a SonarQube instance\\n* the ability to delegate to authentication (for more see [Delegating Authentication](/instance-administration/delegated-auth/))\\n\\nAdditionally, you can configure at a group or user level who can:\\n* see that a project even exists\\n* access a project's source code \\n* administer a project (set exclusion patterns, tune plugin configuration for that project, etc.)\\n* administer Quality Profiles, Quality Gates, and the SonarQube instance itself.\\n\\n\\nAnother aspect of security is the encryption of settings such as passwords. SonarQube provides a built-in mechanism to encrypt settings.\\n\\n## Authentication\\nThe first question that should be answered when setting the security strategy for SonarQube is: Can anonymous users browse the SonarQube instance or is authentication be required? \\n\\nTo force user authentication, log in as a system administrator, go to **[Administration > Configuration > General Settings > Security](/#sonarqube-admin#/admin/settings?category=security)**, and set the **Force user authentication** property to true. \\n\\n[[info]]\\n| SonarQube does not support sharing email addresses across multiple users.\\n\\n\\n### Authentication Mechanisms\\nAuthentication can be managed through a number of mechanisms:\\n\\n* Via the SonarQube built-in users/groups database\\n* Via external identity providers such as an LDAP server (including LDAP Service of Active Directory), GitHub etc. See the Authentication & Authorization section of the Plugin Library.\\n* Via HTTP headers\\n\\n### Technical Users\\nWhen you create a user in SonarQube's own database, it is considered local and will only be authenticated against SonarQube's own user/group database rather than against any external tool (LDAP, Active Directory, Crowd, etc.). By default `admin` is a local account.\\n\\nSimilarly, all non-local accounts will be authenticated only against the external tool. \\n\\nAn Administrator can manage tokens on a user's behalf via **[Administration > Security > Users](/#sonarqube-admin#/admin/users)**. From here, click in the user's **Tokens** column to see the user's existing tokens, and either revoke existing tokens or generate new ones. Once established, a token is the only credential needed to run an analysis. Tokens should be passed as the value of the `sonar.login` property.\\n\\n### Default Admin Credentials\\nWhen installing SonarQube, a default user with Administer System permission is created automatically:\\n\\n* Login: admin\\n* Password: admin\\n\\n## Reinstating Admin Access\\nIf you changed and then lost the `admin` password, you can reset it using the following query:\\n```\\nupdate users set crypted_password = '$2a$12$uCkkXmhW5ThVK8mpBvnXOOJRLd64LJeHTeCkSuB3lfaR2N0AYBaSi', salt=null, hash_method='BCRYPT' where login = 'admin'\\n```\\nIf you've deleted `admin` and subsequently locked out the other users with global administrative permissions, you'll need to re-grant `admin` to a user with the following query:\\n```\\nINSERT INTO user_roles(user_id, role) VALUES ((select id from users where login='mylogin'), 'admin');\\n```\\n\\n## Authorization\\nThe way authorization is implemented in SonarQube is pretty standard. It is possible to create as many users and groups of users as needed. The users can then be attached (or not) to (multiple) groups. Groups and / or users are then given (multiple) permissions. The permissions grant access to projects, services and functionalities.\\n\\nTo administer groups and users, choose **Administration > Security**, and use the sub-menu items.\\n\\n### User\\nMultiple integrations that allow the delegation of authentication are available (see the [Plugin Library](https://redirect.sonarsource.com/doc/plugin-library.html) and [Other Plugins](https://docs.sonarqube.org/display/PLUG/Other+Plugins), but you can manually create and edit users at **[Settings > Security > Users](/#sonarqube-admin#/admin/users)**. For manually-created users, login and password can be set at creation. Manually-created users can edit their passwords.\\n\\nDuring both user creation and edit, you can set an account's screen name, email address. User login and email address will be implicitly recognized by the Issue Assignment feature as SCM accounts if applicable, but you can set additional SCM accounts explicitly. \\n\\n### Group\\nA group is a set of users.\\n\\nTo administer groups, go to **[Administration > Security > Groups](/#sonarqube-admin#/admin/groups)**.\\n\\nTo edit the membership of a group, click the icon next to the membership total.\\n\\nTwo groups have a special meaning:\\n\\n* **Anyone** is a group that exists in the system, but that cannot be managed. Every user belongs to this group, including Anonymous user.\\n* **sonar-users** is the default group to which users are automatically added.\\n\\n### Global Permissions\\nTo set global permissions, log in as a System administrator and go to **[Administration > Security > Global Permissions](/#sonarqube-admin#/admin/permissions)**. \\n\\n* **Administer System**: All administration functions for the instance: global configuration.\\n* **Administer Quality Profiles**: Any action on quality profiles.\\n* **Administer Quality Gates**: Any action on quality gates\\n* **Execute Analysis**: Execute analyses (project, view, report, developer), and to get all settings required to perform the analysis, even the secured ones like the scm account password, and so on.\\n* **Create Projects**: Initialize the structure of a new project before its first analysis. This permission is also required when doing the very first analysis of a project that has not already been created via the GUI. * **\\n* **Create Applications**: Create a new Application. * **\\n* **Create Portfolios**: Create a new Portfolio. * **\\n\\n\\\\* Users with any explicit create permission will see a \\\"+\\\" item in the top menu giving access to these functions. If these permissions are removed from global administrators, they will loose quick access to them via the \\\"+\\\" menu, **but retain access to creation** via the **Administration** menu.\\n\\n** Creating an item does not automatically grant rights to administer it. For that, see _Creators permission_ below.\\n\\n### Project Permissions\\nProject permissions are available from the project-level Administration menu: **Administration > Permissions**.\\n\\nProject visibility may be toggled between public or private. Making a project private hides its source code and measures from the `Anyone` group. For both public and private projects, four different permissions can be set:\\n\\n* **Administer Issues**: Change the type and severity of issues, resolve issues as being \\\"Won't Fix\\\" or \\\"False Positive\\\" (users also need \\\"Browse\\\" permission).\\n* **Administer Security Hotspots**: With Security Hotspots, you can **Open as a Vulnerability**, **Set as In Review**, **Resolve as Reviewed**. With a Security Hotspot that's been opened as a Vulnerabilty, you can **Reset as To Review** or **Resolve as Reviewed**.\\n* **Administer**: Access project settings and perform administration tasks (users also need \\\"Browse\\\" permission).\\n* **Execute Analysis**: Execute analyses (project, view, report, developer), and to get all settings required to perform the analysis, even the secured ones like the scm account password, the jira account password, and so on.\\n\\nPrivate projects have two additional permissions:\\n* **Browse**: Access a project, browse its measures, issues and perform some issue edits (confirm/resolve/reopen, assignment, comment).\\n* **See Source Code**: View the project's source code.\\n\\nNote that permissions _are not_ cumulative. For instance, if you want to be able to administer the project, you also have to be granted the Browse permission to be able to access the project (which is the default for Public project).\\n\\nYou can either manually grant permissions for each project to some users and groups or apply permission templates to projects. \\n\\n## Permission Templates for Default Permissions\\nSonarQube ships with a default permissions template, which automatically grants specific permissions to certain groups when a project, portfolio, or application is created. It is possible to edit this template, and to create additional templates. A separate template can be set for each type of resource. Further, for projects you can have a template apply only to a subset of new projects using a project key regular expression (the template's **Project Key Pattern**). By default, every new project with a key that matches the supplied pattern will have template's permissions applied.\\n\\nTemplates are empty immediately after creation. Clicking on the template name will take you to its permission editing interface.\\n\\nTemplates are administered through **[Administration > Security > Permission Templates](/#sonarqube-admin#/admin/permission_templates)**.\\n\\n### Creators permissions\\n**Creators** is a special group that appears only in the permission template editing interface. Any permissions assigned to this group will at the time of project/portfolio/application creation be granted to the single user account used to create the project. This allows SonarQube administrators to let users autonomously create and administer their own projects.\\n\\nWhile templates can be applied after project creation, applying a template that includes \\\"Creators\\\" permissions to an existing project/portfolio/application will not grant the relevant permissions to the project's original creator because that association is not stored.\\n\\n### Reset project permissions to a template\\nTo apply permission templates to projects go to **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management)**. You can  either apply a template to a specific project using the project-specific **Actions > Apply Permission Template** option or use the Bulk Apply Permission Template to apply a template to all selected projects.\\n\\nNote that there is no relation between a project and a permission template, meaning that:\\n* the permissions of a project can be modified after a permission template has been applied to this project\\n* none of the project permissions is changed when a permission template is modified\\n\\n## Settings Encryption\\nEncryption is mostly used to remove clear passwords from settings (database or SCM credentials for instance). The implemented solution is based on a symetric key algorithm. The key point is that the secret key is stored in a secured file on disk. This file must owned by and readable only by the system account that runs the SonarQube server.\\n\\nThe algorithm is AES 128 bits. Note that 256 bits cipher is not used because it's not supported by default on all Java Virtual Machines ([see this article](https://confluence.terena.org/display/~visser/No+256+bit+ciphers+for+Java+apps)).\\n\\n1. **Generate the secret key**  \\nA unique secret key must be shared between all parts of the SonarQube infrastructure (server and analyzers). To generate it, go to **[Administration > Configuration > Encryption](/#sonarqube-admin#/admin/settings/encryption)** and click on Generate Secret Key.\\n1. **Store the secret key on the SonarQube server**  \\n   * Copy the generated secred key to a file on the machine hosting the SonarQube server. The default location is _~/.sonar/sonar-secret.txt_. If you want to store it somewhere else, set its path through the `sonar.secretKeyPath` property in _$SONARQUBE-HOME/conf/sonar.properties_\\n   * Restrict file permissions to the account running the SonarQube server (ownership and read-access only).\\n   * Restart your SonarQube server\\n1. **Generate the encrypted values of your settings**  \\nGo back to **[Administration > Configuration > Encryption](/#sonarqube-admin#/admin/settings/encryption)** and use the form that has been added to the interface to generated encrypted versions of your values.\\n![Encrypt values through the admin interface](/images/encrypt-value.png)\\n1. **Use the encrypted values in your SonarQube server configuration**  \\nSimply copy these encrypted values into _$SONARQUBE-HOME/conf/sonar.properties_\\n```\\nsonar.jdbc.password={aes}CCGCFg4Xpm6r+PiJb1Swfg==  # Encrypted DB password\\n...\\nsonar.secretKeyPath=C:/path/to/my/secure/location/my_secret_key.txt\\n```\\n\\n\"},{\"path\":\"instance-administration/system-info\",\"content\":\"---\\ntitle: Server Logs & System Info\\nurl: /instance-administration/system-info/\\n---\\n\\nThe System Info page is found at **[Administration > System](/#sonarqube-admin#/admin/system)**. It gives you access to detailed information on the state of your SonarQube instance. \\n\\n## System Info\\n\\nYou can browse details about your running instance on this page. \\n\\n### Download\\n\\nAdditionally, if you have a Support contract, you might be asked by a Support representative to send in your System Info, which can be downloaded from the page **[Administration > System](/#sonarqube-admin#/admin/system)** using the **\\\"Download System Info\\\"** button at the top.\\n\\n### Server Id\\nYour server id can be obtained from this page by expanding the **System** section. If you're running a commercial instance, you can also find this value on the License page (**[Administration > Configuration > License Manager](/#sonarqube-admin#/admin/extension/license/app)**)\\n\\n## Logs\\nServer-side logging is controlled by properties set in _$SONARQUBE-HOME/conf/sonar.properties_.\\n\\n4 logs files are created: one per SonarQube process.\\n\\n### Log Level\\nThe server-side log level can be customized via the `sonar.log.level` property. Supported values are:\\n\\n* **`INFO`** - the default\\n* **`DEBUG`** - for advanced logs.\\n* **`TRACE`** - show advanced logs and all SQL and Elasticsearch requests. `TRACE` level logging slows down the server environment, and should be used only for tracking web request performance problems.\\n\\n### Log Level by Process\\nThe server-side log level can be adjusted more precisely for the 4 processes of SonarQube Server via the following property:\\n\\n* **`sonar.log.level.app`** - for the Main process of SonarQube (aka WrapperSimpleApp, the bootstrapper process starting the 3 others) \\n* **`sonar.log.level.web`** - for the WebServer\\n* **`sonar.log.level.ce`** - for the ComputeEngineServer\\n* **`sonar.log.level.es`** - for the SearchServer\\n\\n### Log Rotation\\nTo control log rolling, use the `sonar.log.rollingPolicy`\\n\\n* **`time:[value]`** - for time-based rotation. For example, use `time:yyyy-MM-dd` for daily rotation, and * `time:yyyy-MM` for monthly rotation.\\n* **`size:[value]`** - for size-based rotation. For example, `size:10MB`.\\n* **`none`** - for no rotation. Typically this would be used when logs are handled by an external system like logrotate.\\n\\n`sonar.log.maxFiles` is the maximum number of files to keep. This property is ignored if `sonar.log.rollingPolicy=none`.\\n\\n### UI Access to Logs and Log Levels\\n\\nThe System Info page gives you the ability to download your instance's current log files (log files rotate on a regular basis), and to tune the log level via controls at the top of the page. Changes made here are temporary, and last only until the next time the instance is restarted, at which point the level will be reset to the more permanent value set in _$SONARQUBE-HOME/conf/sonar.properties_. Regardless, if you change your log level _from_ `INFO`, but sure to change it back as soon as is practical; log files can get very large very quickly at lower log levels.\\n\\n## Total Lines of Code\\nThe number of Lines of Code (for licensing purposes) in an instance can be found in the **System** section of the System Info page on, and on the License page (**[Administration > Configuration > License Manager](/#sonarqube-admin#/admin/extension/license/app)** in commercial editions. \\n\\nIf you're on a commercial edition and using Branch or PR analysis, rest assured that only lines from the single largest branch in a project are considered for licensing purposes. The Lines of Code in the rest of the branches are ignored.\\n\"},{\"path\":\"project-administration/configuring-portfolios-and-applications\",\"content\":\"---\\ntitle: Managing Portfolios and Applications\\nurl: /project-administration/configuring-portfolios-and-applications/\\n---\\n\\n*Portfolios and Applications are available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/).*\\n\\n## Permissions\\nUsers with the Create Portfolios or Create Applications permission have access to the creation interfaces from the \\\"+\\\" item in the top menu.  \\n\\nGlobal Administrators  have access to the overall Portfolio and Application administration interface at **[Administration > Configuration > Portfolios](/#sonarqube-admin#/admin/extension/governance/views_console)**. From this page, Portfolios and Applications can be created and edited. \\n\\nUsers of either type can edit an individual Portfolio or Application definition from the lower-level **Administration > Edit Definition** interface.\\n\\nGlobal Administrators also have access to the Projects Management page at **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management)**. Changing the selection mechanism on this page to “Portfolios” or “Applications” lets you manage the Portfolios or Applications of your SonarQube instance. The dropdown menu to the right of each item lets you edit permissions, apply Permission Templates or restore access to a Portfolio or Application.\\n\\n## Populating Portfolios\\nOnce your Portfolio exists, you can populate it with any mix of projects, Applications, and sub-portfolios. Applications may only be populated with projects.\\n\\n## Adding a Sub-portfolio\\nTo add a sub-portfolio, click on “Add Portfolio” at the top of the third column, and choose:\\n\\n* **Standard** - This option allows you to create a new sub-Portfolio from scratch. Once created, you can add projects, applications, and more layers of sub-portfolios.\\n* **Local Reference** - This option allows you to reference an existing Portfolio/Application as a sub-portfolio. Once added, it is not editable here, but must be chosen in the left-most column to be edited.\\n\\n## Adding Projects to a Portfolio\\nTo add projects directly to a Portfolio or standard sub-Portfolio first make sure the correct item is selected, then choose the **Project selection mode**:\\n\\n* **Manual** – choose the projects individually.\\n* **Tags** - select one or more project tags. Projects with those tags will automatically be included.\\n* **Regular Expression** – specify a regular expression and projects with a matching name OR key will be included.\\n* **All Remaining Projects** – choose this option to add all projects not already included in this Portfolio (directly or via sub-Portfolio).\\n\\n## Adding Applications to a Portfolio\\nTo add an Application to a Portfolio, first make sure your Application is [already created](/user-guide/applications/). Then:\\n1. Navigate to the Portfolios configuration page by going to **[Administration > Configuration > Portfolios](/#sonarqube-admint#/admin/extension/governance/views_console/)**.\\n2. Select the Portfolio where you want to add your Application\\n3. Click **Add Portfolio**\\n4. Select **Local Reference**\\n5. Choose your Application from the drop-down list and click **Add**.\\n\\n[[info]]\\n|**Project unicity under a portfolio**<br/><br/>\\n|Projects, applications and sub-portfolios can only appear once in any given hierarchy in order to avoid magnifying their impacts on aggregated ratings. The portfolio configuration interface has some logic to prevent obvious duplications (e.g. manually adding the same project), however in case of more subtle duplications (e.g. due to regex, or other bulk definition), then the calculation of that portfolio will fail with a helpful error message.\\n\\n## Populating Applications\\nOnce your Application exists, you can populate it with manually-selected projects. By default, the configuration interface shows the list of projects currently selected for the application. To add additional projects, choose the \\\"Unselected\\\" or \\\"All\\\" filter.\\n\\n## Creating Application Branches\\nOnce your Application is populated with projects, you can create application branches by choosing long-lived branches from the application's component projects. This option is available in the Application's **Administration > Edit Definition** interface, or from the global administration interface.\\n\\n## Calculation\\nBy default, Applications and Portfolios are queued to be recalculated after each analysis of an included project. For each relevant Portfolio and Application, a “Background Task” is created, and you can follow the progress on each in the **[Administration > Projects > Background Tasks](/#sonarqube-admin#/admin/background_tasks)** by looking at the logs available for each item.\\n\\nIf you're having performance issues related to automatic recalculation of large portfolios, you can specify the hour(s) at which you want them to be recalculated at **[Administration > Portfolios > Recalculation](/#sonarqube-admin#/admin/settings?category=portfolios)**. Portfolios are queued to be recalculated at the beginning of the hour(s) that you specify.\\n\"},{\"path\":\"project-administration/managing-project-history\",\"content\":\"---\\ntitle: Managing Project History\\nurl: /project-administration/managing-project-history/\\n---\\n\\nOne of the most powerful features of {instance} is that it shows you not just your project health today, but how it has changed over time. It does that by selectively keeping data from previous analyses (see [Housekeeping](/instance-administration/housekeeping/)). It doesn't keep all previous analyses - that would bloat the database. Similarly, for the analyses it does keep, {instance} doesn't keep all the data. Once a project snapshot moves from the \\\"Last analysis\\\" (i.e. the most recent) to being part of the project's history, data below the project level is purged - again to keep from bloating the database.\\n\\nTypically these aren't things you need to even think about; {instance} just handles them for you. But occasionally you may need to remove a bad snapshot from a project's history or change the housekeeping algorithms.\\n\\n## Managing History\\nOccasionally, you may need to manually delete a project snapshot, whether because the wrong quality profile was used, or because there was a problem with analysis, and so on. Note that the most recent snapshot (labeled \\\"Last snapshot\\\") can never be deleted.\\n\\n[[warning]]\\n|**About deleting snapshots**<br/><br/>\\n|Deleting a snapshot is a 2-step process:<br/><br/>\\n|* The snapshot must first be removed from the project history by clicking on Delete snapshot. It won't be displayed anymore on this History page but will still be present in the database.\\n|* The snapshot is actually deleted during the next project analysis.\\n\\nAt project level, from the front page **Activity** list, choose **Show More** to see the full activity list.\\n\\nFor every snapshot, it is possible to manually:\\n\\n* Add, rename or remove a version\\n* Add, rename or remove an event\\n* Delete the snapshot\\n\"},{\"path\":\"project-administration/narrowing-the-focus\",\"content\":\"---\\ntitle: Narrowing the Focus\\nurl: /project-administration/narrowing-the-focus/\\n---\\n\\nIf {instance}'s results aren't relevant, no one will want to use it. That's why precisely configuring what to analyze for each project is a very important step. Doing so allows you to remove noise, like the issues and duplications marked on generated code, or the issues from rules that aren't relevant for certain types of objects.\\n\\n{instance} gives you several options for configuring exactly what will be analyzed. You can\\n\\n* completely ignore some files or directories\\n* exclude files/directories from Issues detection (specific rules or all of them) but analyze all other aspects\\n* exclude files/directories from Duplications detection but analyze all other aspects\\n* exclude files/directories from Coverage calculations but analyze all other aspects\\n\\nYou can make these changes globally or at a project level. At both levels, the navigation path is the same: **Administration > General Settings > Analysis Scope**.\\n\\n## Ignore Files\\nWe recommend that you exclude generated code, source code from libraries, etc. There are four different ways to narrow your analysis to the source code that will be relevant to the development team. You can combine them all together to tune your analysis scope. Additionally, we automatically exclude from analysis the files described in your projects' `.gitignore` files. This behavior can be disabled. See `sonar.scm.exclusions.disabled` in the [Analysis Parameters](/analysis/analysis-parameters/) page for details.\\n\\n### Source Directories\\nSet the [sonar.sources](/analysis/analysis-parameters/) property to limit the scope of the analysis to certain directories.\\n\\n### File Suffixes\\nMost language plugins offer a way to restrict the scope of analysis to files matching a set of extensions. Go to **Administration > General Settings > [Language]** to set the File suffixes property.\\n\\n### Choosing Files\\nYour first line of defence having a well-defined set of files in your analysis is your `sonar.sources` value. For projects built and analyzed with Maven, Gradle, or MSBuild, this value is defined automatically with a generally thorough, yet sane value. For other projects, you want to make sure `sonar.sources` is set to your project _sub-directory_ that actually contains your source files. Setting it to `.` will cast a wider net than most people intend.\\n\\n![Set sonar.sources to the project sub-directory that contains your source files](/images/sources.jpg)\\n\\nOnce you've got all the files _in_ your analysis that you want, it's time to look at whether you have any files you'd rather leave _out_ of your analysis, such as JavaScript libraries, and generated files. Those can be handled with Exclusions. Specifying an exclusion means that everything under your `sonar.sources` directory will be included in analysis _except_ the files with paths that match your exclusion regular expression.\\n\\n![Use exclusions to keep libraries and generated files out of analysis](/images/exclusions.jpg)\\n\\nTo use exclusions to analyze everything but the specified files, go to **Administration > General Settings > Analysis Scope > Files**.\\n\\n* **Source File Exclusions** (`sonar.exclusions`) - to exclude source code files\\n* **Test File Exclusions** (`sonar.test.exclusions`) - to exclude test files\\n\\nThe vast majority of needs are met simply by setting `sonar.sources` carefully. Most other needs are met with the addition of a few simple exclusions. In a few corner cases, it is necessary to be explicit about what's _included_ in analysis and leave out everything else, but that is not the normal case, and setting inclusions should not be the first thing you try when configuring a new project.\\n\\n![Use inclusions in the rare case that you want to analyze only a subset of files](/images/inclusions.jpg)\\n\\nTo use exclusions to analyze _only_ the specified subset(s) of files in `sonar.sources`, go to **Administration > General Settings > Analysis Scope > Files**.\\n\\n* **Source File Inclusions** (`sonar.inclusions`)\\n* **Test File Inclusions** (`sonar.test.inclusions`)\\n\\nYou can set these properties at both the project and global levels.\\n\\nSee the Patterns section below for more details on the syntax to use in these inputs.\\n\\n## Ignore Issues\\nYou can have {instance} ignore issues on certain components and against certain coding rules. Go to **Administration > General Settings > Analysis Scope > Issues**.\\n\\nNote that the properties below can only be set through the web interface because they are multi-valued.\\n\\n### Ignore Issues on Files\\nYou can ignore all issues on files that contain a block of code matching a given regular expression.\\n\\nExample:\\n* *Ignore all issues in files containing \\\"@javax.annotation.Generated\\\"*  \\n`@javax\\\\.annotation\\\\.Generated`\\n\\n### Ignore Issues in Blocks\\nYou can ignore all issues on specific blocks of code, while continuing to scan and mark issues on the remainder of the file. Blocks to be ignored are delimited by start and end strings which can be specified by regular expressions (or plain strings).\\n\\nNotes:\\n\\n* If the first regular expression is found but not the second one, the end of the file is considered to be the end of the block.\\n* Regular expressions are not matched on a multi-line basis.\\n\\n### Ignore Issues on Multiple Criteria\\nYou can ignore issues on certain components and for certain coding rules. To list a specific rule, use the fully qualified rule ID.\\n\\n[[info]]\\n| ![](/images/info.svg) You can find the fully qualified rule ID on the Rule definition.\\n\\nExamples:\\n\\n* *Ignore all issues on all files*  \\nKEY = `*`  \\nPATH = `**/*`\\n* *Ignore all issues on COBOL program \\\"bank/ZTR00021.cbl\\\"*  \\nKEY = `*`  \\nPATH = `bank/ZTR00021.cbl`  \\n* *Ignore all issues on classes located directly in the Java package \\\"com.foo\\\", but not in its sub-packages*  \\nKEY = `*`  \\nPATH = `com/foo/*`\\n* *Ignore all issues against coding rule \\\"cpp:Union\\\" on files in the directory \\\"object\\\" and its sub-directories*  \\nKEY = `cpp:Union`  \\nPATH = `object/**/*`  \\n\\n### Restrict Scope of Coding Rules\\n\\nYou can restrict the application of a rule to only certain components, ignoring all others.\\n\\nExamples:\\n\\n* *Only check the rule \\\"Magic Number\\\" on \\\"Bean\\\" objects and not on anything else*  \\nKEY = `checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck`  \\nPATH = `**/*Bean.java`\\n* *Only check the rule \\\"Prevent GO TO statement from transferring control outside current module on COBOL programs\\\" located in the directories \\\"bank/creditcard\\\" and \\\"bank/bankcard\\\". This requires two criteria to define it:*  \\nKEY #1 = `cobol:COBOL.GotoTransferControlOutsideCurrentModuleCheck`  \\nPATH #1 = `bank/creditcard/**/*`  \\nKEY #2 = `cobol:COBOL.GotoTransferControlOutsideCurrentModuleCheck`  \\nPATH #2 = `bank/bankcard/**/*`\\n\\n## Ignore Duplications\\n\\nYou can prevent some files from being checked for duplications.\\n\\nTo do so, go to **Administration > General Settings > Analysis Scope > Duplications** and set the *Duplication Exclusions* property. See the Patterns section for more details on the syntax.\\n\\n## Ignore Code Coverage\\n\\nYou can prevent some files from being taken into account for code coverage by unit tests.\\n\\nTo do so, go to **Administration > General Settings > Analysis Scope > Code Coverage** and set the *Coverage Exclusions* property. See the Patterns section for more details on the syntax.\\n\\n## Patterns\\n\\nPaths are relative to the project base directory.\\n\\nThe following wildcards can be used:\\n\\n* `*`\\t- zero or more characters  \\n* `**` - zero or more directories  \\n* `?` - a single character  \\n\\nRelative paths are based on the fully qualified name of the component.\\n\\nExamples:\\n\\n`# Exclude all classes ending by \\\"Bean\\\"`  \\n`# Matches org/sonar.api/MyBean.java, org/sonar/util/MyOtherBean.java, org/sonar/util/MyDTO.java, etc.`  \\n`sonar.exclusions=**/*Bean.java,**/*DTO.java`\\n\\n`# Exclude all classes in the \\\"src/main/java/org/sonar\\\" directory`  \\n`# Matches src/main/java/org/sonar/MyClass.java, src/main/java/org/sonar/MyOtherClass.java`  \\n`# But does not match src/main/java/org/sonar/util/MyClassUtil.java`  \\n`sonar.exclusions=src/main/java/org/sonar/*`  \\n\\n`# Exclude all COBOL programs in the \\\"bank\\\" directory and its sub-directories`  \\n`# Matches bank/ZTR00021.cbl, bank/data/CBR00354.cbl, bank/data/REM012345.cob`  \\n`sonar.exclusions=bank/**/*`  \\n\\n`# Exclude all COBOL programs in the \\\"bank\\\" directory and its sub-directories whose extension is .cbl`  \\n`# Matches bank/ZTR00021.cbl, bank/data/CBR00354.cbl`  \\n`sonar.exclusions=bank/**/*.cbl`\\n\"},{\"path\":\"project-administration/new-code-period\",\"content\":\"---\\ntitle: Setting Your New Code Period\\nurl: /project-administration/new-code-period/\\n---\\nBy focusing on code that's been added or changed in your New Code Period, you can set consistent quality requirements and expectations on all new code. With this focus, your new code will be issue-free and you'll clean up the code you encounter along the way. For more information on the New Code Period and Cleaning as You Code, check out [Fixing the Water Leak](/user-guide/fixing-the-water-leak/).\\n\\nYou can set a New Code Period at the global, project, or branch level.\\n\\n## Setting a global New Code Period\\nYour global New Code Period will be the default for your projects. You can set the global New Code Period at [**Administration > Configuration > General Settings > New Code Period**](/#sonarqube-admin#/admin/settings?category=new_code_period/).  \\n\\nYou can set the global New Code Period to the following:\\n\\n* **Previous Version** – The New Code Period defaults to **Previous version** which shows any changes made in your project's current version. This works well for projects with regular versions or releases.\\n* **Number of days** – You can specify a number of days for a floating New Code Period. For example, setting **Number of Days** to 30 creates a floating New Code Period beginning 30 days from the current date.\\n\\n## Setting a project-level New Code Period\\nYou can override the global New Code Period by setting a project-level New Code Period from the project page at **Administration > New Code Period**. For [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/), this will be the default New Code Period for all of the project's branches.\\n\\nYou can set a project's New Code Period to the following:\\n\\n* **Previous Version** – Set the New Code Period to show any changes made in your project's current version. This works well for projects with regular versions or releases.\\n* **Number of days** – Specify a number of days for a floating New Code Period. For example, setting **Number of Days** to 30 creates a floating New Code Period beginning 30 days from the current date.\\n* **Specific analysis** – Choose a previous analysis as your New Code Period. The New Code Period will show any changes made since that analysis. \\n\\n   **Note:** For Community Edition, you can set the New Code Period to a specific past analysis at the project-level because Community Edition doesn't support multiple branches. [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/) let you set the New Code Period to a specific analysis at the branch level. Each long-lived branch can be set to one of the branch's specific past analyses. See the following section for information on setting a branch-level New Code Period. \\n\\n### Setting a branch-level New Code Period\\n_Branch analysis is available as part of [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._  \\nFor projects with multiple long-lived branches, you can set a New Code Period for each branch from the **Actions** column of the branches table on the project's **New Code Period** settings page.\\n\\nYou can set a branch's New Code Period to the following:\\n\\n* **Previous Version** – Set the New Code Period to show any changes made in your branch's current version. This works well for branches with regular versions.\\n* **Number of days** – Specify a number of days for a floating New Code Period. For example, setting **Number of Days** to 30 creates a floating New Code Period beginning 30 days from the current date.\\n* **Specific analysis** – Choose a specific past analysis of the branch as the New Code Period. The New Code Period will show any changes made since that analysis.\\n\"},{\"path\":\"project-administration/portfolio-pdf-configuration\",\"content\":\"---\\ntitle: Portfolio PDF Configuration\\nurl: /project-administration/portfolio-pdf-configuration/\\n---\\n\\n*Portfolio PDFs are available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/).*\\n\\nA user with administrative rights on a portfolio can configure email distribution of the PDF. From a Portfolio Home Page go to **Administration > Executive Report**.\\n\\n### Frequency\\nYou can tune the email frequency of the PDF Report. The possible values are:\\n\\n* Daily: report is sent during the first portfolio calculation of the day (if any)\\n* Weekly: report is sent during the first portfolio calculation of the week (if any) from Monday\\n* Monthly (default): report is sent during the first portfolio calculation of the month (if any), starting from the first day of the current month\\n\\n### Other Recipients\\nIf people without SonarQube accounts want to receive the PDF, you can feed the administrative \\\"Other Recipients\\\" field with their email addresses.\\n\"},{\"path\":\"project-administration/project-existence\",\"content\":\"---\\ntitle: Project Existence\\nurl: /project-administration/project-existence/\\n---\\n\\nTypically, projects are created during their first analysis and never deleted (because old software never dies). For atypical situations, there is the page at **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management/)**, which allows you to manage project existence.\\n\\n## How do I provision a project before its first analysis?\\nProvisioning a project allows you to declare and configure it (define permissions, set quality profiles, etc.) before running the first analysis. To be able to provision projects, you have to be logged in and be granted the Provision Projects permission.\\n\\nTo provision a new project either use the '+' menu in the top menu or if you have global administration privileges, go to **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management/)** and click on **Create Project**. The only required information is the key and the name of your project.\\n\\nOnce the project is provisioned, you can configure it (define permissions, set quality profiles, etc.), and when you're finished with the configuration, you can simply run the project's first analysis.\\n\\nYou can also provision and configure projects using the Web API.\\n\\n## How do I find provisioned projects (that haven't been analyzed yet)?\\nThe **[Projects Management](/#sonarqube-admin#/admin/projects_management/)** search interface includes a toggle to allow you to narrow your results on this page to only projects that have never been analyzed. From there you can deal with them on this page as a set, or click through to the individual project homepages for individual attention and administration.\\n\\n## How do I lock down permissions on a project? (Private vs Public)\\nBy default, any newly created project will be considered \\\"Public\\\". It means every SonarQube user, authenticated or not, will be able to:\\n\\n* **Browse**: Access a project, browse its measures, issues and perform some issue edits (confirm/resolve/reopen, assignment, comment).\\n* **See Source Code**: View the project's source code.\\n\\nIf you want to be sure only a limited list of Groups and Users can see the project, you need to mark it Private. Once a project is private you will be able to define which Groups and Users can **Browse** the project or **See Source Code**.\\n\\nIf you want all newly created projects to be considered \\\"Private\\\", you can change the default visibility in **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management/)**.\\n\\n## How do I delete projects?\\nA project may be deleted individually from the Administration page of the project. See Project Settings for more details. To delete projects in bulk, use **[Administration > Projects > Management](/#sonarqube-admin#/admin/projects_management/)**. Here you can select the projects to delete. A deleted project is gone for good, there is no way to undo this action.\\n\\n## How do I find projects that are no longer analyzed?\\nThe **[Projects Management](/#sonarqube-admin#/admin/projects_management/)** search interface includes a date picker to help you find all projects last analyzed before your specified date. From there you can deal with them on this page as a set, or click through to the individual project homepages for individual attention and administration.\\n\"},{\"path\":\"project-administration/project-settings\",\"content\":\"---\\ntitle: Project Settings\\nurl: /project-administration/project-settings/\\n---\\n\\n## Tags\\n\\nProject tags allow you to categorize and group projects for easier selection on the **Projects** page. Project tags can be administered from the project home page. Administrators will see a dropdown menu indicator next to the project's list of current tags (or next to the \\\"No tags\\\" indicator). If the tag you want isn't visible in the dropdown, use the built in \\\"search\\\" input to find what you're looking for or create it on the fly.\\n\\n## Administration Items\\n\\nProject administration is accessible through the **Administration** menu of each project.  \\n\\nOnly project administrators can access project's settings (see [Authorization](/instance-administration/security/)).\\n\\n### Adding a Project\\n\\nA project is automatically added at its first analysis. Note that you can also [provision projects](/project-administration/project-existence/).\\n\\n### Analysis Report Processing\\n\\nA project-level Background Tasks page is available at **Administration > Background Tasks** to allow project administrators to check their projects' processing. It offers analysis report details and logs.\\n\\n### Deleting a Project\\n\\n#### Deleting a Single Project\\n\\nYou can delete a project through **Administration > Deletion**.\\n\\n#### Deleting Multiple Projects\\nYou can also delete multiple projects simultaneously from the global **Administration > Projects > Management**.\\n\\n### Updating the Project Key  \\n\\nThe project key can be updated (without losing the history on the project) at **Administration > Update Key**.\\n\\nThe new key must contain at least one non-digit character. Allowed characters are: 'a' through 'z', 'A' through 'Z', '-' (dash), '\\\\_' (underscore), '.' (dot), ':' (colon) and digits '0' to '9'.\\n\\n### Default Issue Assignee\\n\\nWhen new issues are created during an analysis, they are assigned to the last committer where the issue was raised. When it is not possible to identify the last committer, issues can be assigned to a default assignee, at **Administration > General Settings > Issues**.\\n\\n### Setting Quality Gate and Quality Profiles  \\n\\nProject administrators can select which ...\\n\\n* Quality profiles (go to **Administration > Quality Profiles**)\\n* Quality gate (go to **Administration > Quality Gate**)\\n\\n... to use on their project.\\n\\n### Setting Exclusions  \\n\\nSee [Narrowing the Focus](/project-administration/narrowing-the-focus/).\\n\\n### Customizing Links\\n\\nOn top of standard links which may only be set as [Analysis Parameters](/analysis/analysis-parameters/), additional custom links can be added through the web interface (under **Administration > Links**). Those links will then be displayed in the [Project Page](/user-guide/project-page/).\\n\"},{\"path\":\"project-administration/webhooks\",\"content\":\"---\\ntitle: Webhooks\\nurl: /project-administration/webhooks/\\n---\\n\\nWebhooks notify external services when a project analysis is complete. An HTTP POST request including a JSON payload is sent to each URL. URLs may be specified at both the project and global levels. Project-level specification does not replace global-level webhooks. All hooks at both levels are called.\\n\\nThe HTTP(S) call:\\n\\n* is made regardless of the status of the Background Task\\n* includes a JSON document as payload, using the POST method\\n* has a content type of \\\"application/json\\\", with UTF-8 encoding\\n\\n## Configuration\\n\\nYou can configure up to 10 webhooks in in **Administration > Webhooks**.\\n\\nAn additional set of 10 webhooks can be configured at the global level in **Administration > Configuration > Webhooks**.\\n\\nIf configured, all 20 will be executed.\\n\\n## Delivery and Payload\\n\\n### Delivery\\n\\nThe Webhook administration console shows the result and timestamp of the most recent delivery of each webhook with the payload available via the list icon. Results and payloads of earlier deliveries are available from the tools menu to the right of each webhook.\\n\\nResponse records are purged after 30 days.\\n\\nThe URL must respond within 10 seconds or the delivery is marked as failed.\\n\\n### Payload\\n\\nAn HTTP header \\\"X-SonarQube-Project\\\" with the project key is sent to allow quick identification of the project involved.\\n\\nThe Payload is a JSON document which includes:\\n\\n* when the analysis was performed: see \\\"analysedAt\\\"\\n* the identification of the project analyzed: see \\\"project\\\"\\n* each Quality Gate criterion checked and its status: see \\\"qualityGate\\\"\\n* the Quality Gate status of the project: see \\\"qualityGate.status\\\"\\n* the status and the identifier of the Background Task : see \\\"status\\\" and \\\"taskId\\\"\\n* user-specified properties: see \\\"properties\\\"\\n\\n#### Example\\n\\n```\\n{\\n    \\\"serverUrl\\\": \\\"http://localhost:9000\\\",\\n    \\\"taskId\\\": \\\"AVh21JS2JepAEhwQ-b3u\\\",\\n    \\\"status\\\": \\\"SUCCESS\\\",\\n    \\\"analysedAt\\\": \\\"2016-11-18T10:46:28+0100\\\",\\n    \\\"revision\\\": \\\"c739069ec7105e01303e8b3065a81141aad9f129\\\",\\n    \\\"project\\\": {\\n        \\\"key\\\": \\\"myproject\\\",\\n        \\\"name\\\": \\\"My Project\\\",\\n        \\\"url\\\": \\\"https://mycompany.com/sonarqube/dashboard?id=myproject\\\"\\n    },\\n    \\\"properties\\\": {\\n    },\\n    \\\"qualityGate\\\": {\\n        \\\"conditions\\\": [\\n            {\\n                \\\"errorThreshold\\\": \\\"1\\\",\\n                \\\"metric\\\": \\\"new_security_rating\\\",\\n                \\\"onLeakPeriod\\\": true,\\n                \\\"operator\\\": \\\"GREATER_THAN\\\",\\n                \\\"status\\\": \\\"OK\\\",\\n                \\\"value\\\": \\\"1\\\"\\n            },\\n            {\\n                \\\"errorThreshold\\\": \\\"1\\\",\\n                \\\"metric\\\": \\\"new_reliability_rating\\\",\\n                \\\"onLeakPeriod\\\": true,\\n                \\\"operator\\\": \\\"GREATER_THAN\\\",\\n                \\\"status\\\": \\\"OK\\\",\\n                \\\"value\\\": \\\"1\\\"\\n            },\\n            {\\n                \\\"errorThreshold\\\": \\\"1\\\",\\n                \\\"metric\\\": \\\"new_maintainability_rating\\\",\\n                \\\"onLeakPeriod\\\": true,\\n                \\\"operator\\\": \\\"GREATER_THAN\\\",\\n                \\\"status\\\": \\\"OK\\\",\\n                \\\"value\\\": \\\"1\\\"\\n            },\\n            {\\n                \\\"errorThreshold\\\": \\\"80\\\",\\n                \\\"metric\\\": \\\"new_coverage\\\",\\n                \\\"onLeakPeriod\\\": true,\\n                \\\"operator\\\": \\\"LESS_THAN\\\",\\n                \\\"status\\\": \\\"NO_VALUE\\\"\\n            }\\n        ],\\n        \\\"name\\\": \\\"SonarQube way\\\",\\n        \\\"status\\\": \\\"OK\\\"\\n    }\\n}\\n```\\n\\n## Securing your webhooks\\n\\nAfter you've configured your server to receive payloads, you want to be sure that the payloads you receive are initiated by {instance} and not by hackers. You can do this by validating a hash signature that ensures that requests originate from {instance}. \\n\\n### Setting your secret\\n\\nTo set your secret in {instance}:\\n\\n1. From the project or organization where you're securing your webhooks, navigate to the webhooks settings at **Administration > webhooks**\\n1. You can either click **Create** to create a new webhook or click an existing webhook's settings drop-down and click **Update**.\\n1. Enter a random string in the **Secret** text box. This is used as the key to generate the HMAC hex digest value in the `X-Sonar-Webhook-HMAC-SHA256` header.\\n1. Click **Update**. \\n\\n### Validating {instance} Payloads\\n\\nAfter setting your secret, it's used by {instance} to create a hash signature with each payload that's passed using the `X-Sonar-Webhook-HMAC-SHA256` HTTP header. The header value needs to match the signature you are expecting to receive. {instance} uses a HMAC lower-case SHA256 digest to compute the signature of the request body. Here's some sample Java code for your server:\\n\\n```\\nprivate static boolean isValidSignature(YourHttpRequest request) {\\n  String receivedSignature = request.getHeader(\\\"X-Sonar-Webhook-HMAC-SHA256\\\");\\n  // See Apache commons-codec\\n  String expectedSignature = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, \\\"your_secret\\\").hmacHex(request.getBody())\\n  return Objects.equals(expectedSignature, receivedSignature);  \\n}\\n```\\n\\nIf the signatures don't match, then the payload should be ignored.\\n\\n## Additional parameters\\n\\nA basic authentication mechanism is supported by providing user/password in the URL of the Webhook such as `https://myLogin:myPassword@my_server/foo`.\\n\\nIf you provide additional properties to your SonarScanner using the pattern `sonar.analysis.*`, these properties will be automatically added to the section \\\"properties\\\" of the payload.\\n\\nFor example these additional parameters:\\n\\n```\\nsonar-scanner -Dsonar.analysis.buildNumber=12345\\n```\\n\\nWould add this to the payload:\\n\\n```\\n\\\"properties\\\": {\\n  \\\"sonar.analysis.buildNumber\\\": \\\"12345\\\"\\n}\\n```\\n\"},{\"path\":\"requirements/hardware-recommendations\",\"content\":\"---\\ntitle: Hardware Recommendations\\nurl: /requirements/hardware-recommendations/\\n---\\n## Database\\nWe recommend that for large instances, the database used by SonarQube is hosted on a machine which is physically separate from SonarQube Server but close to it on the network.\\n\\n### Oracle\\nIn case your SonarQube Server is running on Linux and you are using Oracle, the Oracle JDBC Driver may be blocked due to /dev/random. See [this Oracle article](http://www.usn-it.de/index.php/2009/02/20/oracle-11g-jdbc-driver-hangs-blocked-by-devrandom-entropy-pool-empty/) for more details about this problem.\\n\\n To avoid it, you may want to add this JVM parameter to your SonarQube Web Server (`sonar.web.javaOpts`) configuration :\\n ```\\n -Djava.security.egd=file:///dev/urandom\\n ```\\n\\n ## Elasticsearch (ES)\\n* [Elasticsearch](https://www.elastic.co/) is used by SonarQube in the background in the SearchServer process. To ensure good performance of your SonarQube, you need to follow these recommendations that are linked to ES usage.\\n\\n### JVM\\n* It is recommended to set the min and max memory to the same value to prevent the heap from resizing at runtime, a very costly process. See -Xms and  -Xmx of property `sonar.search.javaOpts`.\\n\\n### Disk\\n* Free disk space is an absolute requirement. ES implements a safety mechanism to prevent the disk from being flooded with index data that locks all indices in read-only mode when a 95% disk usage watermark is reached. For information on recovering from ES read-only indices, see the [Troubleshooting](/setup/troubleshooting/) page.\\n* Disk can easily  become the bottleneck of ES. If you can afford SSDs, they are by far superior to any spinning media. SSD-backed nodes see boosts in both query and indexing performance. If you use spinning media, try to obtain the fastest disks possible (high performance server disks 15k RPM drives).\\n* Make sure to increase the number of open files descriptors on the machine (or for the user running SonarQube server). Setting it to 32k or even 64k is recommended. See [this ElasticSearch article](https://www.elastic.co/guide/en/elasticsearch/reference/current/file-descriptors.html).\\n* Using RAID 0 is an effective way to increase disk speed, for both spinning disks and SSD. There is no need to use mirroring or parity variants of RAID because of Elasticsearch replicas and database primary storage.\\n8 Do not use remote-mounted storage, such as NFS, SMB/CIFS or network-attached storages (NAS). They are often slower, display larger latencies with a wider deviation in average latency, and are a single point of failure.\\n\\n**Advanced**\\n* If you are using SSD, make sure your OS I/O Scheduler is configured correctly. When you write data to disk, the I/O Scheduler decides when that data is actually sent to the disk. The default under most *nix distributions is a scheduler called cfq (Completely Fair Queuing). This scheduler allocates \\\"time slices\\\" to each process, and then optimizes the delivery of these various queues to the disk. It is optimized for spinning media: the nature of rotating platters means it is more efficient to write data to disk based on physical layout. This is very inefficient for SSD, however, since there are no spinning platters involved. Instead, deadline or noop should be used instead. The deadline scheduler optimizes based on how long writes have been pending, while noop is just a simple FIFO queue. This simple change can have dramatic impacts.\\n* If SQ home directory is located on a slow disk, then the property `sonar.path.data` can be used to move data to a faster disk (RAID 0 local SSD for instance).\\n\\n### Memory\\n* Machine available memory for OS must be at least the Elasticsearch heap size. The reason is that Lucene (used by ES) is designed to leverage the underlying OS for caching in-memory data structures. That means that by default OS must have at least 1Gb of available memory.\\n* Don't allocate more than 32Gb. See [this ElasticSearch article](http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/heap-sizing.html) for more details.\\n\\n**Advanced**\\n* Elasticsearch uses a hybrid mmapfs / niofs directory by default to store its indices. The default operating system limits on mmap counts is likely to be too low, which may result in out of memory exceptions. On Linux, you can increase the limits by running the following command as root :\\n```\\nsysctl -w vm.max_map_count=262144\\n```\\nTo set this value permanently, update the `vm.max_map_count` setting in `/etc/sysctl.conf`.\\n\\n### CPU\\n* If you need to choose between faster CPUs or more cores, then choose more cores. The extra concurrency that multiple cores offers will far outweigh a slightly faster clock-speed.\\n* By nature data are distributed on multiples nodes, so execution time depends on the slowest node. It's better to have multiple medium boxes than one fast + one slow.\\n\"},{\"path\":\"requirements/requirements\",\"content\":\"---\\ntitle: Prerequisites and Overview\\nurl: /requirements/requirements/\\n---\\n## Prerequisite\\nThe only prerequisite for running SonarQube is to have Java (Oracle JRE 11 or OpenJDK 11) installed on your machine.\\n\\n![](/images/exclamation.svg) **Note:** _On Mac OS X it is highly recommended to install Oracle JDK 11 instead of the corresponding Oracle JRE since the JRE installation does not fully set up your Java environment properly. See [this post](http://stackoverflow.com/questions/15624667/mac-osx-java-terminal-version-incorrect) for more information._\\n\\n## Hardware Requirements\\n1. A small-scale (individual or small team) instance of the SonarQube server requires at least 2GB of RAM to run efficiently and 1GB of free RAM for the OS. If you are installing an instance for a large teams or Enterprise, please consider the additional recommendations below.\\n2. The amount of disk space you need will depend on how much code you analyze with SonarQube. As an example, [SonarCloud](https://sonarcloud.io) the public instance of SonarQube, has more than 350 million lines of code under analysis with 5 years of history. SonarCloud is currently running on clustered [Amazon EC2 m5.large](http://aws.amazon.com/ec2/instance-types/) instances with allocations of 50 Gb of drive space per node. It handles 19,000+ projects with roughly 14M open issues. SonarCloud runs on PostgreSQL 9.5 and it is using about 250Gb of disk space for the database.\\n3. SonarQube must be installed on hard drives that have excellent read & write performance. Most importantly, the \\\"data\\\" folder houses the Elasticsearch indices on which a huge amount of I/O will be done when the server is up and running. Great read & write hard drive performance will therefore have a great impact on the overall SonarQube server performance.\\n4. SonarQube does not support 32-bit systems on the server side. SonarQube does, however, support 32-bit systems on the scanner side.\\n\\n### Enterprise Hardware Recommendations\\nFor large teams or Enterprise-scale installations of SonarQube, additional hardware is required. At the Enterprise level, [monitoring your SonarQube instance](/instance-administration/monitoring/) is essential and should guide further hardware upgrades as your instance grows. A starting configuration should include at least:\\n\\n* 8 cores, to allow the main SonarQube platform to run with multiple Compute Engine workers\\n* 16GB of RAM\\nFor additional requirements and recommendations relating to database and ElasticSearch, see [Hardware Recommendations](/requirements/hardware-recommendations/).\\n\\n## Supported Platforms\\n### Java\\nThe SonarQube Java analyzer is able to analyze any kind of Java source files regardless of the version of Java they comply to. However, SonarQube analysis requires version 8+ of the JVM and the SonarQube Server requires version 11+.\\n\\nWe recommend using the Critical Patch Update (CPU) releases.\\n\\n| Java           | Server                    | Analysis                  |\\n| -------------- | ------------------------- | ------------------------- |\\n| Oracle JRE     | ![](/images/check.svg) 11 | ![](/images/check.svg) 11 |\\n|                | ![](/images/cross.svg) 8  | ![](/images/check.svg) 8  |\\n| OpenJDK        | ![](/images/check.svg) 11 | ![](/images/check.svg) 11 |\\n|                | ![](/images/cross.svg) 8  | ![](/images/check.svg) 8  |\\n\\n| Database                                                    |                                                                                                                                                                                                                                                                   |\\n| ----------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| [PostgreSQL](http://www.postgresql.org/)                    | ![](/images/check.svg) 10                                                                                                                                                                                                                                  |\\n|                                                             | ![](/images/check.svg) 9.3–9.6                                                                                                                                                                                                                                         |\\n|                                                             | ![](/images/exclamation.svg) Must be configured to use UTF-8 charset                                                                                                                                                                                              |\\n| [Microsoft SQL Server](http://www.microsoft.com/sqlserver/) | ![](/images/check.svg) 2017 (MSSQL Server 14.0) with bundled Microsoft JDBC driver. Express Edition is supported.                                                                                                                                                 |\\n|                                                             | ![](/images/check.svg) 2016 (MSSQL Server 13.0) with bundled Microsoft JDBC driver. Express Edition is supported.                                                                                                                                                 |\\n|                                                             | ![](/images/check.svg) 2014 (MSSQL Server 12.0) with bundled Microsoft JDBC driver. Express Edition is supported.                                                                                                                                                 |\\n|                                                             | ![](/images/exclamation.svg) Collation must be case-sensitive (CS) and accent-sensitive (AS) (example: Latin1_General_CS_AS)                                                                                                                                      |\\n|                                                             | ![](/images/exclamation.svg) READ_COMMITTED_SNAPSHOT must be set on the SonarQube database to avoid potential deadlocks under heavy load                                                                                                                          |\\n|                                                             | ![](/images/info.svg) Both Windows authentication (“Integrated Security”) and SQL Server authentication are supported. See the Microsoft SQL Server section in Installing/installation/installing-the-server page for instructions on configuring authentication. |\\n| [Oracle](http://www.oracle.com/database/)                   | ![](/images/check.svg) 19C                                                                                                                                                                                                                                        |\\n|                                                             | ![](/images/check.svg) 18C                                                                                                                                                                                                                                        |\\n|                                                             | ![](/images/check.svg) 12C                                                                                                    |\\n|                                                             | ![](/images/check.svg) 11G                                                                                                    |\\n|                                                             | ![](/images/check.svg) XE Editions                                                                                                                           \\n|                                                             | ![](/images/exclamation.svg) Must be configured to use a UTF8-family charset (see NLS_CHARACTERSET)                                                                                                                                                               |\\n|                                                             | ![](/images/exclamation.svg) The driver ojdbc14.jar is not supported    \\n|                                                             | ![](/images/info.svg) We recommend using the latest Oracle JDBC driver                                                                                                                                |\\n|                                                             | ![](/images/exclamation.svg) Only the thin mode is supported, not OCI                                                                                                                                                                                             |\\n\\n### Web Browser\\nTo get the full experience SonarQube has to offer, you must enable JavaScript in your browser.\\n\\n| Browser                     |                                         |\\n| --------------------------- | --------------------------------------- |\\n| Microsoft Internet Explorer | ![](/images/check.svg) IE 11            |\\n| Microsoft Edge              | ![](/images/check.svg) Latest           |\\n| Mozilla Firefox             | ![](/images/check.svg) Latest           |\\n| Google Chrome               | ![](/images/check.svg) Latest           |\\n| Opera                       | ![](/images/exclamation.svg) Not tested |\\n| Safari                      | ![](/images/check.svg) Latest           |\\n\\n<!-- sonarqube -->\\n## GitHub Enterprise Integration\\nTo add Pull Request analysis to Checks in GitHub Enterprise, you must be running GitHub Enterprise version 2.14+.\\n\\n## Bitbucket Server Integration\\nTo add Pull Request analysis to Code Insights in Bitbucket Server, you must be running Bitbucket Server version 5.15+.\\n<!-- /sonarqube -->\\n\\n## Platform notes\\n### Linux\\nIf you're running on Linux, you must ensure that:\\n\\n* `vm.max_map_count` is greater or equals to 262144\\n* `fs.file-max` is greater or equals to 65536\\n* the user running SonarQube can open at least 65536 file descriptors\\n* the user running SonarQube can open at least 4096 threads\\n\\nYou can see the values with the following commands:\\n```\\nsysctl vm.max_map_count\\nsysctl fs.file-max\\nulimit -n\\nulimit -u\\n```\\n\\nYou can set them dynamically for the current session by running  the following commands as `root`:\\n```\\nsysctl -w vm.max_map_count=262144\\nsysctl -w fs.file-max=65536\\nulimit -n 65536\\nulimit -u 4096\\n```\\n\\nTo set these values more permanently, you must update either _/etc/sysctl.d/99-sonarqube.conf_ (or _/etc/sysctl.conf_ as you wish) to reflect these values.\\n\\nIf the user running SonarQube (`sonarqube` in this example) does not have the permission to have at least 65536 open descriptors, you must insert this line in _/etc/security/limits.d/99-sonarqube.conf_ (or _/etc/security/limits.conf_ as you wish):\\n```\\nsonarqube   -   nofile   65536\\nsonarqube   -   nproc    4096\\n```\\n\\nYou can get more detail in the [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/system-config.html).\\n\\nIf you are using `systemd` to start SonarQube, you must specify those limits inside your unit file in the section \\\\[service\\\\] :\\n```\\n[Service]\\n...\\nLimitNOFILE=65536\\nLimitNPROC=4096\\n...\\n```\\n\\n### seccomp filter\\nBy default, Elasticsearch uses [seccomp filter](https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt). On most distribution this feature is activated in the kernel, however on distributions like Red Hat Linux 6 this feature is deactivated. If you are using a distribution without this feature and you cannot upgrade to a newer version with seccomp activated, you have to explicitly deactivate this security layer by updating `sonar.search.javaAdditionalOpts` in _$SONARQUBE_HOME/conf/sonar.properties_:\\n```\\nsonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=false\\n```\\n\\nYou can check if seccomp is available on your kernel with:\\n```\\n$ grep SECCOMP /boot/config-$(uname -r)\\n```\\n\\nIf your kernel has seccomp, you will see:\\n```\\nCONFIG_HAVE_ARCH_SECCOMP_FILTER=y\\nCONFIG_SECCOMP_FILTER=y\\nCONFIG_SECCOMP=y\\n```\\nFor more detail, see the [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/breaking-changes-5.6.html).\\n\"},{\"path\":\"setup/get-started-2-minutes\",\"content\":\"---\\ntitle: Get Started in Two Minutes Guide\\nurl: /setup/get-started-2-minutes/\\n---\\n\\n[[info]]\\n| This guides shows you how to install a demo instance. When you are ready to move to production, take some time to read the [Install the Server](/setup/install-server/) documentation.\\n\\n## Installing from a zip file\\n\\n1. [Download](https://www.sonarqube.org/downloads/) the SonarQube Community Edition.\\n\\n2. Unzip it, let's say in _C:\\\\sonarqube_ or _/opt/sonarqube_.\\n\\n3. Start the SonarQube Server:\\n\\n   ```\\n   # On Windows, execute:\\n   C:\\\\sonarqube\\\\bin\\\\windows-x86-xx\\\\StartSonar.bat\\n\\n   # On other operating systems, as a non-root user execute:\\n   /opt/sonarqube/bin/[OS]/sonar.sh console\\n   ```\\n\\n   ![](/images/info.svg) If your instance fails to start, check your [logs](/setup/troubleshooting/) to find the cause.\\n\\n4. Log in to [http://localhost:9000](http://localhost:9000) with System Administrator credentials (login=admin, password=admin).\\n\\n5. Click the **Create new project** button to analyze your first project.\\n\\n## Using Docker\\n\\nA Docker image of the Community Edition is available on [Docker Hub](https://hub.docker.com/_/sonarqube/). You can find usage and configuration examples there.\"},{\"path\":\"setup/install-cluster\",\"content\":\"---\\ntitle: Install the Server as a Cluster\\nurl: /setup/install-cluster/\\n---\\n\\n<!-- sonarqube -->\\n\\n_Running SonarQube as a Cluster is only possible with a [Data Center Edition](https://www.sonarsource.com/plans-and-pricing/data-center/)_.\\n\\nThe Data Center Edition allows SonarQube to run in a clustered configuration to make it resilient to failures.\\n\\n## Overview\\n\\nThe default configuration for the Data Center Edition comprises five servers, a load balancer, and a database server:\\n\\n- Two application nodes responsible for handling web requests from users (WebServer process) and handling analysis reports (ComputeEngine process). You can add application nodes to increase computing capabilities.\\n- Three search nodes that host the Elasticsearch process that will store data indices. SSDs perform significantly better than HDDs for these nodes.\\n- A reverse proxy / load balancer to load balance traffic between the two application nodes. The installing organization must supply this hardware or software component.\\n- PostgreSQL, Oracle, or Microsoft SQL Server database server. This software must be supplied by the installing organization.\\n\\n\\nWith this configuration, one application node and one search node can be lost without impacting users.  Here is a diagram of the default topology:\\n\\n![DCE Cluster Machines Topology.](/images/cluster-dce.png)\\n\\n## Requirements\\n\\n### Network\\n\\nAll servers, including the database server, must be co-located (geographical redundancy is not supported) and have static IP addresses (reference via hostname is not supported).  Network traffic should not be restricted between application and search nodes.\\n\\n### Servers\\n\\nYou need a minimum of five servers (two application nodes and three search nodes) to form a SonarQube application cluster. You can add application nodes to increase computing capabilities. Servers can be virtual machines; it is not necessary to use physical machines.\\n\\nThe operating system requirements for servers are available on the [Requirements](/requirements/requirements/) page.  All application nodes should be identical in terms of hardware and software. Similarly, all search nodes should be identical to each other. Application and search nodes, however, can differ from one another. Generally, search nodes are configured with more CPU and RAM than application nodes.\\n\\nHere are the machines we used to perform our validation with a 200M issues database. You can use this as a minimum recommendation to build your cluster.\\n\\n- App Node made of [Amazon EC2 m4.xlarge](https://aws.amazon.com/ec2/instance-types/): 4 vCPUs, 16GB RAM\\n- Search Node made of [Amazon EC2 m4.2xlarge](https://aws.amazon.com/ec2/instance-types/): 8 vCPUs, 32GB RAM - 16GB allocated to Elasticsearch. SSDs perform significantly better than HDDs for these nodes.\\n\\n### Database Server\\n\\nSupported database systems are available on the [Requirements](/requirements/requirements/) page.\\n\\n### Load Balancer\\n\\nSonarSource does not provide specific recommendations for reverse proxy / load balancer or solution-specific configuration.  The general requirements to use with SonarQube Data Center Edition are:\\n\\n- Ability to balance HTTP requests (load) between the application nodes configured in the SonarQube cluster.\\n- If terminating HTTPS, meets the requirements set out in [Securing SonarQube Behind a Proxy](/setup/operate-server/).\\n- No requirement to preserve or sticky sessions; this is handled by the built-in JWT mechanism.\\n\\n### License\\n\\nYou need a dedicated license to activate the Data Center Edition. If you don't have one yet, please contact the SonarSource Sales Team.\\n\\n### Support\\n\\nDon't start this journey alone!  As a Data Center Edition subscriber, SonarSource will assist with the setup and configuration of your cluster. Get in touch with [SonarSource Support](https://support.sonarsource.com) for help.\\n\\n## Configuration\\n\\nAdditional parameters are required to activate clustering capabilities and specialize each node. These parameters are in addition to standard configuration properties used in a single-node configuration.\\n\\nThe **sonar.properties** file on each node will be edited to configure the node's specialization. A list of all cluster-specific configuration parameters is available in the [Operate the Cluster](/setup/operate-cluster/) documentation.\\n\\nPrior to configuration, you will need to generate a value for the `sonar.auth.jwtBase64Hs256Secret` property for the application nodes.  The value is a HS256 key encoded with base64 and will be the same for both nodes.  The following is an example on how to generate this value on a Unix system:\\n\\n```\\necho -n \\\"your_secret\\\" | openssl dgst -sha256 -hmac \\\"your_key\\\" -binary | base64\\n```\\n\\n### Sample Configuration\\n\\nThe following example represents the minimal parameters required to configure a SonarQube cluster.  The example assumes:\\n\\n- The VMs having IP addresses ip1 and ip2 (server1, server2) are application nodes\\n- The VMs having IP addresses ip3, ip4, and ip5 (server3, server4 and server5) are search nodes\\n\\nThe configuration to be added to sonar.properties for each node is the following:\\n\\n#### Application Nodes\\n\\n**server1**\\n```\\n...\\nsonar.cluster.enabled=true\\nsonar.cluster.hosts=ip1,ip2\\nsonar.cluster.search.hosts=ip3,ip4,ip5\\nsonar.cluster.node.type=application\\nsonar.auth.jwtBase64Hs256Secret=YOURGENERATEDSECRET\\n...\\n```\\n\\n**server2**\\n```\\n...\\nsonar.cluster.enabled=true\\nsonar.cluster.hosts=ip1,ip2\\nsonar.cluster.search.hosts=ip3,ip4,ip5\\nsonar.cluster.node.type=application\\nsonar.auth.jwtBase64Hs256Secret=YOURGENERATEDSECRET\\n...\\n```\\n\\n#### Search Nodes\\n\\n**server3**\\n```\\n...\\nsonar.cluster.enabled=true\\nsonar.cluster.search.hosts=ip3,ip4,ip5\\nsonar.cluster.node.type=search\\nsonar.search.host=ip3\\n...\\n```\\n\\n**server4**\\n```\\n...\\nsonar.cluster.enabled=true\\nsonar.cluster.search.hosts=ip3,ip4,ip5\\nsonar.cluster.node.type=search\\nsonar.search.host=ip4\\n...\\n```\\n\\n**server5**\\n```\\n...\\nsonar.cluster.enabled=true\\nsonar.cluster.search.hosts=ip3,ip4,ip5\\nsonar.cluster.node.type=search\\nsonar.search.host=ip5\\n...\\n```\\n\\n## Sample Installation Process\\n\\nThe following is an example of the default SonarQube cluster installation process. You need to tailor your installation to the specifics of the target installation environment and the operational requirements of the hosting organization.\\n\\n**Prepare the cluster environment:**\\n\\n1. Prepare the cluster environment by setting up the network and provisioning the nodes and load balancer. \\n2. Follow the [Installing the Server](/setup/install-server/) documentation to configure the database server.\\n\\n**Prepare a personalized SonarQube package:**\\n\\n1. On a single application node of the cluster, download and install SonarQube Data Center Edition, following the usual [Installing the Server](/setup/install-server/) documentation.\\n2. Add cluster-related parameters to `$SONARQUBE_HOME/conf/sonar.properties`.\\n3. As the Marketplace is not available in SonarQube Data Center Edition, this is a good opportunity to install additional plugins. Download and place a copy of each plugin JAR in `$SONARQUBE_HOME/extensions/plugins`.  Be sure to check compatibility with your SonarQube version using the [Plugin Version Matrix](https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix).\\n4. Zip the directory `$SONARQUBE_HOME`. This archive is a customized SonarQube Data Center Edition package that can be copied to other nodes.\\n\\n**Test configuration on a single node:**\\n\\n1. On the application node where you created your Zip package, comment out all cluster-related parameters in `$SONARQUBE_HOME/conf/sonar.properties`.\\n2. Configure the load balancer to proxy with single application node.\\n3. Start server and test access through load balancer.\\n4. Request license from SonarSource Sales Team.\\n5. After applying license, you will have a full-featured SonarQube system operating on a single node.\\n\\n**Deploy SonarQube package on other nodes:**\\n\\n1. Unzip SonarQube package on the other four nodes.\\n2. Configure node-specific parameters on all five nodes in `$SONARQUBE_HOME/conf/sonar.properties` and ensure application node-specific and search node-specific parameters are properly set.\\n3. Start all search nodes.\\n4. After all search nodes are running, start all application nodes.\\n5. Configure the load balancer to proxy with both application nodes.\\n\\nCongratulations, you have a fully-functional SonarQube cluster.  Once these steps are complete, take a break and a coffee, then you can [Operate your Cluster](/setup/operate-cluster/).\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"setup/install-plugin\",\"content\":\"---\\ntitle: Install a Plugin\\nurl: /setup/install-plugin/\\n---\\n\\n<!-- sonarqube -->\\nThere are two options to install a plugin into SonarQube:\\n\\n- Marketplace - Installs plugins automatically, from the SonarQube UI. \\n- Manual Installation - You'll use this method if your SonarQube instance doesn't have access to the Internet.\\n\\n## Marketplace\\n\\nIf you have access to the Internet and you are connected with a SonarQube user having the Global Permission \\\"Administer System\\\", you can go to Administration > Marketplace.\\n\\n- Find the plugin you want to install\\n- Click on Install and wait for the download to be processed\\n\\nOnce download is complete, a \\\"Restart\\\" button will be available to restart your instance.\\n\\nSee [Marketplace](/instance-administration/marketplace/) for more details on how to configure your SonarQube Server to connect to the Internet.\\n\\n## Manual Installation\\n\\nIn the page dedicated to the plugin you want to install (ex: for Python: SonarPython), click on the \\\"Download\\\" link of the version compatible with your SonarQube version.  \\n\\nPut the downloaded jar in `$SONARQUBE_HOME/extensions/plugins`, removing any previous versions of the same plugins.\\n\\nOnce done, you will need to restart your SonarQube Server.\\n\\n### License\\n\\nIf you installed a Commercial Edition, you will need to set the License Key in Administration > Configuration > License Manager before being able to use it.\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"setup/install-server\",\"content\":\"---\\ntitle: Install the Server\\nurl: /setup/install-server/\\n---\\n\\n\\n## Installing the Database\\n\\nSeveral [database engines](/requirements/requirements/) are supported. Be sure to follow the requirements listed for your database, they are real requirements not recommendations.\\n\\nCreate an empty schema and a `sonarqube` user. Grant this `sonarqube` user permissions to `create`, `update`, and `delete` objects for this schema.\\n\\n### Microsoft SQL Server\\n\\n![](/images/exclamation.svg) Collation **MUST** be case-sensitive (CS) and accent-sensitive (AS).\\n\\n![](/images/exclamation.svg) `READ_COMMITED_SNAPSHOT` **MUST** be set on the SonarQube database.\\n\\nMS SQL database's shared lock strategy may impact SonarQube runtime. Making sure that `is_read_committed_snapshot_on` is set to `true` to prevent SonarQube from facing potential deadlocks under heavy loads. \\n\\nExample of query to check `is_read_committed_snapshot_on`:\\n```\\nSELECT is_read_committed_snapshot_on FROM sys.databases WHERE name='YourSonarQubeDatabase';\\n```\\nExample of query to update `is_read_committed_snapshot_on`:\\n```\\nALTER DATABASE YourSonarQubeDatabase SET READ_COMMITTED_SNAPSHOT ON WITH ROLLBACK IMMEDIATE;\\n```\\n#### Integrated Security\\n\\nTo use integrated security: \\n\\n1. Download the [Microsoft SQL JDBC Driver 7.2.2 package](https://www.microsoft.com/en-us/download/details.aspx?id=57782) and copy the 64-bit version of `sqljdbc_auth.dll` to any folder in your path. \\n\\n2. **If you're running SonarQube as a Windows service,** make sure the Windows account under which the service is running has permission to connect your SQL server. The account should have `db_owner` database role membership. \\n\\n\\t**If you're running the SonarQube server from a command prompt,** the user under which the command prompt is running should have `db_owner` database role membership. \\n\\n3. Ensure that `sonar.jdbc.username` or `sonar.jdbc.password` properties are commented out or SonarQube will use SQL authentication.\\n\\n```\\nsonar.jdbc.url=jdbc:sqlserver://localhost;databaseName=sonar;integratedSecurity=true\\n```\\n\\n#### SQL Authentication\\n\\nTo use SQL Authentication, use the following connection string. Also ensure that `sonar.jdbc.username` and `sonar.jdbc.password` are set appropriately:\\n\\n```\\nsonar.jdbc.url=jdbc:sqlserver://localhost;databaseName=sonar\\nsonar.jdbc.username=sonarqube\\nsonar.jdbc.password=mypassword\\n```\\n\\n### Oracle\\n\\nIf there are two SonarQube schemas on the same Oracle instance, especially if they are for two different versions, SonarQube gets confused and picks the first it finds. To avoid this issue:\\n\\n- Either privileges associated to the SonarQube Oracle user should be decreased\\n- Or a trigger should be defined on the Oracle side to automatically alter the SonarQube Oracle user session when establishing a new connection:\\n\\n[[warning]]\\n| Oracle JDBC driver versions 12.1.0.1 and 12.1.0.2 have major bugs, and are not recommended for use with the SonarQube ([see more details](https://groups.google.com/forum/#!msg/sonarqube/Ahqt1iarqJg/u0BVRJZnBQAJ)).\\n\\n### PostgreSQL\\n\\nIf you want to use a custom schema and not the default \\\"public\\\" one, the PostgreSQL `search_path` property must be set:\\n\\n```\\nALTER USER mySonarUser SET search_path to mySonarQubeSchema\\n```\\n\\n## Installing the Web Server\\n\\nFirst, check the [requirements](/requirements/requirements/). Then download and unzip the [distribution](http://www.sonarqube.org/downloads/) (do not unzip into a directory starting with a digit). \\n\\nSonarQube cannot be run as `root` on Unix-based systems, so create a dedicated user account to use for SonarQube if necessary.\\n\\n_$SONARQUBE-HOME_ (below) refers to the path to the directory where the SonarQube distribution has been unzipped.\\n\\n### Setting the Access to the Database\\n\\nEdit _$SONARQUBE-HOME/conf/sonar.properties_ to configure the database settings. Templates are available for every supported database. Just uncomment and configure the template you need and comment out the lines dedicated to H2:\\n\\n```\\nExample for PostgreSQL\\nsonar.jdbc.username=sonarqube\\nsonar.jdbc.password=mypassword\\nsonar.jdbc.url=jdbc:postgresql://localhost/sonarqube\\n```\\n\\n### Adding the JDBC Driver\\n\\nDrivers for the supported databases (except Oracle) are already provided. Do not replace the provided drivers; they are the only ones supported.\\n\\nFor Oracle, copy the JDBC driver into _$SONARQUBE-HOME/extensions/jdbc-driver/oracle_.\\n\\n### Configuring the Elasticsearch storage path\\n\\nBy default, Elasticsearch data is stored in _$SONARQUBE-HOME/data_, but this is not recommended for production instances. Instead, you should store this data elsewhere, ideally in a dedicated volume with fast I/O. Beyond maintaining acceptable performance, doing so will also ease the upgrade of SonarQube.\\n\\nEdit _$SONARQUBE-HOME/conf/sonar.properties_ to configure the following settings:\\n\\n```\\nsonar.path.data=/var/sonarqube/data\\nsonar.path.temp=/var/sonarqube/temp\\n```\\n\\nThe user used to launch SonarQube must have read and write access to those directories.\\n\\n### Starting the Web Server\\n\\nThe default port is \\\"9000\\\" and the context path is \\\"/\\\". These values can be changed in _$SONARQUBE-HOME/conf/sonar.properties_:\\n\\n```\\nsonar.web.host=192.0.0.1\\nsonar.web.port=80\\nsonar.web.context=/sonarqube\\n```\\n\\nExecute the following script to start the server:\\n\\n- On Linux/Mac OS: bin/<YOUR OS>/sonar.sh start\\n- On Windows: bin/windows-x86-XX/StartSonar.bat\\n\\nYou can now browse SonarQube at _http://localhost:9000_ (the default System administrator credentials are `admin`/`admin`).\\n\\n### Tuning the Web Server\\n\\nBy default, SonarQube is configured to run on any computer with a simple Java JRE.\\n\\nFor better performance, the first thing to do when installing a production instance is to use a Java JDK and activate the server mode by uncommenting/setting the following line in _$SONARQUBE-HOME/conf/sonar.properties_:\\n\\n```\\nsonar.web.javaOpts=-server\\n```\\n\\nTo change the Java JVM used by SonarQube, simply edit _$SONARQUBE-HOME/conf/wrapper.conf_ and update the following line:\\n\\n```\\nwrapper.java.command=/path/to/my/jdk/bin/java\\n```\\n\\n### Advanced Installation Features\\n\\n- Running SonarQube as a Service on [Windows](/setup/operate-server/) or [Linux](/setup/operate-server/)\\n- Running SonarQube [behind a Proxy](/setup/operate-server/)\\n- Running SonarQube Community Edition with [Docker](https://hub.docker.com/_/sonarqube/)\\n\\n## Next Steps\\n\\nOnce your server is installed and running, you may also want to [Install Plugins](/setup/install-plugin/). Then you're ready to begin [Analyzing Source Code](/analysis/overview/).\\n\\n## Troubleshooting/FAQ\\n\\n### Grant more memory to the web server / compute engine / elastic search\\n\\nTo grant more memory to a server-side process, uncomment and edit the relevant javaOpts property in `$SONARQUBE_HOME/conf/sonar.properties`, specifically:\\n\\n- `sonar.web.javaOpts` (minimum values: `-server -Xmx768m`)\\n- `sonar.ce.javaOpts`\\n- `sonar.search.javaOpts`\\n\\n### Failed to start on Windows Vista\\n\\nSonarQube seems unable to start when installed under the `Program Files` directory on Windows Vista. It should therefore not be installed there.\\n\\n### Failed to start SonarQube with Oracle due to bad `USERS` table structure\\n\\nWhen other `USERS` tables exist in the Oracle DB, if the `sonarqube` user has read access on this other `USERS` table, the SonarQube web server can't start and an exception like the following one is thrown:\\n\\n```\\nActiveRecord::ActiveRecordError: ORA-00904: \\\"TOTO\\\": invalid identifier\\n: INSERT INTO users (login, name, email, crypted_password, salt, \\ncreated_at, updated_at, remember_token, remember_token_expires_at, toto, id)\\nVALUES('admin', 'Administrator', '', 'bba4c8a0f808f9798cf8b1c153a4bb4f9178cf59', '2519754f77ea67e5d7211cd1414698f465aacebb',\\nTIMESTAMP'2011-06-24 22:09:14', TIMESTAMP'2011-06-24 22:09:14', null, null, null, ?)\\nActiveRecord::ActiveRecordError: ORA-00904: \\\"TOTO\\\": invalid identifier\\n \\n: INSERT INTO users (login, name, email, crypted_password, salt, \\ncreated_at, updated_at, remember_token, remember_token_expires_at, toto, id)\\nVALUES('admin', 'Administrator', '', 'bba4c8a0f808f9798cf8b1c153a4bb4f9178cf59', \\n'2519754f77ea67e5d7211cd1414698f465aacebb', TIMESTAMP'2011-06-24 22:09:14', TIMESTAMP'2011-06-24 22:09:14', null, null, null, ?)\\n```\\n\\nTo fix this issue, the rights of the `sonarqube` Oracle user must be decreased to remove read access on the other `USERS` table(s).\\n\\n### Failed to connect to the Marketplace via proxy\\n\\nDouble check that settings for proxy are correctly set in `$SONARQUBE_HOME/conf/sonar.properties`.\\nNote that if your proxy username contains \\\"\\\\\\\" (backslash), then it should be escaped - for example username \\\"domain\\\\user\\\" in file should look like:\\n\\n```\\nhttp.proxyUser=domain\\\\\\\\user\\n```\\n\\nFor some proxies, the exception \\\"java.net.ProtocolException: Server redirected too many times\\\" might mean an incorrect username or password has been configured.\\n\\n### Exception java.lang.RuntimeException: can not run elasticsearch as root\\n\\nSonarQube starts an Elasticsearch process, and the same account that is running SonarQube itself will be used for the Elasticsearch process. Since Elasticsearch cannot be run as `root`, that means SonarQube can't be either. You must choose some other, non-`root` account with which to run SonarQube, preferably an account dedicated to the purpose.\\n\"},{\"path\":\"setup/operate-cluster\",\"content\":\"---\\ntitle: Configure & Operate a Cluster\\nurl: /setup/operate-cluster/\\n---\\n\\n_High Availability and cluster scalability are features of the [Data Center Edition](https://redirect.sonarsource.com/editions/datacenter.html)._\\n\\nOnce the [SonarQube cluster is installed](/setup/install-cluster/), you have a High Availability configuration that allows your SonarQube instance to stay up and running even if there is a crash or failure in one of the cluster's nodes. Your SonarQube cluster is also scalable, and you can add application nodes to increase your computing capabilities.\\n\\n## Start, Stop, or Upgrade the Cluster\\n\\n### Start the Cluster\\nTo start a cluster, you need to follow these steps in order:\\n\\n1. Start the search nodes\\n1. Start the application nodes\\n\\n### Stop the Cluster\\nTo stop a cluster, you need to follow these steps in order:\\n\\n1. Stop the application nodes\\n1. Stop the search nodes\\n\\n### Upgrade SonarQube\\n1. Stop the cluster.\\n1. Upgrade SonarQube on all nodes (application part, plugins, JDBC driver if required) following the usual upgrade procedure but without triggering the /setup phase.\\n1. Once all nodes have the same binaries: restart the cluster.\\n1. At this point, only one of the application nodes is up. Try to access `node_ip:port/setup` on each application node, and trigger the setup operation on the one that responds.\\n\\n## Start or Stop a Node\\nYou can start or stop a single node in the same way as starting and stopping an instance using a single server. By default, it's a graceful shutdown where no new analysis report processing can start, but the tasks in progress are allowed to finish.\\n\\n## Install or Upgrade a Plugin\\n1. Stop the application nodes.\\n1. Install or upgrade the plugin on the application nodes.\\n\\t* If upgrading, remove the old version.\\n\\t* You don't need to install plugins on search nodes.\\n1. Restart the application nodes.\\n\\n## Scalability\\nYou have the option of adding application nodes (up to 10 total application nodes) to your cluster to increase computing capabilities. \\n\\n### Adding an Application Node\\nTo add an Application Node:\\n\\n1. Configure your new application node in sonar.properties. The following is an example of the configuration to be added to sonar.properties for a sixth application node (server6, ip6) in a cluster with the default five servers:\\n\\n\\t**server6**\\n\\t```\\n\\t...\\n\\tsonar.cluster.enabled=true\\n\\tsonar.cluster.hosts=ip1,ip2,ip6\\n\\tsonar.cluster.search.hosts=ip3,ip4,ip5\\n\\tsonar.cluster.node.type=application\\n\\tsonar.auth.jwtBase64Hs256Secret=YOURGENERATEDSECRET\\n\\t...\\n\\t```\\n2. Update the configuration of the preexisting nodes to include your new node. \\n\\n\\tWhile you don't need to restart the cluster after adding a node, you should ensure the configuration is up to date on all of your nodes to avoid issues when you eventually do need to restart.\\n\\n### Removing an Application Node\\nWhen you remove an application node, make sure to update the configuration of the remaining nodes. Much like adding a node, while you don't need to restart the cluster after removing a node, you should ensure the configuration is up to date on all of your nodes to avoid issues when you eventually do need to restart.\\n\\n## Monitoring\\nCPU and RAM usage on each node have to be monitored separately with an APM. \\n\\nIn addition, we provide a Web API _api/system/health_ you can use to validate that all of the nodes in your cluster are operational.  \\n\\n* GREEN: SonarQube is fully operational\\n* YELLOW: SonarQube is usable, but it needs attention in order to be fully operational\\n* RED: SonarQube is not operational\\n\\nTo call it from a monitoring system without having to give admin credentials, it is possible to setup a System Passcode through the property `sonar.web.systemPasscode`. This must be configured in _$SONARQUBE-HOME/conf/sonar.properties_.\\n\\n### Cluster Status\\nOn the System Info page at **Administration > System**, you can check whether your cluster is running safely (green) or has some nodes with problems (orange or red).\\n\\n### Maximum Pending Time for Tasks\\nOn the global Background Tasks page at **Administration > Projects > Background Tasks**, you can see the number of **pending** tasks as well as the maximum **pending time** for the tasks in the queue. This shows the pending time of the oldest background task waiting to be processed. You can use this to evaluate if it might be worth configuring additional Compute Engine workers (Enterprise Edition) or additional nodes (Data Center Edition) to improve SonarQube performance. \\n\\n## Compute Engine Workers\\nIf you change the number of [Compute Engine workers](/instance-administration/compute-engine-performance/) in the UI, you must restart each application node to have the change take effect.\\n\\n## Project Move\\nWhen the [Project Move](/instance-administration/project-move/) feature is used in a DC installation:\\n\\n* Projects are exported on only one of the application nodes \\n* The archive of the exported projects must be copied to all the applications nodes in the target server\\n\\n## Configuration details\\nStart with the [default configuration](/setup/install-cluster/); it's good in most cases. The details below are only needed in specific cases.\\n\\n[Hazelcast](https://hazelcast.org/) is used to manage the communication between the nodes of the cluster. You don't need to install it yourself, it's provided out of the box.\\n\\nThe following properties may be defined in the _$SONARQUBE-HOME/conf/sonar.properties_ file of each node in a cluster. When defining a property that contains a list of hosts (`*.hosts`) the port is not required if the default port was not overridden in the configuration.\\n\\n### All nodes\\nProperty | Description | Default | Required | \\n---|---|---|---|\\n`sonar.cluster.enabled`|Set to `true` in each node to activate the cluster mode|`false`|yes\\n`sonar.cluster.name`|The name of the cluster. **Required if multiple clusters are present on the same network.** For example this prevents mixing Production and Preproduction clusters. This will be the name stored in the Hazelcast cluster and used as the name of the Elasticsearch cluster.|`sonarqube`|no\\n`sonar.cluster.search.hosts`|Comma-delimited list of search hosts in the cluster. Each item in the list must contain the port if the default `sonar.search.port` value is not used. Item format is `sonar.search.host` or `sonar.search.host:sonar.search.port`.| |yes\\n`sonar.cluster.node.name`|The name of the node that is used on Elasticsearch and stored in Hazelcast member attribute (NODE_NAME) for sonar-application|`sonarqube-{UUID}`|no\\n`sonar.cluster.node.type`|Type of node: either `application` or `search`| |yes\\n`sonar.cluster.node.host`|IP address of the network card that will be used by Hazelcast to communicate with the members of the cluster. If not specified, the first interface will be chosen (note that loopback interfaces won't be selected)| |no\\n\\n\\n### Application nodes\\nProperty  | Description | Required \\n---|---|---|---\\n`sonar.cluster.hosts`|Comma-delimited list of all **application** hosts in the cluster. This value must contain **only application hosts**. Each item in the list must contain the port if the default `sonar.cluster.node.port` value is not used. Item format is `sonar.cluster.node.host` or `sonar.cluster.node.host:sonar.cluster.node.port`.|yes\\n`sonar.cluster.node.port`|The Hazelcast port for communication with each application member of the cluster. Default: `9003`|no|\\n`sonar.cluster.node.web.port`|Hazelcast port for communication with the ComputeEngine process. Port must be accessible to all other search and application nodes. If not specified, a dynamic port will be chosen and all ports must be open among the nodes.|no\\n`sonar.cluster.node.ce.port`|Hazelcast port for communication with the WebServer process. Port must be accessible to all other search and application nodes. If not specified, a dynamic port will be chosen and all ports must be open among the nodes.|no\\n`sonar.auth.jwtBase64Hs256Secret`|Required for authentication with multiple web servers. It is used to keep user sessions opened when they are redirected from one web server to another by the load balancer. See _$SONARQUBE-HOME/conf/sonar.properties_) for details about how to generate this secret key.| yes\\n\\n### Search nodes\\nProperty  | Description | Default | Required \\n---|---|---|---\\n`sonar.search.host`|Listening IP. IP must be accessible to all other search and application nodes.|`127.0.0.1`|yes\\n`sonar.search.port`|Listening port. Port must be accessible to all other search and application nodes.|`9001`|yes\\n`sonar.search.initialStateTimeout`|The timeout for the Elasticsearch nodes to elect a master node. The default value will be fine in most cases, but in a situation where startup is failing because of a timeout, this may need to be adjusted. The value must be set in the format: `{integer}{timeunit}`. Valid `{timeunit}` values are: `ms` (milliseconds); `s` (seconds); `m` (minutes); `h` (hours); `d` (days); `w` (weeks)|cluster: 120s; standalone: 30s|no\\n\\n## Limitations\\n* Cluster downtime is required for SonarQube upgrades or plugin installations.\\n* All application nodes must be stopped when installing, uninstalling or upgrading a plugin.\\n* Plugins are not shared, it means if you install/uninstall/upgrade a given plugin in one application node, you need to perform the same actions on the other application node.\\n* There is no way to perform actions on the cluster from a central app - all operations must be done manually on each node of the cluster.\\n\\n\\n## Frequently Asked Questions\\n### Does Elasticsearch discover automatically other ES nodes? \\nNo. Multicast is disabled. All hosts (IP+port) must be listed.\\n### Can different nodes run on the same machine? \\nYes, but the best is to have 5 machines to be really resilient to failures.\\n### Can the members of a cluster be discovered automatically? \\nNo, all nodes must be configured in _$SONARQUBE-HOME/conf/sonar.properties_\\n\"},{\"path\":\"setup/operate-server\",\"content\":\"---\\ntitle: Configure & Operate the Server\\nurl: /setup/operate-server/\\n---\\n\\n<!-- sonarqube -->\\n\\n## Running SonarQube as a Service on Windows\\n\\n### Install or Uninstall NT Service (may have to run these files via Run As Administrator):\\n\\n```\\n%SONARQUBE_HOME%/bin/windows-x86-64/InstallNTService.bat\\n%SONARQUBE_HOME%/bin/windows-x86-64/UninstallNTService.bat\\n```\\n\\n### Start or Stop the Service:\\n\\n```\\n%SONARQUBE_HOME%/bin/windows-x86-64/StartNTService.bat\\n%SONARQUBE_HOME%/bin/windows-x86-64/StopNTService.bat\\n```\\n**Note:** `%SONARQUBE_HOME%/bin/windows-x86-64/StopNTService.bat` does a graceful shutdown where no new analysis report processing can start, but the tasks in progress are allowed to finish. The time a stop will take depends on the processing time of the tasks in progress. You'll need to kill all SonarQube processes manually to force a stop.\\n\\n## Running SonarQube Manually on Linux\\n\\n### Start or Stop the Instance\\n\\n```\\nStart:\\n$SONAR_HOME/bin/linux-x86-64/sonar.sh start\\n\\nGraceful shutdown:\\n$SONAR_HOME/bin/linux-x86-64/sonar.sh stop\\n\\nHard stop:\\n$SONAR_HOME/bin/linux-x86-64/sonar.sh force-stop\\n```\\n**Note:** Stop does a graceful shutdown where no new analysis report processing can start, but the tasks in progress are allowed to finish. The time a stop will take depends on the processing time of the tasks in progress. Use force stop for a hard stop. \\n\\n## Running SonarQube as a Service on Linux with SystemD\\n\\nOn Unix system using SystemD, you can install SonarQube as a service. You cannot run SonarQube as `root` in 'nix systems. Ideally, you will created a new account dedicated to the purpose of running SonarQube.\\nLet's suppose:\\n\\n* The user used to start the service is `sonarqube`\\n* The group used to start the service is `sonarqube`\\n* The Java Virtual Machine is installed in `/opt/java/`\\n* SonarQube has been unzipped into `/opt/sonarqube/`\\n\\nThen create the file `/etc/systemd/system/sonarqube.service` _based on_ the following \\n\\n```\\n[Unit]\\nDescription=SonarQube service\\nAfter=syslog.target network.target\\n\\n[Service]\\nType=simple\\nUser=sonarqube\\nGroup=sonarqube\\nPermissionsStartOnly=true\\nExecStart=/bin/nohup /opt/java/bin/java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=true -jar /opt/sonarqube/lib/sonar-application-7.4.jar\\nStandardOutput=syslog\\nLimitNOFILE=65536\\nLimitNPROC=8192\\nTimeoutStartSec=5\\nRestart=always\\nSuccessExitStatus=143\\n\\n[Install]\\nWantedBy=multi-user.target\\n```\\n**Note**\\n* Because the sonar-application jar name ends with the version of SonarQube, you will need to adjust the `ExecStart` command accordingly on install and at each upgrade.\\n* The SonarQube data directory, `/opt/sonarqube/data`, and the extensions directory, `/opt/sonarqube/extensions` should be owned by the `sonarqube` user. As a good practice, the rest should be owned by `root`\\n\\nOnce your `sonarqube.service` file is created and properly configured, run:\\n```\\nsudo systemctl enable sonarqube.service\\nsudo systemctl start sonarqube.service\\n```\\n\\n## Running SonarQube as a Service on Linux with initd\\n\\nThe following has been tested on Ubuntu 8.10 and CentOS 6.2.\\n\\nCreate the file /etc/init.d/sonar with this content:\\n\\n```\\n#!/bin/sh\\n#\\n# rc file for SonarQube\\n#\\n# chkconfig: 345 96 10\\n# description: SonarQube system (www.sonarsource.org)\\n#\\n### BEGIN INIT INFO\\n# Provides: sonar\\n# Required-Start: $network\\n# Required-Stop: $network\\n# Default-Start: 3 4 5\\n# Default-Stop: 0 1 2 6\\n# Short-Description: SonarQube system (www.sonarsource.org)\\n# Description: SonarQube system (www.sonarsource.org)\\n### END INIT INFO\\n \\n/usr/bin/sonar $*\\n```\\n\\nRegister SonarQube at boot time (RedHat, CentOS, 64 bit):\\n\\n```\\nsudo ln -s $SONAR_HOME/bin/linux-x86-64/sonar.sh /usr/bin/sonar\\nsudo chmod 755 /etc/init.d/sonar\\nsudo chkconfig --add sonar\\n```\\nOnce registration is done, run:\\n```\\nsudo service sonar start\\n```\\n\\n## Securing the Server Behind a Proxy\\n\\nThis section helps you configure the SonarQube Server if you want to run it behind a proxy. This can be done for security concerns or to consolidate multiple disparate applications.\\n\\n### Server Configuration\\n\\nTo run the SonarQube server over HTTPS, you must build a standard reverse proxy infrastructure.\\n\\nThe reverse proxy must be configured to set the value `X_FORWARDED_PROTO: https` in each HTTP request header. Without this property, redirection initiated by the SonarQube server will fall back on HTTP.\\n\\n### Using an Apache Proxy\\n\\nWe assume that you've already installed Apache 2 with module mod_proxy, that SonarQube is running and available on `http://private_sonar_host:sonar_port/` and that you want to configure a Virtual Host for `www.public_sonar.com`.\\n\\nAt this point, edit the HTTPd configuration file for the `www.public_sonar.com` virtual host. Include the following to expose SonarQube via `mod_proxy` at `http://www.public_sonar.com/`:\\n\\n```\\nProxyRequests Off\\nProxyPreserveHost On\\n<VirtualHost *:80>\\n  ServerName www.public_sonar.com\\n  ServerAdmin admin@somecompany.com\\n  ProxyPass / http://private_sonar_host:sonar_port/\\n  ProxyPassReverse / http://www.public_sonar.com/\\n  ErrorLog logs/somecompany/sonar/error.log\\n  CustomLog logs/somecompany/sonar/access.log common\\n</VirtualHost>\\n```\\n\\nApache configuration is going to vary based on your own application's requirements and the way you intend to expose SonarQube to the outside world. If you need more details about Apache HTTPd and mod_proxy, please see [http://httpd.apache.org](http://httpd.apache.org).\\n\\n### Using Nginx\\n\\nWe assume that you've already installed Nginx, that you are using a Virtual Host for www.somecompany.com and that SonarQube is running and available on `http://sonarhost:sonarport/`.\\n\\nAt this point, edit the Nginx configuration file. Include the following to expose SonarQube at http://www.somecompany.com/:\\n\\n```\\n# the server directive is nginx's virtual host directive\\nserver {\\n  # port to listen on. Can also be set to an IP:PORT\\n  listen 80;\\n \\n  # sets the domain[s] that this vhost server requests for\\n  server_name www.somecompany.com;\\n \\n  location / {\\n    proxy_pass http://sonarhost:sonarport;\\n  }\\n}\\n```\\n\\nNginx configuration will vary based on your own application's requirements and the way you intend to expose SonarQube to the outside world. If you need more details about Nginx, please see [https://www.nginx.com/resources/admin-guide/reverse-proxy/](https://www.nginx.com/resources/admin-guide/reverse-proxy/).\\n\\nNote that you may need to increase the max URL length since SonarQube requests can have URLs longer than 2048.\\n\\n### Using IIS\\n\\nPlease see: [http://blog.jessehouwing.nl/2016/02/configure-ssl-for-sonarqube-on-windows.html](http://blog.jessehouwing.nl/2016/02/configure-ssl-for-sonarqube-on-windows.html)\\n\\nNote that the setup described in this blog post is not approprite for SAML through IIS.\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"setup/overview\",\"content\":\"---\\ntitle: Overview\\nurl: /setup/overview/\\n---\\n\\n<!-- sonarqube -->\\n### Get Started in Two Minutes\\nTo give the SonarQube Platform a quick try, follow the [Get Started in Two Minutes Guide](/setup/get-started-2-minutes/).\\n\\n### Install a Production Instance\\nTo install a production instance, read the [Requirements](/requirements/requirements/), and then follow the [Installation Guide](/setup/install-server/).\\n\\n### After the Installation\\nAfter your server is up and running, you'll need to install one or more [SonarScanners](https://docs.sonarqube.org/display/SCAN) on the machines where analysis will be performed.\\n\\n### Upgrade your Production Instance\\nTo upgrade your production instance, read the [Upgrade Guide](/setup/upgrading/) and the relevant, version-specific upgrade notes.\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"setup/troubleshooting\",\"content\":\"---\\ntitle: Troubleshooting\\nurl: /setup/troubleshooting/\\n---\\n\\n<!-- sonarqube -->\\n\\n## Checking the logs\\n\\nIf you're having trouble starting your server for the first time (or any subsequent time!) the first thing to do is check your server logs. You'll find them in `$SONARQUBE_HOME/logs`:\\n\\n* sonar.log - Log for the main process. Holds general information about startup and shutdown. You'll get overall status here but not details. Look to the other logs for that.\\n* web.log - Information about initial connection to the database, database migration and reindexing, and the processing of HTTP requests. This includes database and search engine logs related to those requests.\\n* ce.log - Information about background task processing and the database and search engine logs related to those tasks.\\n* es.log - Ops information from the search engine, such as Elasticsearch startup, health status changes, cluster-, node- and index-level operations, etc.\\n\\n## Understanding the logs\\n\\nWhen there's an error, you'll very often find a stacktrace in the logs. If you're not familiar stacktraces, they can be intimidatingly tall walls of incomprehensible text. As a sample, here's a fairly short one:\\n\\n```\\njava.lang.IllegalStateException: Unable to blame file **/**/foo.java\\n    at org.sonarsource.scm.git.JGitBlameCommand.blame(JGitBlameCommand.java:128)\\n    at org.sonarsource.scm.git.JGitBlameCommand.access$000(JGitBlameCommand.java:44)\\n    at org.sonarsource.scm.git.JGitBlameCommand$1.call(JGitBlameCommand.java:112)\\n    at org.sonarsource.scm.git.JGitBlameCommand$1.call(JGitBlameCommand.java:109)\\n    at java.util.concurrent.FutureTask.run(Unknown Source)\\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\\n    at java.lang.Thread.run(Unknown Source)\\nCaused by: java.lang.NullPointerException\\n    at org.eclipse.jgit.treewalk.filter.PathFilter.create(PathFilter.java:77)\\n    at org.eclipse.jgit.blame.BlameGenerator.<init>(BlameGenerator.java:161)\\n    at org.eclipse.jgit.api.BlameCommand.call(BlameCommand.java:203)\\n    at org.sonarsource.scm.git.JGitBlameCommand.blame(JGitBlameCommand.java:126)\\n    ... 7 more\\n```\\n\\nUnless you wrote the code that produced this error, you really only care about:\\n* the first line, which ought to have a human-readable message after the colon. In this case, it's Unable to blame file `**/**/foo.java`\\n* and any line that starts with `Caused by:`. There are often several `Caused by` lines, and indentation makes them easy to find as you scroll through the error. Be sure to read each of these lines. Very often one of them - the last one or next to last one - contains the real problem.\\n\\n## Recovering from Elasticsearch read-only indices\\n\\nYou may encounter issues with Elasticsearch (ES) indices becoming locked in read-only mode. ES requires free disk space available and implements a safety mechanism to prevent the disk from being flooded with index data that:\\n\\n* **For non-DCE** –  locks all indices in read-only mode when the 95% used disk usage watermark is reached.  \\n* **For DCE** – locks all or some indices in read-only mode when one or more node reaches the 95% used disk usage watermark.\\n\\nES shows warnings in the logs as soon as disk usage reaches 85% and 90%. At 95% usage and above, indices turning read-only causes errors in the web and compute engine.\\n\\nFreeing disk space will *not* automatically make the indices return to read-write. To make indices read-write, you also need to:\\n\\n* **For non-DCE** – restart SonarQube.\\n* **For DCE** – restart *ALL* application nodes (the first application node restarted after all have been stopped will make the indices read-write).  \\n\\nSonarQube's built-in resilience mechanism allows SonarQube to eventually recover from the indices being behind data in the DB (this process can take a while).\\n\\nIf you still have inconsistencies, you'll need to rebuild the indices (this operation can take a long time depending on the number of issues and components):\\n\\n**non-DCE:**  \\n\\n1. Stop SonarQube  \\n1. Delete the data/es6 directory  \\n1. Restart SonarQube  \\n\\n**DCE:**  \\n\\n1. Stop the whole cluster (ES and application nodes)  \\n1. Delete the data/es6 directory on each ES node  \\n1. Restart the whole cluster  \\n    \\n**Note:** See [Configure & Operate a Cluster](/setup/operate-cluster/) for information on stopping and starting a cluster.\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"setup/upgrade-notes\",\"content\":\"---\\ntitle: Release Upgrade Notes\\nurl: /setup/upgrade-notes/\\n---\\n\\n## Release 8.0 Upgrade Notes  \\n**GitHub, LDAP, and SAML authentication now built in**  \\nGitHub, LDAP, and SAML authentication is now built in. If you were using the authentication plugins (sonar-ldap, sonar-auth-github, and sonar-auth-saml), you need to remove them from SonarQube before upgrading. ([SONAR-12471](https://jira.sonarsource.com/browse/SONAR-12471)).\\n\\n**GitLab Authentication now available**  \\nGitLab OAuth2 authentication is now available in all editions. If you were using the community plugin, you need to remove it from SonarQube before upgrading. The configured variable of the plugin will be migrated, so the authentication will work without having to rewrite the configuration. Due to changes in group mapping, GitLab subgroups mapped using the community plugin will need to be renamed in SonarQube for the mapping to work. ([SONAR-12460](https://jira.sonarsource.com/browse/SONAR-12460)).\\n\\n**New Code Period values simplified**\\nIt's now easier to set your New Code Period in the UI. With the new settings, specific analysis has replaced setting the New Code Period to a specific date or version. If you were using a specific date or version for your New Code Period, now you'll need to use a specific analysis. See the [Setting Your New Code Period](/project-administration/new-code-period/) for more info. ([MMF-1579](https://jira.sonarsource.com/browse/MMF-1579)).  \\n\\n[Full Release Notes](https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&version=14962)\\n\\n\\n## Release 7.9.1 LTS Upgrade Notes  \\n**Upgrade on Microsoft SQL Server fixed**  \\nUpgrade failure and performance issues with Microsoft SQL Server have been fixed ([SONAR-12260](https://jira.sonarsource.com/browse/SONAR-12260), [SONAR-12251](https://jira.sonarsource.com/browse/SONAR-12251)).\\n\\n**Pylint execution on Windows fixed**  \\nAutomatic execution of Pylint during python analysis on Windows has been fixed. Note that automatic execution of pylint during analysis remains deprecated on all OSes. ([SONAR-12274](https://jira.sonarsource.com/browse/SONAR-12274)).\\n\\n[Full Release Notes](https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&version=15029)\\n\\n\\n## Release 7.9 LTS Upgrade Notes  \\n**Upgrade can fail on Microsoft SQL Server**  \\nMigration from SonarQube v6.7.x to v7.9 fails on Microsoft SQL Server ([SONAR-12260](https://jira.sonarsource.com/browse/SONAR-12260)). \\n\\n**MySQL No Longer Supported**  \\nSonarQube no longer supports MySQL. To migrate from MySQL to a supported database, see the free [MySQL Migrator tool](https://github.com/SonarSource/mysql-migrator).\\n\\n**Java 11 Required**  \\nThe SonarQube server now requires Java 11. Analyses may continue to use Java 8 if necessary.\\n\\n**Pylint should be run manually**  \\nRunning Pylint automatically during python analysis has been deprecated. Additionally, it is broken in this version on Windows. If needed, Pylint must be run ahead of time and the resulting report passed in to analysis. \\n\\n[Full Release Notes](https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&version=14945)\\n\\n\\n## Release 7.8 Upgrade Notes\\n**MySQL Deprecation and Migration**  \\nThis is the last version that will support MySQL. To migrate from MySQL to a supported database, see the free [MySQL Migrator tool](https://github.com/SonarSource/mysql-migrator).\\n\\n**Elasticsearch bootstrap checks enforced**  \\nSonarQube will now fail to start if Elasticsearch's bootstrap checks fail. That means you may need to [adjust the maximum number of open files and processes](/requirements/requirements/) for the SonarQube user as part of this upgrade ([SONAR-11264](https://jira.sonarsource.com/browse/SONAR-11264)). \\n\\n**Scanner version compatibility**  \\nOnly the following scanner versions are compatible with SonarQube 7.8:\\n* SonarQube Scanner CLI 2.9+\\n* SonarQube Scanner Maven 3.3.0.603+\\n* SonarQube Scanner Gradle 2.3+\\n\\n**Analysis fails with old branch parameter**\\n`sonar.branch` was deprecated in 6.7. With this version analysis fails when it is used. Where it is still in use, simply remove the `sonar.branch` property and update your `sonar.projectKey` value to `key:branch`.\\n\\n**Notifications changes**  \\nSeveral changes have been made to notificatons. The notifications algorithm has been replaced with one that offers better performance during background task processing. Issue change notifications spawned by analysis or bulk change now generate only one email per event rather than one email per issue. The ability to subscribe globally to new issues notifications and notifications for issues resolved as False Positive or Won't fix has been dropped, as have all such subscriptions. Issue-related notifications on PRs have also been dropped.\\n\\n**Webhook payloads now signed**  \\nIt is now possible to verify that webhook payloads actually come from SonarQube via the `X-Sonar-Webhook-HMAC-SHA256` HTTP header. ([SONAR-12000](https://jira.sonarsource.com/browse/SONAR-12000))\\n\\n**Graceful shutdown**  \\nThe SonarQube server now shuts down gracefully. I.E. it completes any currently-processing background tasks before shutting down. This may mean that shutdown takes longer than previously. ([SONAR-12043](https://jira.sonarsource.com/browse/SONAR-12043))\\n\\n**Duplication density correction**  \\nA bug affecting the calculation of duplication density has been fixed. Each project's duplication density value will likely rise at the next analysis, possibly affecting Quality Gate status. ([SONAR-12188](https://jira.sonarsource.com/browse/SONAR-12188))\\n\\n**Additional authentication methods embedded**  \\nThe SAML and GitHub Authentication plugins are now embedded in all editions ([SONAR-11894](https://jira.sonarsource.com/browse/SONAR-11894))\\n\\n**Deprecated web services dropped**  \\nWeb services that were deprecated in 5.x versions have been dropped. ([SONAR-11876](https://jira.sonarsource.com/browse/SONAR-11876))\\n\\n[Full Release Notes](https://jira.sonarsource.com/secure/ReleaseNote.jspa?projectId=10930&version=14939)\\n\\n## Release 7.7 Upgrade Notes\\n**Deprecated parameters dropped**  \\n`sonar.language`, and  `sonar.profile`, both deprecated since 4.5, are dropped in this version as is `sonar.analysis.mode`, which as been deprecated since 6.6. These now-unrecognized parameters will simply be ignored, rather than failing analysis.\\n\\n**PR decoration below GitHub Enterprise 2.14 swapped for GitHub checks**  \\nThis version adds support for GitHub Enterprise (GHE) checks, which were introduced in GHE 2.14, and drops support for PR decoration in GHE versions prior to 2.14. To use the new checks implementation, an application will need to be created in GHE, and further configuration will be required via the SonarQube UI. ([Details in the docs.](/instance-administration/github-application/).)\\n\\n**ElasticSearch update requires index rebuild, potentially more filespace**  \\nWhile it is generally possible to keep ElasticSearch indices in an upgrade (see [Configuring the Elasticsearch storage path](/setup/install-server/)), this version's upgrade of ElasticSearch will force all indices to be rebuilt. Additionally, more filespace may be required for this version's data ([SONAR-11826](https://jira.sonarsource.com/browse/SONAR-11826)).\\n\\n**32-bit architecture support dropped**  \\nSupport for 32-bit architectures has been dropped as part of this version's upgrade of ElasticSearch, and those scripts removed from the distributions. \\n\\n**Deprecated metrics dropped**  \\nSeveral deprecated ([SONAR-1794](https://jira.sonarsource.com/browse/SONAR-11794)) or obsolete ([SONAR-11664](https://jira.sonarsource.com/browse/SONAR-11664)) metrics have been dropped from the platform.\\n\\n[Full Release Notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14848)\\n\\n## Release 7.6 Upgrade Notes\\n**Quality Gates Simplified**  \\nQuality Gates have been streamlined to remove a number of confusing options. Conditions previously using the \\\"on new code\\\" checkbox will be migrated to On New Code metrics. For example, a condition previously using the overall Coverage metric with the \\\"on new code\\\" checkbox enabled will be migrated to a condition using the Coverage on New Code metric. The ability to set Warning conditions has been dropped, as have some metric/operator conditions have been removed. Conditions using dropped options will be removed in the upgrade. ([MMF-473](https://jira.sonarsource.com/browse/MMF-473))\\n\\n**Concept of module removed from the UI**  \\nThis version drops the concept of module from the interface. There is no longer a homepage presentation for any level below the project itself. Additionally, the presentation of the project has been updated in the Measures and Code pages to display the project tree as it is in the file system. For the most part (see below) analysis of multi-module projects will continue to work as it has.\\n\\n**Multi-Module analysis properties removed**  \\nMulti-module analysis configuration may need to be changed ([MMF-365](https://jira.sonarsource.com/browse/MMF-365)):\\n\\n* When exclusions based on file paths are specified in the analysis properties at project level, those file paths must be relative to the project / analysis root. Paths specified at project level will continue to be re-applied at module level but will raise a warning. This backward-compatibile behavior is considered deprecated and will be dropped in a future version. \\n* Specifying source encoding, and issue inclusions / exclusions at module level is no longer supported.\\n\\n**Incompatibility with Findbugs plugin version 3.9.1 and earlier**  \\nThis version embeds SonarHTML, which analyzes both `.html` and `.jsp` files. Because of this change, the community plugin Findbugs versions 3.9.1 and earlier are incompatible with SonarQube 7.6+ ([MMF-1567](https://jira.sonarsource.com/browse/MMF-1567)).\\n\\n[Full Release Notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14693)\\n\\n## Release 7.5 Upgrade Notes  \\n**More Issues Backdated**  \\nAdditional cases of issue backdating have been added, so fewer genuinely old issues will be reported in the New Code period ([MMF-1287](https://jira.sonarsource.com/browse/MMF-1287))\\n\\n**Two Vulnerabilities Patched**  \\nAn open redirect vulnerability on login was corrected ([SONAR-11475](https://jira.sonarsource.com/browse/SONAR-11475)).\\n\\nAn XSS vulnerability in custom project links was also patched. ([SONAR-11506](https://jira.sonarsource.com/browse/SONAR-11506)).\\n\\n**Deadlock Fixed**  \\nThe deadlock that could occur with the combination of \\n* SQL Server\\n* Multiple workers\\n* Analysis of projects and portfolios  \\n\\nhas been fixed ([SONAR-11467](https://jira.sonarsource.com/browse/SONAR-11467)).\\n\\n**DB Connection Pool Defaults Restored**  \\nDatabase connection pool defaults have been restored to their pre-SonarQube 7.4 values. They were inadvertently affected by a change of connection pooling in 7.4 ([SONAR-11539](https://jira.sonarsource.com/browse/SONAR-11539)). \\n\\n**Database Name in JDBC URL Now Case-Sensitive**\\nFor MSSQL users, a driver upgrade rendered the database name case-sensitive in the JDBC URL ([SONAR-11443](https://jira.sonarsource.com/browse/SONAR-11443)).\\n\\n[Full Release Notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14693)\\n\\n\\n## Release 7.4 Upgrade Notes\\n**Analysis Failure on Invalid New Code Period**  \\nAnalysis will fail if the New Code Period (see below) is not set to one of:\\n* valid, in-the-past date\\n* positive integer (number of days)\\n* `previous_version`\\n* the version string of an existing snapshot  \\n\\nFor more, see [SONAR-10555](https://jira.sonarsource.com/browse/SONAR-10555)\\n\\n**New Create Portfolios and Create Applications permissions**  \\nTwo distinct new create permissions have been added. Users who have any creation permission will see a new \\\"+\\\" item in the top menu giving access to these permissions. For more, see the Global Permissions topic in [Security](/instance-administration/security/) \\n\\n**Issues from third party Roslyn analyzers**  \\nAnalyzing a C# / VB.NET solution now automatically imports issues found by attached Roslyn analyzers into SonarQube, and no longer suppresses them from the MSBuild output. The Quality Gate status of projects may be impacted.\\n\\n**More memory may be needed for analysis**  \\nChanges in the advanced security analysis available in Developer Edition and above may mean that a larger heap is needed during analysis.\\n\\n**Analysis warnings in UI**  \\nSome `WARN` messages generated during analysis are now available via the UI ([MMF-1244](https://jira.sonarsource.com/browse/MMF-1244)). More messages will be available as new versions of language analyzers are released.\\n\\n**\\\"Leak\\\" replaced with \\\"New Code\\\"**  \\nWording has been updated throughout the interface to replace \\\"Leak\\\" and \\\"Leak Period\\\" with \\\"New Code\\\" and \\\"New Code Period\\\".\\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14549)\\n\\n\\n## Release 7.3 Upgrade Notes\\n\\n**New \\\"Administer Security Hotspots\\\" Permission**  \\nDuring the upgrade, the new \\\"Administer Security Hotspots\\\" permission is granted to all users/groups who already have the \\\"Administer Issues\\\" permission.\\n\\n**Expanded Compute Engine Logs**  \\nStarting with this version, Compute Engine logs will be more verbose. These logs are rotated automatically, but on a daily basis, not based on file size. \\n\\n**PostgreSQL < 9.3 No Longer Supported**  \\nSonarQube 7.3+ only supports PostgreSQL 9.3 to 10. SonarQube will not start if you are using a lower version of PostgreSQL.\\n\\n**Some 3rd-party Plugins Incompatible**  \\nAPIs deprecated before SonarQube 5.6 are dropped in this version, making some third-party plugins incompatible. It is always advised to check plugin compatibility in the Plugin Version Matrix with each new upgrade, and more so for this version. \\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14464)\\n\\n## Release 7.2 Upgrade Notes\\n\\n**License Incompatibility**  \\n**Users coming from 6.7.5 must not upgrade to this version.** Your license will be incompatible. Instead, if you seek an upgrade to an intermediate version before the next L.T.S. version, you must start from 7.3 or higher.\\n\\n**Pull Request Analysis**  \\nPull Requests are now a first class citizen feature in SonarQube for Developer, Enterprise and Data Center Edition users.\\n\\nIf you are using GitHub, you need to be sure to NOT have the GitHub Plugin in your SONARQUBE_HOME/extensions/plugins directory.\\n\\n**New Edition Packaging**  \\nSonarSource Commercial Editions are now distributed individually, so you directly get the features and functionalities that match your needs. This means that upgrade/downgrade from one edition to another is no longer possible within the SonarQube Marketplace. In order to use a different edition you must download its dedicated package, and have a license ready for using that edition.\\n\\n**Deprecated Features**  \\nSonarQube 7.2 is the last version supporting PostgreSQL < 9.3. Starting from SonarQube 7.3 the minimal supported version of PostgreSQL will be 9.3: SONAR-10668\\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14213)\\n\\n## Release 7.1 Upgrade Notes\\n\\n**License Incompatibility**  \\n**Users coming from 6.7.5 must not upgrade to this version.** Your license will be incompatible. Instead, if you seek an upgrade to an intermediate version before the next L.T.S. version, you must start from 7.3 or higher.\\n\\n**Live Portfolios**  \\nPortfolio measures are now updated without having to explicitly trigger recalculation. As a result, the \\\"views\\\" scanner task no longer has any effect, and will fail with a clear error message. \\n\\n**Deprecated Features**  \\nSupport for MySQL is deprecated for all editions below Data Center Edition (see below).\\n\\n**Dropped Features**  \\n- Support for MySQL in Data Center Edition.\\n- The \\\"accessors\\\" metric, which was deprecated in SonarQube 5.0.\\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14178)\\n\\n## Release 7.0 Upgrade Notes\\n\\n**License incompatibility**  \\n**Users coming from 6.7.5 must not upgrade to this version.** Your license will be incompatible. Instead, if you seek an upgrade to an intermediate version before the next L.T.S. version, you must start from 7.3 or higher.\\n\\n**Measures: Live Update**  \\nProject measures, including the Quality Gate status, are computed without having to trigger another code scan when issue changes may impact them.\\n\\n**Built-In Read-Only Quality Gate**  \\nIn order to make clear the default, minimum and recommended criteria Quality Gates, the \\\"Sonar way\\\" Quality Gate is now read-only, and the default if one is not already set. It may be updated automatically at each upgrade of SonarQube.\\n\\n**Dropped Features**  \\nIt's no longer possible to unset the default Quality Gate. \\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14041)\\n\\n\\n## Release 6.7.5 Upgrade Notes\\n\\n**Commercial Edition Must Be Upgraded**  \\nBecause a new server identifier will be generated at upgrade to this version, startup will fail unless you upgrade your commercial edition to the latest compatible version. I.E. don't just copy over your edition plugins from one instance to the next, but make sure to download the latest edition bundle.\\n\\n**SonarLint Must Be Upgraded**  \\nAnalyzers provided as part of a commercial package will be disabled in old versions of SonarLint. SonarLint users must upgrade to the latest available version:\\n\\n- SonarLint for Eclipse: 3.3+.\\n- SonarLint for IntelliJ: 3.1+\\n\\n**Multi-Version Upgrade**  \\nDon't forget to read all the intermediate upgrade notes if you're upgrading more than a single version.\\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=14467)\\n\\n\\n## Release 6.7 Upgrade Notes\\n\\n**Drop of Issues Report**  \\nThe deprecated Issues Report feature has been removed.\\n\\n[Full release notes](https://jira.sonarsource.com/jira/secure/ReleaseNote.jspa?projectId=10930&version=13972)\\n\"},{\"path\":\"setup/upgrading\",\"content\":\"---\\ntitle: Upgrade the Server\\nurl: /setup/upgrading/\\n---\\n\\n<!-- sonarqube -->\\nUpgrading across multiple, non-LTS versions is handled automatically. However, if you have an LTS version in your migration path, you must first migrate to this LTS and then migrate to your target version.\\n\\nExample 1 : 5.1 -> 7.0, migration path is 5.1 -> 5.6.7 LTS -> 6.7.x LTS -> 7.0\\nExample 2 : 6.2 -> 6.7, migration path is 6.2 -> 6.7.x LTS (where x is the latest patch available for 6.7 - you don't need to install all the intermediary patches, just take the latest)\\n\\n## Upgrade Guide\\n\\nThis is a generic upgrade guide. Carefully read the [Release Upgrade Notes](/setup/upgrade-notes/) of your target version and of any intermediate version(s).\\n\\n![](/images/info.svg) **Planning to Upgrade to a Commercial Edition?**\\nIf you are moving to 6.7 LTS and installing a Commercial Edition, please read this [documentation](https://docs.sonarqube.org/display/SONARQUBE67/SonarSource+Editions).\\n\\n[[warning]]\\n| ![](/images/exclamation.svg) Before you start, back up your SonarQube Database. Upgrade problems are rare, but you'll want the backup if anything does happen.\\n\\n1. Download and unzip the SonarQube distribution of your edition in a fresh directory, let's say `$NEW_SONARQUBE_HOME`\\n2. Manually install the non-default plugins that are compatible with your version of SonarQube. Use the [Compatibility Matrix](https://docs.sonarqube.org/display/PLUG/Plugin+Version+Matrix) to ensure that the versions you install are compatible with your server version. Note that the most recent versions of all SonarSource code analyzers available in your edition are installed by default. Simply copying plugins from the old server to the new is not recommended; incompatible or duplicate plugins could cause startup errors.\\n3. Update the contents of `sonar.properties` and `wrapper.conf` files (in `$NEW_SONARQUBE_HOME/conf`) with the settings of the related files in the `$OLD_SONARQUBE_HOME/conf` directory (web server URL, database, ldap settings, etc.). Do not copy-paste the old files.\\nIf you are using the Oracle DB, copy its JDBC driver into `$NEW_SONARQUBE_HOME/extensions/jdbc-driver/oracle`\\n4. Stop your old SonarQube Server\\n5. Start your new SonarQube Server\\n6. Browse to `http://yourSonarQubeServerURL/setup` and follow the setup instructions\\n7. Reanalyze your projects to get fresh data\\n\\n## Additional Information\\n\\n### Oracle Clean-up\\n\\nStarting with version 6.6, there's an additional step you may want to perform if you're using Oracle. On Oracle, the database columns to be dropped are now marked as UNUSED and are not physically dropped anymore. To reclaim disk space, Oracle administrators must drop these unused columns manually. The SQL request is `ALTER TABLE foo DROP UNUSED COLUMNS`. The relevant tables are listed in the system table `all_unused_col_tabs`.\\n\\n### Additional Database Maintenance\\n\\nRefreshing your database's statistics and rebuilding your database's indices are recommended once the technical upgrade is done (just before the very last step).\\n\\nFor PostgreSQL, that means executing `VACUUM FULL`. According to the PostgreSQL documentation:\\n\\n```\\nIn normal PostgreSQL operation, tuples that are deleted or obsoleted by an update are not physically removed from their table; they remain present until a VACUUM is done.\\n```\\n\\n### Scanner Update\\n\\nWhen upgrading SonarQube, you should also make sure you’re using the latest versions of the SonarQube scanners to take advantage of features and fixes on the scanner side. Please check the documentation pages of the Scanners you use for the most recent version compatible with SonarQube and your build tools.\\n\\n### SonarQube as a Linux or Windows Service\\n\\nIf you use external configuration, such as a script or Windows Service to control your server, you'll need to update it to point to `$NEW_SONARQUBE_HOME`.\\n\\nIn case you used the InstallNTService.bat to install SonarQube as a Windows Service, run the $OLD_SONARQUBE_HOME/bin/.../UninstallNTService.bat before running the InstallNTService.bat of the $NEW_SONARQUBE_HOME.\\n\\n## Release Upgrade Notes\\n\\nUsually SonarQube releases come with some specific recommendations for upgrading from the previous version. You should read the upgrade notes for each version between your current version and the target version.\\n\\n<!-- /sonarqube -->\\n\"},{\"path\":\"sonarcloud/autoscan\",\"content\":\"---\\ntitle: AutoScan Beta Feature\\nnav: AutoScan\\nurl: /autoscan/\\n---\\n\\nSonarCloud can autonomously scan your code, by simply reading it from your repository! We call that AutoScan.\\n\\n[[info]]\\n| This is currently a Beta feature, with a limited scope and some caveats. Those limitations will be removed along the way.\\n\\n\\n## Prerequisites\\n\\n* The first version of this Beta feature works only for GitHub repositories. \\n* The automatic analysis can be activated only on projects which are bound to their remote repository. This implies that the the project was set up through the SonarCloud web interface by selecting a repository (i.e. not \\\"manually\\\").\\n\\n## What to expect\\n\\nOnce activated, SonarCloud will automatically analyze: \\n* the default branch of the repository\\n* the pull requests (PR)\\n\\nIt will take care of doing it whenever you push on your repository.\\n\\nThe following languages are currently supported: \\n* ABAP\\n* Apex\\n* CSS\\n* Flex\\n* Go\\n* HTML\\n* JS\\n* Kotlin\\n* PHP\\n* Python\\n* Ruby\\n* Scala\\n* Swift\\n* TypeScript\\n* TSQL\\n* XML\\n\\n## How to activate the feature?\\n\\nTo enable the automatic analysis, you need to add a `.sonarcloud.properties` file in your repository.\\n\\nIf you're starting from scratch:\\n\\n1. Do the [setup for your project](/#sonarcloud#/projects/create) (from the `+ > Analyze new project` top right menu)\\n    * ![](/images/exclamation.svg) Remember that your project must absolutely be created by selecting a GitHub repository - otherwise it won't work.\\n1. Once the setup is done on SonarCloud, you end up on the project home page which shows a tutorial. Ignore it and simply add a `.sonarcloud.properties` file in the base directory of your default branch or on a PR. \\n1. After a while, the analysis results will be visible in SonarCloud (and your PR will be annotated with comments if you pushed the file on a PR)\\n\\nHere are the supported optional settings for the `.sonarcloud.properties` file:\\n```\\n# Path to sources\\n#sonar.sources=.\\n#sonar.exclusions=\\n#sonar.inclusions=\\n\\n# Path to tests\\n#sonar.tests=\\n#sonar.test.exclusions=\\n#sonar.test.inclusions=\\n\\n# Source encoding\\n#sonar.sourceEncoding=UTF-8\\n\\n# Exclusions for copy-paste detection\\n#sonar.cpd.exclusions=\\n```\\n\\nNote that you can just push an empty `.sonarcloud.properties` file, this will work fine. In this case, every file in the repository will be considered as a source file.\\n\\n## Current limitations/caveats\\n\\n* There is no visual feedback (yet) in the UI when SonarCloud runs an analysis.\\n* A consequence of the previous point is that if - for any reason, SonarCloud fails to successfully run the analysis, nothing will be displayed. In that case, just come on [the forum](https://community.sonarsource.com/tags/c/help/sc/autoscan) and ask a question, we'll monitor that closely.\\n* Code coverage information is not supported\\n* Import of external rule engine reports is not supported\\n\\n## Noteworthy\\n\\n* This Beta feature works for any project - public or private.\\n* It can be activated with no extra cost.\\n* Sources are cloned only during the analysis, and only when the `.sonarcloud.properties` file exists (i.e. when the feature is activated). The cloned repository is fully deleted at the end of the analysis, and SonarCloud does not keep a copy of it.\\n* Non supported languages (Java, C#, VB.NET, C/C++, ObjectiveC) are not analyzed at all.\\n\\n## How to give feedback?\\n\\nCreate a new thread on the forum, under [\\\"Get Help > SonarCloud\\\"](https://community.sonarsource.com/tags/c/help/sc/autoscan), with the \\\"autoscan\\\" tag.\\n\\nWe'd love to hear your feedback about this new upcoming feature, may it be about bugs, improvements, or anything you want to share with us!\\n\"},{\"path\":\"sonarcloud/integrations/bitbucketcloud-azurepipelines\",\"content\":\"---\\ntitle: Analyze your repository with Azure Pipelines\\nnav: With Azure Pipelines\\nurl: /integrations/bitbucketcloud/azure-pipelines/\\n---\\n\\nIf you are analyzing .NET applications and want to benefit from the Azure DevOps / Pipelines experience and features, you have the possibility to setup a build pipeline, targeting your Bitbucket Cloud repository, and connected to SonarCloud.\\n\\n## Analyzing branches\\n\\nPlease be advised that the team where the Bitbucket Cloud repository is has to be bound to your SonarCloud organization in order to get this work.\\n\\n1. Install the SonarCloud extension for Azure DevOps in your Azure DevOps organization : [SonarCloud extension](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud). You can have a look a [this chapter](https://docs.microsoft.com/en-us/labs/devops/sonarcloudlab/index?tutorial-step=1) of the global tutorial for Azure DevOps.\\n\\n2. Configure a new build pipeline (YAML or classic editor), targeting your Bitbucket Cloud repository. You will have to create a new service connection to that repository.\\n\\n3. Configure the Prepare SonarCloud configuration task just the way you will do for a regular Azure Git Repository.\\n\\n4. Go to the triggers tab of the pipeline configuration, click on the repository below `Continuous Integration` then click on `Enable continuous integration`, add a new branch filter with following configuration :\\n   * Type : Include\\n   * Branch specification : master\\n\\nWant to see how it is working ? Have a look at our [sample .NET project](https://bitbucket.org/sonarsource/sample-dotnet-project-azuredevops)\\n\\n## Analyzing pull requests\\n\\nPre-requisites :\\n\\n* Follow the initiation steps of Analyzing branches with Azure pipelines above.\\n* Version 1.6.4+ of the Azure DevOps extension is needed.\\n\\nAs for branches, you can trigger an analysis for Pull requests with an Azure DevOps pipeline and get your PR decorated.\\n\\n1. On the Azure pipeline that will be used, click on the `Triggers` tab, then click on the repository below `Pull request validation`\\n\\n2. Click on `Enable pull request validation` then configure the proper branch filters.\\n\"},{\"path\":\"sonarcloud/integrations/bitbucketcloud-bitbucketpipelines\",\"content\":\"---\\ntitle: Analyze your repository with Bitbucket Pipelines\\nnav: With Bitbucket Pipelines\\nurl: /integrations/bitbucketcloud/bitbucket-pipelines/\\n---\\n\\n## Analyzing branches\\n\\nOnce your project is created and initiated from the repository you selected:\\n\\n1. Generate a token to allow to publish analysis from Bitbucket Pipelines. To generate a token, follow the first step of the tutorial on the dashboard of the project, or go to your user security page.\\n\\n2. On Bitbucket Cloud, go to the \\\"Settings > Pipelines > Account variables\\\" page of your team, and add a new SONAR_TOKEN variable that contains the value of the SonarCloud token (something like `9ad01c85336b265406fa6554a9a681a4b281135f`).\\n   * **Make sure that you click on the \\\"Lock\\\" icon to encrypt and hide this token.**\\n\\n3. Edit the `bitbucket-pipelines.yml` file of your repository to trigger the SonarCloud analysis.\\n\\nOnce those changes are pushed, Pipelines will automatically trigger analyses on the repository.\\n\\nYou can see our multiple sample projects to see how it is working :\\n\\n  * [Built with Gradle](https://bitbucket.org/sonarsource/sample-gradle-project)\\n  * [Built with Maven](https://bitbucket.org/sonarsource/sample-maven-project)\\n  * [Javascript project](https://bitbucket.org/sonarsource/sample-nodejs-project)\\n\\nIf you target a .NET application, see a [sample .NET project](https://bitbucket.org/sonarsource/sample-dotnet-project-azuredevops) built with Azure Pipelines\\n\\n## Analyzing pull requests\\n\\nIn order to trigger SonarCloud analysis on each pull request update, you have to supply the same command in the `pull-requests` section of `bitbucket-pipelines.yml` (check [Configure bitbucket-pipelines.yml](https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html#Configurebitbucket-pipelines.yml-ci_pull-requests) for more details about that section). Here is a sample configuration:\\n```\\npipelines:\\n  ...\\n  pull-requests:\\n    feature/*:\\n      - step:\\n          script:\\n            - mvn sonar:sonar\\n  ...\\n```\\n\\nIn order to avoid duplication between the different sections of your `bitbucket-pipelines.yml`, you can use [yaml anchors and aliases](https://confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html).\\n\"},{\"path\":\"sonarcloud/integrations/bitbucketcloud\",\"content\":\"---\\ntitle: Get started with Bitbucket Cloud\\nnav: Bitbucket Cloud\\nurl: /integrations/bitbucketcloud/\\n---\\n\\n## Sign up and set up your first project\\n1. On the [login page](/#sonarcloud#/sessions/new), click on the \\\"Log in with Bitbucket\\\" button and connect to SonarCloud using your Bitbucket Cloud account.\\n2. Click on \\\"Analyze your code\\\" and follow the path to set up a first project\\n3. You will be asked to install the SonarCould application on your team or user account, which will allow you to \\n  choose which repositories you want to analyze.\\n\\n## Analyzing your repository\\n\\n* [With Bitbucket Pipelines](/integrations/bitbucketcloud/bitbucket-pipelines/)\\n* [With Azure Pipelines](/integrations/bitbucketcloud/azure-pipelines/), if you analyze .NET applications and want to benefit from Azure DevOps features.\\n\\n## Quality widget\\n\\nSonarCloud can provide a widget that shows the current quality metrics of your project directly on the repository's Overview page on Bitbucket Cloud.\\n\\nIf you want to see this widget, you can go to the \\\"Settings > SonarCloud\\\" page of your repository and check \\\"Show repository overview widget\\\".\\n\\n## FAQ\\n\\n**Do you have sample projects on Bitbucket Cloud?**\\nYou can take a look at these various projects: [Sample projects analyzed on SonarCloud](https://bitbucket.org/account/user/sonarsource/projects/SAMPLES)\\n\\n**I don't see the widget with quality information whereas I configured everything**\\nMake sure that your browser is not using some extensions like AdBlocks. They tend to break the integration of third-party applications in BitBucket Cloud.\\n\\n## Upcoming features and improvements\\n\\nThere are various areas in which you can expect new features and improvements:\\n\\n* Pull request decoration with inline comments to show the issues within the PR\\n* Better and easier team onboarding\\n* Automatic analysis (i.e. no need to configure anything from Pipelines)\\n\"},{\"path\":\"sonarcloud/integrations/github\",\"content\":\"---\\ntitle: Get started with GitHub.com\\nnav: GitHub\\nurl: /integrations/github/\\n---\\n\\n## Sign up and set up your first project\\n\\n1. On the [login page](/#sonarcloud#/sessions/new), click on the \\\"Log in with GitHub\\\" button and connect to SonarCloud using your GitHub account.\\n2. Click on \\\"Analyze your code\\\" and follow the path to set up a first project\\n3. You will be asked to install the SonarCould application on your organization, which will allow you to choose which\\n   repository you want to analyze.\\n\\n## Trigger analyses\\n\\nFor GitHub repositories, there are 2 ways to have your code analyzed:\\n\\n### ... with AutoScan\\n\\nWith AutoScan, SonarCloud will autonomously pull your code and scan your default branch and your pull requests.\\nPlease read the [\\\"AutoScan Beta Feature\\\"](/autoscan/) documentation page to get the details.\\n\\n![](/images/exclamation.svg) This is currently a Beta feature which does not work for all languages and comes with limitations. \\n\\n### ... using your CI service\\n\\nIf AutoScan does not make sense yet for your repository, you need to configure your CI service to trigger the analysis.\\n\\n**If you are using Travis CI**, the SonarCloud Travis Add-on will make it easier to activate analyses:\\n\\n* Read the [guide to integrate with Travis CI](https://docs.travis-ci.com/user/sonarcloud/)\\n* Check out the [various sample projects](https://github.com/SonarSource/sonarcloud_examples) (Java, TypeScript, C/C++, Go, ... etc) that are analyzed on SonarCloud on a frequent basis\\n\\n**If you are using another CI service**, you will need to read:\\n\\n* the [\\\"Analyzing Source Code\\\" overview page](/analysis/overview/)\\n* the [\\\"Branches\\\" overview page](/branches/overview/)\\n* the [\\\"Pull Request Analysis\\\" page](/analysis/pull-request/)\\n\\nHere is an example of configuration for pull requests when you are not on Travis CI and you need to configure your CI jobs:\\n```\\nsonar.pullrequest.base=master\\nsonar.pullrequest.branch=feature/my-new-feature\\nsonar.pullrequest.key=5\\nsonar.pullrequest.provider=GitHub\\nsonar.pullrequest.github.repository=my-company/my-repo\\n```\\n\\n[[info]]\\n| Pull request decoration works only if [the SonarCloud application](https://github.com/apps/sonarcloud) is installed on your GitHub organization(s) and configured to have acccess to the repositories.\\n\"},{\"path\":\"sonarcloud/integrations/vsts\",\"content\":\"---\\ntitle: Get started with Azure DevOps Services\\nnav: Azure DevOps Services\\nurl: /integrations/vsts/\\n---\\n\\n[[info]]\\n| This page is about Azure DevOps Services, formerly known as VSTS.\\n\\nYou can connect to SonarCloud using your Azure DevOps account. On the [login page](/#sonarcloud#/sessions/new), just click on the \\\"Log in with Azure DevOps\\\" button.\\n\\n[[warning]]\\n| ![Warning](/images/exclamation.svg) Only work and school Azure DevOps accounts are authorized to login on SonarCloud.\\n\\n## Install the SonarCloud Azure DevOps extension\\n\\nThe SonarCloud Azure DevOps extension brings everything you need to have your projects analyzed on SonarCloud \\nvery quickly:\\n* Integration with the Build definitions to easily trigger the analysis\\n* Pull request decoration to get quick feedback on the code changes\\n* Widget to have the overview quality of your projects inside Azure DevOps dashboards\\n\\nInstall [SonarCloud extension for Azure DevOps](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud)by clicking on the \\\"Get it free\\\" button.\\n\\nThen follow the comprehensive [Microsoft lab on how to integrate Azure DevOps with SonarCloud](https://aka.ms/sonarcloudlab).\\n\\n## Quality Gate Status widget \\n\\nYou can monitor the Quality Gate status of your projects directly in your Azure DevOps dashboard. Follow these simple steps to configure your widget:\\n\\n1. Once the Azure DevOps extension is installed and your project has been successfully analyzed, go to one of your Azure DevOps dashboards (or create one). Click on the pen icon in the bottom right corner of the screen, and then on the \\\"+\\\" icon to add a widget. \\n\\n2. In the list of widgets, select the \\\"Code Quality\\\" one and then click on the \\\"Add\\\" button. An empty widget is added to your dashboard. \\n\\n3. You can then click on the widget's cogwheel icon to configure it.\\n\\n    * **For public projects:** you can simply select your project from the dropdown. A searchbar inside the dropdown will help you find it easily. Just select it and click on the \\\"Save\\\" button.\\n\\n    * **For private projects:** you'll have to log in using the links provided under the dropdown. Once logged in, your private projects will appear in the dropdown. Select the one you are interested in, and click on \\\"Save\\\".\\n\\n## FAQ\\n\\n1. Which kind of analysis scenario are supported for .Net projects ?\\n\\n    * Using Sonar Scanner for MSBuild, you can build multiple .Net projects / solutions between the \\\"Prepare Analysis on SonarCloud\\\" and \\\"Run Analysis\\\" tasks. You will have full support of Issues and Code Coverage on both branches and PR Analysis. Other kind of scenarios are not yet supported.\"},{\"path\":\"sonarcloud/organizations/index\",\"content\":\"---\\ntitle: Organizations\\nurl: /organizations/overview/\\n---\\n\\n## Overview\\n\\nAn organization is a space where a team or a whole company can collaborate across many projects.\\n\\nAn organization consists of:\\n\\n- Projects, on which users collaborate\\n- [Members](/organizations/manage-team/), who can have different permissions on the projects\\n- [Quality Profiles](/instance-administration/quality-profiles/) and [Quality Gates](/user-guide/quality-gates/), which can be customized and shared accross projects\\n\\nOrganizations can be on:\\n\\n- **Free plan**. This is the default plan. Every project in an organization on the free plan is public.\\n- **Paid plan**. This plan unlocks the ability to have private projects. Go to the \\\"Billing\\\" page of your organization to upgrade it to the paid plan.\\n\\nDepending on which plan the organization is in, its [visibility](/organizations/organization-visibility/) will change.\\n\\nYou can create organizations from the top right menu \\\"+ > Create new organization\\\"\\n\\n## FAQ\\n\\n### How to bind an existing organization to GitHub or Bitbucket Cloud?\\n\\nYou might notice the following warning message on your pull requests inside SonarCloud:\\n\\n    The SonarCloud GitHub application is installed on your GitHub organization, but the\\n    SonarCloud organization is not bound to it. Please read \\\"How to bind an existing\\n    organization?\\\" section in the \\\"Organizations\\\" documentation page to fix your setup.\\n\\nThis means that your SonarCloud organization is not bound to GitHub or Bitbucket Cloud whereas you had already installed the SonarCloud application (probably to annotate pull requests). To fix your setup, here are the steps to follow.\\n\\n**For GitHub:**\\n\\n1. Click your profile picture in the top right menu and select the organization.\\n2. In the organization menu, click \\\"Administration > Organization settings\\\"\\n3. Click on \\\"Choose an organization on GitHub\\\".\\n4. On GitHub page, you should see a list of organization you are admin of. The organization you want to bind is marked as already configured. Click on it.\\n5. Click on \\\"Uninstall\\\" at the bottom of the page.\\n6. Go back to SonarCloud, to the settings page of your organization, and click on \\\"Choose an organization on GitHub\\\" again. The organization you want to bind should not be marked as configured anymore. Click on it, and then on \\\"Install\\\". After the installation, you will be redirected to SonarCloud.\\n7. You are all set! You should see a GitHub icon close to the name of your organization at the top of the page.\\n\\n**For Bitbucket Cloud:**\\n\\n1. Click your profile picture in the top right menu and select the organization.\\n2. In the organization menu, click \\\"Administration > Organization settings\\\"\\n3. Click on \\\"Choose a team on Bitbucket\\\".\\n4. On Bitbucket Cloud page, select the name of the team you want to bind and click on \\\"Grant access\\\". You will then be redirected to SonarCloud.\\n   [[warning]]\\n   | If you get a 405 error page from Bitbucket Cloud at this stage, this means that you did not approve a recent scope change - for which you should have received an email from Bitbucket Cloud. The easiest way to get around this is to uninstall the SonarCloud application in your Bitbucket Cloud \\\"Install apps\\\" settings, and reinstall it.\\n5. You are all set! You should see a Bitbucket Cloud icon close to the name of your organization at the top of the page.\\n\\n### How to transfer ownership of an organization?\\n\\nYou may want to transfer ownership of you organization when you want to delete your account, or when you are leaving a team or company.  \\nYou can manage your organization members permissions in: \\\"Administration > Permissions\\\" and [grant \\\"Administer Organization\\\" permission](/organizations/manage-team/#granting-permissions) to another member.\\n\\n### How to delete an organization?\\n\\nYou can delete your organization in: \\\"Administration > Organization Settings > Delete Organization\\\".\\n\"},{\"path\":\"sonarcloud/organizations/manage-team\",\"content\":\"---\\ntitle: Manage a Team\\nurl: /organizations/manage-team/\\n---\\n\\nMembers can collaborate on the projects in the organizations to which they belong. Depending on their permisssions within the organization, members can:\\n* Analyze projects\\n* Manage project settings (permissions, visibility, quality profiles, ...)\\n* Update issues\\n* Manage quality gates and quality profiles\\n* Administer the organization itself\\n\\nMembers are managed on the \\\"Members\\\" page of the organization. Only organization administrators can manage members. \\n\\n## Managing Members Manually\\nMembers are managed manually when synchronization is not available (for Bitbucket Cloud or Azure Devops for example) or when synchronization is deactivated.\\n\\n### Adding Members\\nYou can add members to an organization using the \\\"Add a member\\\" button. Administrators can search manually for SonarCloud users and add them as members.\\n\\n## Managing Members in GitHub\\nFor organizations that are bound to GitHub, members can be synchronized with GitHub organizations or managed manually. \\n\\nNote that in all cases, members should have a SonarCloud account before being synchronized with GitHub or added manually.\\n\\n### Synchronizing Members with your GitHub Organization\\nWhen [importing](/organizations/overview/) a GitHub organization into SonarCloud, members are automatically synchronized with your GitHub organization.  \\nThis means that each member of your GitHub organization who has a SonarCloud account will be automatically added to the SonarCloud organization, \\nand will have direct access in SonarCloud to the organizations they've been added to. \\n\\nYou can synchronize a bound organization with manually managed members using the \\\"Configure synchronization\\\" button. \\nDuring synchronization, members of the SonarCloud organization who are not part of the GitHub organization are removed from the SonarCloud \\norganization and members of the GitHub organization who are not members of the SonarCloud organization are added to the SonarCloud organization.\\n\\nAfter creating an organization or activating synchronization, SonarCloud users that are added or removed from the GitHub organization are automatically added or removed from \\nthe SonarCloud organization. It's not possible to manually add or remove a member when synchronization is activated.\\n\\nPermissions are not synchronized and must be managed manually (see below).\\n\\n### Deactivating Member Synchronization\\nYou can deactivate member synchronization using the \\\"Configure synchronization\\\" button. \\nWhen you deactivate member synchronization, no members will be added or removed automatically.\\nAfter deactivating synchronization, members will be managed manually.\\n\\n\\n## Granting permissions\\nOnce users are added or synchronized, organization administrators can grant them permissions to perform specific operations in the organization. It is up to the \\nadministrators to make sure each member gets the relevant permissions.\\n\\nTo avoid having to manage individual permissions at a project level, organization admins can create groups to manage permissions \\nand add new users to those groups on the \\\"Members\\\" page.\\n\\n## Future evolutions\\nFuture versions of SonarCloud will make this onboarding process easier for BitBucket Cloud, Azure Devops, and others. \\nUsers' permissions will be retrieved from systems and mapped to SonarCloud permissions on a best-effort basis.\"},{\"path\":\"sonarcloud/organizations/organization-visibility\",\"content\":\"---\\ntitle: Organization Visibility\\nurl: /organizations/organization-visibility/\\n---\\n\\n## Free plan organization\\n\\nFree plan organizations are public. This means that almost everything is visible to any user - even anonymous ones:\\n\\n* Projects\\n* Issues\\n* Quality Profiles\\n* Quality Gates\\n* Rules\\n\\nThe following pages are restricted:\\n\\n* Members: to members of the organization\\n* Administration pages: to administrators of the organization\\n\\n## Paid plan organization\\n\\nPaid plan organizations are private. This means that nothing is visible to non-members of the organization. In other words, you need to be a member of the organization to see:\\n\\n* Projects - which are private by default\\n* Issues\\n* Quality Profiles\\n* Quality Gates\\n* Rules\\n* Members\\n\\nThe administration pages are obviously also restricted to administrators of the organization.\\n\\n### Want to make one project public?\\n\\nIf you are on a paid plan organization but want to make a project public (for instance because you are developing an open-source library), this is possible. You will have to manually make the project public in its **Administration > Permissions** page. Once done, you will notice the \\\"Public\\\" badge on the project.\\n\\nAs soon as you have one public project, the following pages will become visible to any user:\\n\\n* Projects\\n* Issues\\n* Rules\\n\\n\\\"Quality Profiles\\\" and \\\"Quality Gates\\\" pages will remain restricted to members only - since you might not want to unveil some information used by your private projects.\\n\"},{\"path\":\"sonarcloud/privacy\",\"content\":\"---\\ntitle: Privacy Policy\\nurl: /privacy/\\n---\\n\\nThe privacy policy specifies how data collected on this website is used. Thank you for visiting our website and your interest in our services and products. As the protection of your personal data is an important concern for us, we will explain below what information we collect during your visit to our website, as they are processed and whether or how these may be used.\\n\\n## PERSONAL DATA\\n\\nPersonal information is data about personal or material circumstances of an identified or identifiable natural person. This includes information such as your first and last name, your postal or residential address, telephone numbers and date of birth. Information that can not be directly related to your real identity – such as your favorite websites or the number of users of a page – are not considered as personal data.\\n\\n## COLLECTION AND PROCESSING OF PERSONAL DATA\\n\\nAs the operator and creator of the website, we do not store personal data itself automatically. If you go to our website, the provider – where the web server is hosted – may temporarily store data for the purpose of system security such as the connection of the computer, the web pages you visit, the date and duration of the visit, data about the used browser software and operating system and the web page from which you visit us. In addition to that, personal information such as your name, address, phone number or e-mail will only be stored, if you have provided this information voluntarily, eg. as part of a registration, a survey, a contest, to carry out an order or contract or an information request.\\n\\n## USE AND DISCLOSURE OF PERSONAL DATA\\n\\nPersonal data you provided may be used solely for the purpose of technical website administration and to fulfill your wishes and requirements, thus primarily to processing the order with you or to respond to your request. Only if you have previously given your consent or – if stipulated by legal regulations – you entered no objection, we use this data for product surveys and marketing purposes. We don’t share, sell or transfer your personal data to third parties, unless this is necessary for the purpose of the contract or unless you have explicitly consented. For example it may be necessary, that in case of an product order we share your address and order with our suppliers.\\n\\n## USE OF WEB ANALYSIS SOFTWARE\\n\\nTo improve the structure and the data we offer on our website, we might use open source or proprietary web analysis software. Our evaluations will be based on summary or averaged information amalgamated for the large numbers of people visiting the vebsite. The data provided by won’t be matched with any individual’s data from other sources.\\n\\nData collected might include IP, time and duration of the visit, what pages are visited, used browser and add-ons/plugins, search-engines and referrer. While statistic tools might use a “cookie” to distinguish between individual visitors, the collected data doesn’t allow to identify individuals.\\n\\n## INFORMATION USED DURING AUTHENTICATION\\n\\nWe use the following information for authentication with GitHub / Bitbucket / Azure DevOps.\\n\\n### GitHub\\n* ID\\n* Login\\n* Name\\n* Email\\n* List of organizations the user is member of\\n\\nFor more information:\\n* https://developer.github.com/v3/users/#get-the-authenticated-user\\n* https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\\n* https://developer.github.com/v3/orgs/#list-your-organizations\\n\\n### Bitbucket\\n* UUID\\n* Username\\n* Display name\\n* Email\\n* Is email defined as primary\\n\\nFor more information:\\n* https://developer.atlassian.com/bitbucket/api/2/reference/resource/user\\n* https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails\\n\\n### Azure DevOps\\n* Tenant ID\\n* Object ID\\n* Display name\\n* User Principal Name\\n* Email\\n\\nFor more information:\\n* https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0\\n\\n## SECURITY\\n\\nWe take all the necessary technical and organisational security measures to protect your personal data from loss and misuse. Your data is stored in a secure operating environment that is not accessible to the public. If you communicate with us via e-mail, please note that the confidentiality of the information is not guaranteed. The contents of e-mails can be intercepted by third parties. In case of doubt we therefore recommend to send confidential information only by snail mail.\\n\\n## RIGHT OF ACCESS TO PERSONAL DATA\\n\\nUpon written request you will be informed by us what information we stored about you (such as name or address).\\n\\n## CONTACT\\n\\nIf you have questions regarding the processing of personal data or in case of requests for information, suggestions or complaints, please [contact us](/#sonarcloud#/about/contact) directly.\\n\"},{\"path\":\"sonarcloud/security\",\"content\":\"---\\ntitle: Security Statement\\nurl: /security/\\n---\\n\\nWe know that your code is very important to you and your business. We also know that no one wants proven bugs or vulnerabilities found on their source code to be unveiled to third-parties. This is why we take security extremely seriously.\\n\\n## Hosting\\n\\nSonarCloud runs primarily off the AWS Frankfurt region. It also uses marginally services located in the AWS Ireland region when they are not available in Frankfurt.\\n\\n## System security\\n\\nSonarCloud uses its own Virtual Private Cloud (AWS VPC). Accesses to the infrastructure are restricted through firewalls, allowing accesses from SonarSource networks only. Secure protocols are required for accesses and SSL keys are used for authentication. Access to the infrastructure, inclusive of storage, is restricted to the Technology Operations team.\\n\\n\\n## Data security\\n\\nAt the infrastructure level, access to data is controlled by virtue of being hosted in network zones which only the Technology Operations have access to. \\n\\nTo insure data availability, the SonarCloud database is replicated in quasi real time between 2 availability zones both within the Frankfurt region. In addition, the database is fully backed up every day with a 7 days retention. \\n\\nAt the software level, SonarCloud ensures private source code is accessible to organization members only, in addition to SonarSource Technology Operations team for support purposes only.\\n\\n\\n\\n## Software security\\n\\nSonarCloud UI and APIs regularly pass penetration testing conducted by a an external company, specialized in cyber and application security, certified in accordance to ISO-27001 and which is also member of the OWASP.\\n\\nIn case you find a vulnerability, please follow our [Responsible Vulnerability Disclosure process](https://community.sonarsource.com/t/responsible-vulnerability-disclosure/9317) to report it to our Security team.\\n\\n## Communications\\n\\nAll communications are done over TLS and support TLS 1.2:\\n* Navigating in the Web application\\n* Using WS APIs\\n* Running analysis (by the scanners) from CI services and pushing analysis reports to SonarCloud\\n\\n## SonarCloud Webhooks \\n\\nYou can use secrets to secure webhooks and ensure they are coming from SonarCloud (see the \\\"Securing your webhooks\\\" section of the [Webhooks](/project-administration/webhooks/#securing-your-webhooks) page for more information). \\n\\n\\n## Authentication\\n\\nPrimary authentication on the system is available through the SonarCloud GitHub application, through OAuth authentication with Bitbucket Cloud and Microsoft Azure DevOps. As a consequence, users don’t have a password on SonarCloud, and are as protected as what they expect (especially with 2FA activated on those systems). \\n \\nFor WS API calls or source code analysis triggered from CI services, only revocable user tokens are accepted.\\n\\n## Payment\\n\\nWhen you subscribe to the paid plan on SonarCloud, your credit card information never transit through our system nor it gets stored on the server. It's handed off to [Braintree Payment Solutions](https://www.braintreepayments.com), a company dedicated to storing your sensitive data on [PCI-Compliant](http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard) servers.\\n\"},{\"path\":\"sonarcloud/sonarcloud-pricing\",\"content\":\"---\\ntitle: Pricing\\nurl: /sonarcloud-pricing/\\n---\\n\\nSubscribing to a paid plan on SonarCloud allows you to analyze unlimited private projects, to know more about all the advantages of a paid plan check our [pricing page](/#sonarcloud#/about/pricing).\\n\\n## How do I activate the paid plan?\\n\\nYou can activate the paid plan on the **Administration > Billing** page of your organization.\\n\\n## How do I get invoices?\\n\\nYou can download PDF invoices for every payment from the **Administration > Billing** page of your organization.\\n\\nIf you want to get invoices by email, go to **Administration > Billing > Edit billing info** and check \\\"Send the monthly receipt to this email\\\".\\n\"},{\"path\":\"sonarcloud/supported-languages\",\"content\":\"---\\ntitle: Supported languages\\nurl: /analysis/supported-languages/\\n---\\n\\nHere is the list of all the languages currently supported in SonarCloud :\\n\\n* [ABAP](https://redirect.sonarsource.com/plugins/abap.html)\\n* [Apex](https://redirect.sonarsource.com/plugins/apex.html)\\n* [C](https://redirect.sonarsource.com/plugins/cpp.html)\\n* [C++](https://redirect.sonarsource.com/plugins/cpp.html)\\n* [C#](https://redirect.sonarsource.com/plugins/csharp.html)\\n* [Objective-C](https://redirect.sonarsource.com/plugins/objectivec.html)\\n* [COBOL](https://redirect.sonarsource.com/plugins/cobol.html)\\n* [CSS](https://redirect.sonarsource.com/plugins/css.html)\\n* [Flex](https://redirect.sonarsource.com/plugins/flex.html)\\n* [Go](https://redirect.sonarsource.com/plugins/go.html)\\n* [HTML](https://redirect.sonarsource.com/plugins/web.html)\\n* [Java](https://redirect.sonarsource.com/plugins/java.html)\\n* [JavaScript](https://redirect.sonarsource.com/plugins/javascript.html)\\n* [Kotlin](https://redirect.sonarsource.com/plugins/kotlin.html)\\n* [PHP](https://redirect.sonarsource.com/plugins/php.html)\\n* [PL/SQL](https://redirect.sonarsource.com/plugins/plsql.html)\\n* [Python](https://redirect.sonarsource.com/plugins/python.html)\\n* [Ruby](https://redirect.sonarsource.com/plugins/ruby.html)\\n* [Scala](https://redirect.sonarsource.com/plugins/scala.html)\\n* [Swift](https://redirect.sonarsource.com/plugins/swift.html)\\n* [TypeScript](https://redirect.sonarsource.com/plugins/typescript.html)\\n* [T-SQL](https://redirect.sonarsource.com/plugins/tsql.html)\\n* [Visual Basic .NET](https://redirect.sonarsource.com/plugins/vbnet.html)\\n* [XML](https://redirect.sonarsource.com/plugins/xml.html)\\n\"},{\"path\":\"user-guide/activity-history\",\"content\":\"---\\ntitle: Activity and History\\nurl: /user-guide/activity-history/\\n---\\n\\nThe Project Activity page offers a comprehensive list of the analyses on file for a project (subject to [Housekeeping](/instance-administration/housekeeping/)), and the ability to see the evolution of project measures over time.\\n\\nGraphs on the activity page help you understand the evolution of up to three measures of your choice against each other. Graph mouseovers show the measure values and events associated with particular analyses.\\n\\n## Events\\nThere are four types of events:\\n\\n* Quality Gate - the status of the [quality gate](/user-guide/quality-gates/) changed.\\n* Profile - the [quality profile](/instance-administration/quality-profiles/) used to analyze the project changed - either the profile was edited, or a different profile was used to analyze the project.\\n* Version - the project's version changed.\\n* Other - an event was manually created on a snapshot. See [Managing History](/project-administration/managing-project-history/)\\n\\nEvents are shown on the [project front page](/user-guide/project-page/) and in the project Activity page. \\n\"},{\"path\":\"user-guide/applications\",\"content\":\"---\\ntitle: Applications\\nurl: /user-guide/applications/\\n---\\n\\n*Applications are available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/).*\\n\\n## Using Applications\\n\\nAn Application is an aggregation of projects into a synthetic project. Assume you have a set of projects which has been split for technical reasons, but which shares a lifecycle; they interact directly in production and are always released together. With an Application, they can be treated as a single entity in {instance} with a unified Project Homepage, Issues list, Measures space, and most importantly: Quality Gate.\\n\\n### Applications vs. Portfolios\\n\\nApplications and Portfolios are both aggregations of projects, but they have different goals and therefore different presentations. A Portfolio is designed to be a very high-level, executive overview that shows how a package of projects that may only be tangentially related are doing quality-wise, and what the trends are. Applications allow you to see your set of projects as a larger, overall meta-project. For instance, because all the projects in an application ship together, if one of them isn't releasable then none of them are, and an Application's consolidated Quality Gate gives you an immediate summary of what must be fixed across all projects in order to allow you to release the set.\\n\\n## Application Setup\\n\\nApplications are created and edited in the global Portfolio administration interface: **Administration > Configuration > Portfolios**. For more, see [Configuring Portfolios and Applications](/project-administration/configuring-portfolios-and-applications/). Applications must be created initially by a user with global administration rights, but after set-up, administration of an individual Application can be delegated to other users.\\n\\n### Populating Application Data\\n\\nAn Application is automatically re-calculated after each analysis of one of its projects. If you want immediate (re)calculation, a user with administration rights on the Application can use the **Recompute** button in the Application-level **Administration > Edit Definition** interface. The global Portfolio administration interface: **Administration > Configuration > Portfolios** offers the ability to queue re-computation of all Applications and Portfolios at once.\\n\\n## Applications and Branch Analysis\\n\\nLong-lived Branches are available for applications. They allow you to aggregate long-lived branches from the projects in an application.\\n\\nOnce an Application has been set up, anyone with administration rights on the Application can manually create a new branch in the **Administration > Edit Definition** interface. Branches can also be managed from the global **Administration > Configuration > Portfolios** interface. For each Application branch you can choose which project branch should be included, or whether the project should be represented in the branch at all.\\n\"},{\"path\":\"user-guide/built-in-rule-tags\",\"content\":\"---\\ntitle: Built-in Rule Tags\\nurl: /user-guide/built-in-rule-tags/\\n---\\nTags are a way to categorize rules and issues. Issues inherit the tags on the rules that raised them. Some tags are language-specific, but many more appear across languages. Users can add tags to rules and issues, but most rules have some tags out of the box. Here is a non-comprehensive list of what some of those built-in tags mean:\\n\\n*NOTE : Links below to [rules.sonarsource.com](https://rules.sonarsource.com) will be initially filtered for Java language rules*\\n\\n* [brain-overload](https://rules.sonarsource.com/java/tag/brain-overload) - there is too much to keep in your head at one time\\n* [bad-practice](https://rules.sonarsource.com/java/tag/bad-practice) - the code likely works as designed, but the way it was designed is widely recognized as being a bad idea.\\n* [cert](https://rules.sonarsource.com/java/tag/cert) - relates to a rule in a [CERT](https://www.securecoding.cert.org/confluence/x/BgE) standard. There are currently three CERT standards: [C](https://www.securecoding.cert.org/confluence/x/HQE), [C++](https://www.securecoding.cert.org/confluence/x/fQI), and [Java](https://www.securecoding.cert.org/confluence/x/Ux). Many of these rules are not language-specific, but are good programming practices. That's why you'll see this tag on non-C/C++, Java rules.\\n* [clumsy](https://rules.sonarsource.com/java/tag/clumsy) - extra steps are used to accomplish something that could be done more clearly and concisely. (E.G. calling .toString() on a String).\\n* [confusing](https://rules.sonarsource.com/java/tag/confusing) - will take maintainers longer to understand than is really justified by what the code actually does\\n* [convention](https://rules.sonarsource.com/java/tag/convention) - coding convention - typically formatting, naming, whitespace...\\n* [cwe](https://rules.sonarsource.com/java/tag/cwe) - relates to a rule in the [Common Weakness Enumeration](http://cwe.mitre.org/). For more on CWE and on security-related rules in general, see [Security-related rules](/user-guide/security-rules/).\\n* [design](https://rules.sonarsource.com/java/tag/design) - there is something questionable about the design of the code\\n* [lock-in](https://rules.sonarsource.com/java/tag/lock-in) - environment-specific features are used\\n* [misra](https://rules.sonarsource.com/java/tag/misra) - relates to a rule in one of the [MISRA](http://www.misra.org.uk/) standards. While the MISRA rules are primarily about C and C++, many of them are not language-specific (E.G. don't use a float as a loop counter) but are simply good programming practices. That's why you'll see these tags on non-C/C++ rules.\\n* [owasp](https://rules.sonarsource.com/java/tag/owasp) - relates to a rule in the [OWASP Top Ten](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project) security standards. Note, that the OWASP Top Ten is a list of high-level vulnerabilities which translates to many, many potential rules.\\n* [pitfall](https://rules.sonarsource.com/java/tag/pitfall) - nothing is wrong yet, but something could go wrong in the future; a trap has been set for the next guy and he'll probably fall into it and screw up the code.\\n* [sans-top25](https://rules.sonarsource.com/java/tag/sans-top25) - relates to the [SANS Top 25 Coding Errors](http://www.sans.org/top25-software-errors/), which are security-related. Note that  the SANS Top 25 list is pulled directly from the CWE.\\n* [suspicious](https://rules.sonarsource.com/java/tag/suspicious) - it's not guaranteed that this is a **bug**, but it looks suspiciously like one. At the very least, the code should be re-examined & likely refactored for clarity.\\n* [unpredictable](https://rules.sonarsource.com/java/tag/unpredictable) - the code may work fine under current conditions, but may fail erratically if conditions change.\\n* [unused](https://rules.sonarsource.com/java/tag/unused) - unused code, E.G. a private variable that is never used.\\n* [user-experience](https://rules.sonarsource.com/java/tag/user-experience) - there's nothing technically wrong with your code, but it may make some or all of your users hate you.\\n\"},{\"path\":\"user-guide/concepts\",\"content\":\"---\\ntitle: Concepts\\nurl: /user-guide/concepts/\\n---\\n\\n\\n<!-- sonarqube -->\\n## Architecture\\n| Concept  | Definition                                                                            |\\n| -------- | ------------------------------------------------------------------------------------- |\\n| Analyzer | A client application that analyzes the source code to compute **snapshots**.          |\\n| Database | Stores configuration and **snapshots**                                                |\\n| Server   | Web interface that is used to browse **snapshot** data and make configuration changes | \\n\\nSee also the [SonarQube Platform Overview](/architecture/architecture-integration/).\\n<!-- /sonarqube -->\\n\\n## Quality\\n| Concept                    | Definition                                                                                                                                                                                                                                                                                                                                                                                                         |\\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\\n| Bug                        | An issue that represents something wrong in the code. If this has not broken yet, it will, and probably at the worst possible moment. This needs to be fixed. Yesterday.                                                                                                                                                                                                                                           |\\n| Code Smell                 | A maintainability-related issue in the code. Leaving it as-is means that at best maintainers will have a harder time than they should making changes to the code. At worst, they'll be so confused by the state of the code that they'll introduce additional errors as they make changes.                                                                                                                         |\\n| Cost                       | See Remediation Cost                                                                                                                                                                                                                                                                                                                                                                                               |\\n| Debt                       | See Technical Debt                                                                                                                                                                                                                                                                                                                                                                                                 |\\n| Issue                      | When a piece of code does not comply with a rule, an issue is logged on the **snapshot**. An issue can be logged on a source file or a unit test file. There are 3 types of issue: **Bugs**, **Code Smells** and **Vulnerabilities**                                                                                                                                                                    |\\n| Measure                    | The value of a **metric** for a given file or project at a given time. For example, 125 lines of code on class MyClass or density of duplicated lines of 30.5% on project myProject                                                                                                                                                                                                                                  |\\n| Metric                     | A type of measurement. Metrics can have varying values, or **measures**, over time. Examples: number of lines of code, complexity, etc. A metric may be either _qualitative_ (gives a quality indication on the component, E.G. density of duplicated lines, line coverage by tests, etc.) or _quantitative_ (does not give a quality indication on the component, E.G. number of lines of code, complexity, etc.) |\\n| New Code Period                | The period for which you're keeping a close watch on the introduction of new problems in the code. Ideally this is since the `previous_version`, but if you don't use a Maven-like versioning scheme you may need to set a relatively arbitrary time period such as 21 days or since a specific date.                                                                                                            |\\n| Quality Profile            | A set of **rules**. Each **snapshot** is based on a single quality profile. See also [Quality Profiles](/instance-administration/quality-profiles/)                                                                                                                                                                                                                                                         | \\n| Rule                | A coding standard or practice which should be followed. Not complying with coding rules leads to **Bugs**, **Vulnerabilities**, **Security Hotspots**, and **Code Smells**. Rules can check quality on code files or unit tests.                                                                                                                                                                                                                                 |\\n| Remediation Cost           | The estimated time required to fix Vulnerability and Reliability Issues.                                                                                                                                                                                                                                                                                                                                           |\\n| Snapshot                   | A set of **measures** and **issues** on a given project at a given time. A snapshot is generated for each analysis.                                                                                                                                                                                                                                                                                          |\\n| Security Hotspot           | A security-related issue highlighting a piece of code that uses a security-sensitive API (E.G. use of a weak algorithm, connection to a database, ...). Security Hotspots must be manually reviewed to determine if the APIs are being used in ways that introduce Vulnerabilities.                                                                                               |\\n| Technical Debt             | The estimated time required to fix all Maintainability Issues / code smells                                                                                                                                                                                                                                                                                                                                        |\\n| Vulnerability              | A security-related issue which represents a backdoor for attackers. See also [Security-related rules](/user-guide/security-rules/).                                                                                                                                                                                                                                                                                |\\n\"},{\"path\":\"user-guide/fixing-the-water-leak\",\"content\":\"---\\ntitle: Fixing the Water Leak\\nurl: /user-guide/fixing-the-water-leak/\\n---\\n\\n## What is the Water Leak\\n\\nImagine coming home one day to find a puddle of water on the kitchen floor. As the puddle grows, do you start mopping or do you find the leak and plug it?\\n\\nThe answer is obvious, right? You fix the leak!\\n\\nSo why do anything different with code quality? When you analyze an application with {instance} and realize that it has a lot of technical debt, your initial reaction may be to start remediating or to put together a remediation plan. This is like mopping the floor while ignoring the fact that water is still leaking.\\n\\nTypically in this remediation-first approach, a periodic code quality audit, often right before release, results in findings the developers should act on. This approach consistently fails because:\\n\\n* The code review comes too late in the process, and no stakeholder is keen to get the problems fixed; everyone wants the new version to ship.\\n* Developers typically push back on  recommendations made by an external team that doesn't know the context of the project. And, by the way, the code under review is obsolete already.\\n* There is a clear lack of ownership for code quality with this approach. Who owns quality? No one!\\n* What gets reviewed is the entire application before it goes to production and it is obviously not possible to apply the same criteria to all applications. A negotiation will happen for each project, which will drain all credibility from the process\\n\\nInstead, why not apply the same simple logic you use at home to the way you manage code quality? Fixing the leak means focusing on the “new” code, for example, code that was added or changed after the last release. Then things get much easier:\\n\\n* The [Quality Gate](/user-guide/quality-gates/) can be run every day, and passing it is achievable. There are no surprises at release time.\\n* It's pretty difficult for developers to push back on problems they introduced the previous day. Instead, they're generally happy to fix the problems while the code is still fresh.\\n* There is a clear ownership of code quality\\n* The criteria for go/no-go are consistent across applications, and are shared among teams. Indeed new code is new code, regardless of which application it is done in\\n* The cost is insignificant because it is part of the development process\\n\\nAs a bonus, the code that gets changed the most has the highest maintainability, and the code that doesn't get changed has the lowest, which makes a lot of sense. Because of the nature of software, and the fact that we keep making changes to it, the debt will naturally be reduced. Where it isn’t is where it doesn't need to be.\\n\\n## How to do it\\n\\n{instance} offers two main tools to help you find your leaks:\\n\\n* New Code metrics show the variance in your measures between the current code and a specific point you choose in its history, typically the previous version of the project. For more information, see [Setting Your New Code Period](/project-administration/new-code-period/) page for more information on setting up your New Code Period.\\n* New Code is primarily detected based on SCM \\\"blame\\\" data starting from the first analysis within your New Code Period, with fallback mechanisms when needed. See [SCM integration](/analysis/scm-integration/) for more details.\\n* [Quality Gates](/user-guide/quality-gates/) allow you to set boolean thresholds against which your code is measured. Use them with differential metrics to ensure that your code quality moves in the right direction over time.\\n\"},{\"path\":\"user-guide/issues\",\"content\":\"---\\ntitle: Issues\\nurl: /user-guide/issues/\\n---\\n\\nWhile running an analysis, {instance} raises an issue every time a piece of code breaks a coding rule. The set of coding rules is defined through the associated [quality profile](/instance-administration/quality-profiles/) for each language in the project. \\n\\n### Issue Types\\n\\nThere are three types of issues:\\n\\n1. **Bug** – A coding error that will break your code and needs to be fixed immediately.\\n1. **Vulnerability** – A point in your code that's open to attack.\\n1. **Codesmell** – A maintainability issue that makes your code confusing and difficult to maintain.\\n\\n### Issue Severity\\n\\nEach issue has one of five severities:\\n\\n1. **BLOCKER**  \\nBug with a high probability to impact the behavior of the application in production: memory leak, unclosed JDBC connection, .... The code MUST be immediately fixed.\\n1. **CRITICAL**  \\nEither a bug with a low probability to impact the behavior of the application in production or an issue which represents a security flaw: empty catch block, SQL injection, ... The code MUST be immediately reviewed. \\n1. **MAJOR**  \\nQuality flaw which can highly impact the developer productivity: uncovered piece of code, duplicated blocks, unused parameters, ...\\n1. **MINOR**  \\nQuality flaw which can slightly impact the developer productivity: lines should not be too long, \\\"switch\\\" statements should have at least 3 cases, ...\\n1. **INFO**  \\nNeither a bug nor a quality flaw, just a finding.\\n\\nIdeally, the team wouldn't introduce any new issues (any new technical debt). [SonarLint](https://sonarlint.org) can help developers because it provides the ability to perform local analyses to check their code before pushing it back to the SCM. But in real life, it's not always possible to code without any new technical debt, and sometimes it's not worth it.\\n\\nSo new issues get introduced.\\n\\n## Understanding issue context\\nSometimes, issues are self-evident once they're pointed out. For instance, if your team has agreed to a init-lower, camelCase variable naming convention, and an issue is raised on `My_variable`, you don't need a lot of context to understand the problem. But in other situations context may be essential to understanding why an issue was raised. That's why {instance} supports not just the primary issue location, where the issue message is shown, but also secondary issue locations. For instance, secondary issues locations are used to mark the pieces of code in a method which add Cognitive Complexity to a method. \\n\\nBut there are times when a simple laundry list of contributing locations isn't enough to understand an issue. For instance, when a null pointer can be dereferenced on some paths through the code, what you really need are issue flows. Each flow is a _set_ of secondary locations ordered to show the exact path through the code on which a problem can happen. And because there can be multiple paths through the code on which, for instance a resource is not released, {instance} supports multiple flows.\\n\\n## Issues lifecycle\\n### Statuses\\nAfter creation, issues flow through a lifecycle, taking one of five possible statuses:\\n\\n* **Open** - set by {instance} on new issues\\n* **Confirmed** - set manually to indicate that the issue is valid\\n* **Resolved** - set manually to indicate that the next analysis should Close the issue\\n* **Reopened** - set automatically by {instance} when a Resolved issue hasn't actually been corrected\\n* **Closed** - set automatically by {instance} for automatically created issues. \\n\\n### Resolutions\\nClosed issues will have one of two resolutions:\\n\\n* **Fixed** - set automatically when a subsequent analysis shows that the issue has been corrected or the file is no longer available (removed from the project, excluded or renamed)\\n* **Removed** - set automatically when the related rule is no longer available. The rule may not be available either because it has been removed from the Quality Profile or because the underlying plugin has been uninstalled.\\n\\nResolved issues will have one of two resolutions:\\n* **False Positive** - set manually\\n* **Won't Fix** - set manually\\n\\n### Issue Workflow \\nIssues are automatically closed (status: Closed) when:\\n* an issue (of any status) has been properly fixed => Resolution: Fixed\\n* an issue no longer exists because the related coding rule has been deactived or is no longer available (ie: plugin has been removed) => Resolution: Removed\\n\\nIssues are automatically reopened (status: Reopened) when:\\n* an issue that was manually Resolved as Fixed(but Resolution is not False positive) is shown by a subsequent analysis to still exist\\n\\n## Understanding which Issues are \\\"New\\\"\\nTo determine the creation date of an issue, an algorithm is executed during each analysis to determine whether an issue is new or existed previously. This algorithm relies on content hashes (excluding whitespace) for the line the issue is reported on. For multi-line issues, the hash of the first line is used. For each file (after detection of file renaming), the algorithm takes the base list of issues from the previous analysis, and tries to match those issues with the raw issue list reported by the new analysis. The algorithm tries to first match using the strongest evidence, and then falls back to weaker heuristics.\\n\\n* if the issue is on the same rule, with the same line number and with the same line hash (but not necessarily with the same message) > MATCH\\n* detect block move inside file, then if the issue is on the same (moved) line and on the same rule (but not necessarily with the same message) > MATCH\\n* on the same rule, with the same message and with the same line hash (but not necessarily with the same line) > MATCH\\n* on the same rule, with the same message and with the same line number (but not necessarily with the same line hash) > MATCH\\n* on the same rule and with the same line hash (but not the same message and not the same line) > MATCH\\n* is there a matching **CLOSED** issue > MATCH and Reopen\\n\\nUnmatched \\\"base\\\" issues are closed as fixed.\\n\\nUnmatched \\\"raw\\\" issues are new.\\n\\n## Understanding Issue Backdating\\nOnce an issue has been determied to be \\\"new\\\", as described above, the next question is what date to give it. For instance, what if it has existed in code for a long time, but only found in the most recent analysis because new rules were added to the profile? Should this issue be given the date of the last change on its line, or the date of the analysis where it was first raised? That is, should it be backdated? If the date of the last change to the line is available (this requires [SCM integration](/analysis/scm-integration/)) then under certain circumstances, the issue will be backdated:\\n\\n* On first analysis of a project or branch\\n* When the rule is new in the profile (a brand new rule activated or a rule that was deactivated and is now activated)\\n* When the analyzer has just been upgraded (because rule implementations could be smarter now)\\n* When the rule is external\\n\\nAs a consequence, it is possible that backdating will keep newly raised issues out of the New Code Period.\\n\\n\\n## Automatic Issue Assignment\\n### For Bug, Vulnerability and Code Smell\\nNew issues are automatically assigned during analysis to the last committer on the issue line if the committer can be correlated to a {instance} user. Note that currently, issues on any level above a file, e.g. directory / project, cannot be automatically assigned.\\n\\n### For Security Hotspot\\nIssues are automatically assigned only when the Security Hotspot is transformed into a Vulnerability through the \\\"Detect\\\" action.\\n\\n### User Correlation\\nLogin and email correlations are made automatically. I.e. if the user commits with her email address and that email address is part of her {instance} profile, then new issues raised on lines where she was the last committer will be automatically assigned to her.\\n\\nAdditional correlations can be made manually in the user's profile (see \\\"SCM accounts\\\" in Authorization for more).\\n\\n### Known Limitation\\nIf the SCM login associated with an issue is longer than 255 characters allowed for an issue author, the author will be left blank.\\n\\n## Issue edits\\n{instance}'s issues workflow can help you manage your issues. There are seven different things you can do to an issue (other than fixing it in the code!): Comment, Assign, Confirm, Change Severity, Resolve, Won't Fix, and False Positive.\\n\\nThese actions break out into three different categories. First up is the \\\"technical review\\\" category.\\n\\n### Technical Review\\nThe Confirm, False Positive, Won't Fix, Severity change, and Resolve actions all fall into this category, which presumes an initial review of an issue to verify its validity. Assume it's time to review the technical debt added in the last review period - whether that's a day, a week, or an entire sprint. You go through each new issue and do one:\\n\\n* **Confirm** - By confirming an issue, you're basically saying \\\"Yep, that's a problem.\\\" Doing so moves it out of \\\"Open\\\" status to \\\"Confirmed\\\".\\n* **False Positive** - Looking at the issue in context, you realize that for whatever reason, this issue isn't actually a problem. So you mark it False Positive and move on. Requires Administer Issues permission on the project.\\n* **Won't Fix** - Looking at the issue in context, you realize that while it's a valid issue it's not one that actually needs fixing. In other words, it represents accepted technical debt. So you mark it Won't Fix and move on. Requires Administer Issues permission on the project.\\n* **Severity change** - This is the middle ground between the first two options. Yes, it's a problem, but it's not as bad a problem as the rule's default severity makes it out to be. Or perhaps it's actually far worse. Either way, you adjust the severity of the issue to bring it in line with what you feel it deserves.  Requires Administer Issues permission on the project.\\n* **Resolve** - If you think you've fixed an open issue, you can Resolve it. If you're right, the next analysis will move it to closed status. If you're wrong, its status will go to re-opened.\\n\\nIf you tend to mark a lot of issues False Positive or Won't Fix, it means that some coding rules are not appropriate for your context. So, you can either completely deactivate them in the quality profile or use issue exclusions to narrow the focus of the rules so they are not used on specific parts (or types of object) of your application. Similarly, making a lot of severity changes should prompt you to consider updating the rule severities in your profiles.\\n\\nAs you edit issues, the related metrics (e.g. New Bugs), will update automatically, as will the Quality Gate status if it's relevant.\\n\\n### Dispositioning\\nOnce issues have been through technical review, it's time to decide who's going to deal them. By default they're assigned to the last committer on the issue line (at the time the issue is raised), but you can certainly reassign them to yourself or someone else. The assignee will receive email notification of the assignment if he signed up for notifications, and the assignment will show up everywhere the issue is displayed, including in the My Issues list in the My Account space.\\n\\n### General\\nAt any time during the lifecycle of an issue, you can log a comment on it. Comments are displayed in the issue detail in a running log. You have the ability to edit or delete the comments you made.\\n\\nYou can also edit an issue's tags. Issues inherit the tags of the rules that created them, but the tag set on an issue is fully editable. Tags can be created, added and removed at will for users with the Browse permission on the project.\\n\\nAlthough they are initially inherited from the relevant rule, the tags on an issue are not synchronized with the rule, so adding tags to a rule will not add those tags to the rule's issues. \\n\\n### Bulk Change\\nAll of these changes and more can be made to multiple issues at once using the Bulk Change option in the issues search results pane.\\n\\n\\n## Purging Closed Issues\\nBy default, Closed issues are kept for 30 days. For more details, see [Housekeeping](/instance-administration/housekeeping/).\\n\\n\"},{\"path\":\"user-guide/keyboard-shortcuts\",\"content\":\"---\\ntitle: Keyboard Shortcuts\\nurl: /user-guide/keyboard-shortcuts/\\n---\\n\\n## Global\\n\\n| Shortcut | Action          |\\n| -------- | --------------- |\\n| `s`      | open search bar |\\n| `?`      | open help       |\\n\\n## Code Page\\n\\n| Shortcut | Action                                        |\\n| -------- | --------------------------------------------- |\\n| `↑` `↓`  | select files                                  |\\n| `→`      | open file                                     |\\n| `←`      | return back to the list                       |\\n\\n## Issues Page\\n\\n| Shortcut         | Action                                        |\\n| ---------------- | --------------------------------------------- |\\n| `↑` `↓`          | navigate between issues                       |\\n| `→`              | go from the list of issues to the source code |\\n| `←`              | return back to the list                       |\\n| `alt` + `↑` `↓`  | to navigate issue locations                   |\\n| `alt` + `←` `→`  | to switch flows                               |\\n| `f`              | do an issue transition                        |\\n| `a`              | assign issue                                  |\\n| `m`              | assign issue to the current user              |\\n| `i`              | change severity of issue                      |\\n| `c`              | comment issue                                 |\\n| `ctrl` + `enter` | submit comment                                |\\n| `t`              | change tags of issue                          |\\n\\n## Measures Page\\n\\n| Shortcut | Action                                        |\\n| -------- | --------------------------------------------- |\\n| `↑` `↓`  | select files                                  |\\n| `→`      | open file                                     |\\n| `←`      | return back to the list                       |\\n\\n## Rules Page\\n\\n| Shortcut | Action                                        |\\n| -------- | --------------------------------------------- |\\n| `↑` `↓`  | navigate between rules                        |\\n| `→`      | go from the list of rules to the rule details |\\n| `←`      | return back to the list                       |\\n\"},{\"path\":\"user-guide/metric-definitions\",\"content\":\"---\\ntitle: Metric Definitions\\nurl: /user-guide/metric-definitions/\\n---\\n\\n   \\n## Complexity\\n**Complexity** (`complexity`)  \\nIt is the Cyclomatic Complexity calculated based on the number of paths through the code. Whenever the control flow of a function splits, the complexity counter gets incremented by one. Each function has a minimum complexity of 1. This calculation varies slightly by language because keywords and functionalities do.\\n\\n[[collapse]]\\n| ## Language-specific details\\n| Language | Notes\\n| ---|---\\n| ABAP | The following keywords increase the complexity by one: `AND`, `CATCH`, `CONTINUE`, `DO`, `ELSEIF`, `IF`, `LOOP`, `LOOPAT`, `OR`, `PROVIDE`, `SELECT…ENDSELECT`, `TRY`, `WHEN`, `WHILE`\\n| C/C++/Objective-C | The complexity gets incremented by one for: function definitions, `while`, `do while`, `for`, `throw` statements, `switch`, `case`, `default`, `&&` operator, `||` operator, `?` ternary operator, `catch`, `break`, `continue`, `goto`.\\n| COBOL | The following commands increase the complexity by one (except when they are used in a copybook): `ALSO`, `ALTER`, `AND`, `DEPENDING`, `END_OF_PAGE`, `ENTRY`, `EOP`, `EXCEPTION`, `EXIT`, `GOBACK`, `CONTINUE`, `IF`, `INVALID`, `OR`, `OVERFLOW`, `SIZE`, `STOP`, `TIMES`, `UNTIL`, `USE`, `VARYING`, `WHEN`, `EXEC CICS HANDLE`, `EXEC CICS LINK`, `EXEC CICS XCTL`, `EXEC CICS RETURN`\\n| Java | Keywords incrementing the complexity: `if`, `for`, `while`, `case`, `catch`, `throw`, `&&`, `||`, `?`\\n| JavaScript, PHP | Complexity is incremented by one for each: function (i.e non-abstract and non-anonymous constructors, functions, procedures or methods), `if`, short-circuit (AKA lazy) logical conjunction (`&&`), short-circuit (AKA lazy) logical disjunction (`||`), ternary conditional expressions, loop, `case` clause of a `switch` statement, `throw` and `catch` statement, `go to` statement (only for PHP)\\n| PL/I | The following keywords increase the complexity by one: `PROC`, `PROCEDURE`, `GOTO`, `GO TO`, `DO`, `IF`, `WHEN`, `|`, `!`, `|=`, `!=`, `&`, `&=`\\n| PL/SQL | The complexity gets incremented by one for: the main PL/SQL anonymous block (not inner ones), create procedure, create trigger, procedure_definition, basic loop statement, when_clause_statement (the “when” of simple_case_statement and searched_case_statement), continue_statement, cursor_for_loop_statement, continue_exit_when_clause (The “WHEN” part of the continue and exit statements), exception_handler (every individual “WHEN”), exit_statement, for_loop_statement, forall_statement, if_statement, elsif_clause, raise_statement, return_statement, while_loop_statement, and_expression (“and” reserved word used within PL/SQL expressions), or_expression (“or” reserved word used within PL/SQL expressions), when_clause_expression (the “when” of simple_case_expression and searched_case_expression)\\n| VB.NET | The complexity gets incremented by one for: method or constructor declaration (Sub, Function), `AndAlso`, `Case`, `Continue`, `End`, `Error`, `Exit`, `If`, `Loop`, `On Error`, `GoTo`, `OrElse`, `Resume`, `Stop`, `Throw`, `Try`.\\n\\n**Cognitive Complexity** (`cognitive_complexity`)  \\nHow hard it is to understand the code's control flow. See [the Cognitive Complexity White Paper](https://www.sonarsource.com/resources/white-papers/cognitive-complexity.html) for a complete description of the mathematical model applied to compute this measure.\\n\\n---\\n## Duplications\\n**Duplicated blocks** (`duplicated_blocks`)  \\nNumber of duplicated blocks of lines.\\n\\n[[collapse]]\\n| ## Language-specific details\\n| For a block of code to be considered as duplicated:\\n|\\n| Non-Java projects:  \\n| * There should be at least 100 successive and duplicated tokens.\\n| * Those tokens should be spread at least on:\\n| * 30 lines of code for COBOL\\n| * 20 lines of code for ABAP\\n| * 10 lines of code for other languages\\n|\\n|Java projects:  \\n| There should be at least 10 successive and duplicated statements whatever the number of tokens and lines. Differences in indentation and in string literals are ignored while detecting duplications.\\n \\n**Duplicated files** (`duplicated_files`)  \\nNumber of files involved in duplications.\\n\\n**Duplicated lines** (`duplicated_lines`)  \\nNumber of lines involved in duplications.\\n\\n**Duplicated lines (%)** (`duplicated_lines_density`)  \\n= `duplicated_lines` / `lines` * 100\\n\\n---\\n## Issues\\n**New issues** (`new_violations`)  \\nNumber of issues raised for the first time in the New Code period.\\n\\n**New xxx issues** (`new_xxx_violations`)  \\nNumber of issues of the specified severity raised for the first time in the New Code period, where xxx is one of: `blocker`, `critical`, `major`, `minor`, `info`.\\n\\n**Issues** (`violations`)  \\nTotal count of issues in all states.\\n\\n**xxx issues** (`xxx_violations`)  \\nTotal count of issues of the specified severity, where xxx is one of: `blocker`, `critical`, `major`, `minor`, `info`.\\n\\n**False positive issues** (`false_positive_issues`)  \\nTotal count of issues marked False Positive\\n\\n**Open issues** (`open_issues`)  \\nTotal count of issues in the Open state.\\n\\n**Confirmed issues** (`confirmed_issues`)  \\nTotal count of issues in the Confirmed state.\\n\\n**Reopened issues** (`reopened_issues`)  \\nTotal count of issues in the Reopened state\\n\\n---\\n## Maintainability\\n**Code Smells** (`code_smells`)   \\nTotal count of Code Smell issues.\\n\\n**New Code Smells** (`new_code_smells`)  \\nTotal count of Code Smell issues raised for the first time in the New Code period.\\n\\n**Maintainability Rating** (`sqale_rating`)  \\n(Formerly the SQALE rating.)\\nRating given to your project related to the value of your Technical Debt Ratio. The default Maintainability Rating grid is:\\n\\nA=0-0.05, B=0.06-0.1, C=0.11-0.20, D=0.21-0.5, E=0.51-1\\n\\nThe Maintainability Rating scale can be alternately stated by saying that if the outstanding remediation cost is:\\n\\n* <=5% of the time that has already gone into the application, the rating is A\\n* between 6 to 10% the rating is a B\\n* between 11 to 20% the rating is a C\\n* between 21 to 50% the rating is a D\\n* anything over 50% is an E\\n\\n**Technical Debt** (`sqale_index`)  \\nEffort to fix all Code Smells. The measure is stored in minutes in the database. An 8-hour day is assumed when values are shown in days.\\n\\n**Technical Debt on New Code** (`new_technical_debt`)  \\nEffort to fix all Code Smells raised for the first time in the New Code period.\\n\\n**Technical Debt Ratio** (`sqale_debt_ratio`)  \\nRatio between the cost to develop the software and the cost to fix it. The Technical Debt Ratio formula is:  \\n\\t`Remediation cost / Development cost`  \\nWhich can be restated as:  \\n\\t`Remediation cost / (Cost to develop 1 line of code * Number of lines of code)`  \\nThe value of the cost to develop a line of code is 0.06 days.\\n\\n**Technical Debt Ratio on New Code** (`new_sqale_debt_ratio`)  \\nRatio between the cost to develop the code changed in the New Code period and the cost of the issues linked to it.\\n\\n---\\n## Quality Gates\\n**Quality Gate Status** (`alert_status`)  \\nState of the Quality Gate associated to your Project. Possible values are : `ERROR`, `OK`\\nWARN value has been removed since 7.6.\\n\\n**Quality Gate Details** (`quality_gate_details`)  \\nFor all the conditions of your Quality Gate, you know which condition is failing and which is not.\\n\\n---\\n## Reliability\\n**Bugs** (`bugs`)  \\nNumber of bug issues.\\n\\n**New Bugs** (`new_bugs`)  \\nNumber of new bug issues.\\n\\n**Reliability Rating** (`reliability_rating`)  \\nA = 0 Bugs  \\nB = at least 1 Minor Bug  \\nC = at least 1 Major Bug  \\nD = at least 1 Critical Bug  \\nE = at least 1 Blocker Bug  \\n\\n**Reliability remediation effort** (`reliability_remediation_effort`)  \\nEffort to fix all bug issues. The measure is stored in minutes in the DB. An 8-hour day is assumed when values are shown in days.\\n\\n**Reliability remediation effort on new code** (`new_reliability_remediation_effort`)  \\nSame as _Reliability remediation effort_ but on the code changed in the New Code period.\\n\\n---\\n## Security\\n**Vulnerabilities** (`vulnerabilities`)  \\nNumber of vulnerability issues.\\n\\n**New Vulnerabilities** (`new_vulnerabilities`)  \\nNumber of new vulnerability issues.\\n\\n**Security Rating** (`security_rating`)  \\nA = 0 Vulnerabilities  \\nB = at least 1 Minor Vulnerability  \\nC = at least 1 Major Vulnerability  \\nD = at least 1 Critical Vulnerability  \\nE = at least 1 Blocker Vulnerability  \\n\\n**Security remediation effort** (`security_remediation_effort`)  \\nEffort to fix all vulnerability issues. The measure is stored in minutes in the DB. An 8-hour day is assumed when values are shown in days.\\n\\n**Security remediation effort on new code** (`new_security_remediation_effort`)  \\nSame as _Security remediation effort_ but on the code changed in the New Code period.\\n\\n**Security Hotspots** (`security_hotspots`)\\nNumber of Security Hotspots\\n\\n**New Security Hotspots** (`new_security_hotspots`)\\nNumber of new Security Hotspots\\n\\n**Security Review Rating** (`security_review_rating`)\\nThe ratio of the number of Security Hotspots that are in \\\"To Review\\\" or \\\"In Review\\\" status per 1K lines of code.\\n\\nA = 0–3 \\\"To Review\\\" and \\\"In Review\\\" Security Hotspots per 1K lines of code  \\nB = >3–10  \\nC = >10–15  \\nD = >15–25  \\nE = >25  \\n\\n---\\n## Size\\n**Classes** (`classes`)  \\nNumber of classes (including nested classes, interfaces, enums and annotations).\\n\\n**Comment lines** (`comment_lines`)  \\nNumber of lines containing either comment or commented-out code.\\n\\nNon-significant comment lines (empty comment lines, comment lines containing only special characters, etc.) do not increase the number of comment lines.\\n\\nThe following piece of code contains 9 comment lines:\\n```\\n/**                                    +0 => empty comment line\\n *                                     +0 => empty comment line\\n * This is my documentation            +1 => significant comment\\n * although I don't                    +1 => significant comment\\n * have much                           +1 => significant comment\\n * to say                              +1 => significant comment\\n *                                     +0 => empty comment line\\n ***************************           +0 => non-significant comment\\n *                                     +0 => empty comment line\\n * blabla...                           +1 => significant comment\\n */                                    +0 => empty comment line\\n  \\n/**                                    +0 => empty comment line\\n * public String foo() {               +1 => commented-out code\\n *   System.out.println(message);      +1 => commented-out code\\n *   return message;                   +1 => commented-out code\\n * }                                   +1 => commented-out code\\n */                                    +0 => empty comment line\\n ```\\n[[collapse]]\\n| ## Language-specific details\\n| Language | Note\\n| ---|---\\n| COBOL | Lines containing the following instructions are counted both as comments and lines of code: `AUTHOR`, `INSTALLATION`, `DATE-COMPILED`, `DATE-WRITTEN`, `SECURITY`.\\n| Java | File headers are not counted as comment lines (becuase they usually define the license).\\n\\n**Comments (%)** (`comment_lines_density`)  \\nDensity of comment lines = Comment lines / (Lines of code + Comment lines) * 100\\n\\nWith such a formula:\\n* 50% means that the number of lines of code equals the number of comment lines  \\n* 100% means that the file only contains comment lines  \\n\\n**Directories** (`directories`)  \\nNumber of directories.\\n\\n**Files** (`files`)  \\nNumber of files.\\n\\n**Lines** (`lines`)  \\nNumber of physical lines (number of carriage returns).\\n\\n**Lines of code** (`ncloc`)  \\nNumber of physical lines that contain at least one character which is neither a whitespace nor a tabulation nor part of a comment.\\n[[collapse]]\\n| ## Language-specific details\\n| Language | Note\\n| --- | ---\\n| COBOL | Generated lines of code and pre-processing instructions (`SKIP1`, `SKIP2`, `SKIP3`, `COPY`, `EJECT`, `REPLACE`) are not counted as lines of code.\\n\\n**Lines of code per language** (`ncloc_language_distribution`)  \\nNon Commenting Lines of Code Distributed By Language\\n\\n**Functions** (`functions`)  \\nNumber of functions. Depending on the language, a function is either a function or a method or a paragraph.\\n[[collapse]]\\n| ## Language-specific details\\n| Language | Note\\n| ---|---\\n| COBOL | It is the number of paragraphs.\\n| Java | Methods in anonymous classes are ignored.\\n| VB.NET | Accesors are not considered to be methods.\\n\\n**Projects** (`projects`)  \\nNumber of projects in a Portfolio.\\n\\n**Statements** (`statements`)  \\nNumber of statements.\\n\\n---\\n## Tests\\n**Condition coverage** (`branch_coverage`)  \\nOn each line of code containing some boolean expressions, the condition coverage simply answers the following question: 'Has each boolean expression been evaluated both to true and false?'. This is the density of possible conditions in flow control structures that have been followed during unit tests execution.\\n\\n`Condition coverage = (CT + CF) / (2*B)`   \\nwhere  \\n* CT = conditions that have been evaluated to 'true' at least once\\n* CF = conditions that have been evaluated to 'false' at least once\\n* B = total number of conditions\\n\\n**Condition coverage on new code** (`new_branch_coverage`)  \\nIdentical to Condition coverage but restricted to new / updated source code.\\n\\n**Condition coverage hits** (`branch_coverage_hits_data`)  \\nList of covered conditions.\\n\\n**Conditions by line** (`conditions_by_line`)  \\nNumber of conditions by line.\\n\\n**Covered conditions by line** (`covered_conditions_by_line`)  \\nNumber of covered conditions by line.\\n\\n**Coverage** (`coverage`)  \\nIt is a mix of Line coverage and Condition coverage. Its goal is to provide an even more accurate answer to the following question: How much of the source code has been covered by the unit tests?\\n\\n`Coverage = (CT + CF + LC)/(2*B + EL)`  \\nwhere  \\n* CT = conditions that have been evaluated to 'true' at least once\\n* CF = conditions that have been evaluated to 'false' at least once\\n* LC = covered lines = lines_to_cover - uncovered_lines\\n* B = total number of conditions\\n* EL = total number of executable lines (`lines_to_cover`)\\n\\n**Coverage on new code** (`new_coverage`)  \\nIdentical to Coverage but restricted to new / updated source code.\\n\\n**Line coverage** (`line_coverage`)  \\nOn a given line of code, Line coverage simply answers the following question: Has this line of code been executed during the execution of the unit tests?. It is the density of covered lines by unit tests:\\n\\n`Line coverage = LC / EL`  \\nwhere\\n* LC = covered lines (`lines_to_cover` - `uncovered_lines`)\\n* EL = total number of executable lines (`lines_to_cover`)\\n\\n**Line coverage on new code** (`new_line_coverage`)  \\nIdentical to Line coverage but restricted to new / updated source code.\\n\\n**Line coverage hits** (`coverage_line_hits_data`)  \\nList of covered lines.\\n\\n**Lines to cover** (`lines_to_cover`)  \\nNumber of lines of code which could be covered by unit tests (for example, blank lines or full comments lines are not considered as lines to cover).\\n\\n**Lines to cover on new code** (`new_lines_to_cover`)  \\nIdentical to Lines to cover but restricted to new / updated source code.\\n\\n**Skipped unit tests** (`skipped_tests`)  \\nNumber of skipped unit tests.\\n\\n**Uncovered conditions** (`uncovered_conditions`)  \\nNumber of conditions which are not covered by unit tests.\\n\\n**Uncovered conditions on new code** (`new_uncovered_conditions`)  \\nIdentical to Uncovered conditions but restricted to new / updated source code.\\n\\n**Uncovered lines** (`uncovered_lines`)  \\nNumber of lines of code which are not covered by unit tests.\\n\\n**Uncovered lines on new code** (`new_uncovered_lines`)  \\nIdentical to Uncovered lines but restricted to new / updated source code.\\n\\n**Unit tests** (`tests`)  \\nNumber of unit tests.\\n\\n**Unit tests duration** (`test_execution_time`)  \\nTime required to execute all the unit tests.\\n\\n**Unit test errors** (`test_errors`)  \\nNumber of unit tests that have failed.\\n\\n**Unit test failures** (`test_failures`)  \\nNumber of unit tests that have failed with an unexpected exception.\\n\\n**Unit test success density (%)** (`test_success_density`)  \\n`Test success density = (Unit tests - (Unit test errors + Unit test failures)) / Unit tests * 100`\\n\"},{\"path\":\"user-guide/portfolios\",\"content\":\"---\\ntitle: Portfolios\\nurl: /user-guide/portfolios/\\n---\\n\\n*Portfolios are available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/).*\\n\\n### Portfolios Home Page\\n\\nThe Portfolio Home Page is the central place for managers and tech leads to keep an eye on the Releasability of the projects under their supervision. Releasability is based on the project's quality gate: Passed is releasable and Failed is not. Each Portfolio home page offers an aggregate view of the releasability of all projects in the Portfolio.\\n\\nAt the top of the page, you can easily see whether the overall Portfolio is currently rated as releasable and if any projects in the Portfolio have failed their Quality Gate. And the Reliability, Security Vulnerabilities, Security Review, and Maintainability ratings show the overall health of the Portfolio in these three domains, along with an indicator of the worst-performing project(s) in each domain.\\n\\nFor each domain, you'll see:\\n\\n* the rating (see [Metric Definitions](/user-guide/metric-definitions/) for more details about how they are computed)\\n* an indicator of when the rating last changed\\n* an indicator of the worst-performing project(s) in the domain\\n\\n### Releasability Rating\\n\\nThe Releasability rating is the ratio of projects in the Portfolio that have a **Passed** Quality Gate:\\n\\n**A**: > 80%  \\n**B**: > 60%  \\n**C**: > 40%  \\n**D**: > 20%  \\n**E**: <= 20%  \\n\\n### Reliability, Security Vulnerabilities, Security Review, and Maintainability Ratings\\n\\nThe Reliability, Security Vulnerabilities, Security Review, and Maintainability ratings for a Portfolio are calculated as the average of the ratings for all projects included in the Portfolio. \\n\\nSonarQube converts each project's letter rating to a number (see conversion table below), calculates an average number for the projects in the portfolio, and converts that average to a letter rating. Averages ending with .5 are rounded up resulting in the \\\"lower\\\" of the two possible ratings, so an average of 2.5 would be rounded up to 3 and result in a \\\"C\\\" rating).\\n\\nThis gives an \\\"problem density\\\" measure on the four axes of Reliability, Security Vulnerabilities, Security Review, and Maintainability for your Portfolio.\\n\\nRating conversion:\\n\\n**E**: 5  \\n**D**: 4  \\n**C**: 3  \\n**B**: 2  \\n**A**: 1  \\n\\n*Note: the Portfolio Home Page is also available at Sub-Portfolio level*\\n\\n### Portfolio PDF Report\\n\\nOn a Portfolio Home Page, you can download a PDF overview of the Portfolio by selecting **Download as PDF** from the \\\"Portfolio PDF Report\\\" dropdown menu in the upper-right corner. This is really convenient, for example, if you're going into a meeting where you may not have access to your SonarQube instance.\\n\\nYou can subscribe to receive a PDF by email by selecting **Subscribe** from the \\\"Portfolio PDF Report\\\" dropdown. You can set the frequency of the report at the portfolio and global levels to **daily**, **weekly**, or **monthly**. The default frequency is monthly.\\n\\n**Note:** You will only receive the PDF if the Portfolio is computed.\\n\\nPortfolios are created and edited in the global Portfolio administration interface: **Administration > Configuration > Portfolios**. For more information, see [Configuring Portfolios and Applications](/project-administration/configuring-portfolios-and-applications/).\\n\"},{\"path\":\"user-guide/project-page\",\"content\":\"---\\ntitle: Project Page\\nurl: /user-guide/project-page/\\n---\\n\\n\\nThe Project Hompepage is the entry point of any project showing:\\n* the releasability status of the project\\n* the current state of its quality\\n* the quality of what has been produced since the beginning of its [New Code Period](/user-guide/fixing-the-water-leak/).\\n \\n\\nThe Project Page answers two questions:\\n* can I release my project today?\\n* if not, what should I improve to make the project pass the Quality Gate? \\n\\n## Can I release today?\\n\\nSince the [Quality Gate](/user-guide/quality-gates/) is your most powerful tool to enforce your quality policy, the page starts with the project's current Quality Gate status. If the project passes, a simple, green all-clear is shown.\\n\\nIf not, details and drill-downs are immediately available to quickly identify what went wrong, with a section for each error condition showing what the current project value is and what it should be. As usual, you'll be able to click through on current values to get to drilldowns.\\n\\n## What should I fix first?\\nBecause the best way to improve a project's quality is to catch and fix new problems before they become entrenched, the first view of a project is centered around the New Code Period, which is highlighted in yellow on the right of the project homepage. The project space page shows a high-level summary of critical metrics, both current values and their New Code Period values.\\n\\nJust below the Quality Gate information, you have the numbers of old and new Issues in the Reliability and Security domains and then the Maintainability domain. Clicking on any figure on the page will take you to a detailed view, either in the Measures Page or the Issues Page.\\n\\nThe most important thing a developer must do is to ensure the new Issues in the yellow part of the screen are acknowledged, reviewed and fixed and to make sure that new code is covered by tests to help prevent future regressions. Regardless of how many Issues were introduced in the past or how little test coverage there is overall, a focus on the newly added Issues will ensure that the situation won't degrade versus the version you previously released in production.\\n\\nSo, which issues should you go after first: Bugs, Vulnerabilities or Code Smells? It depends, because the answer is dependent on the nature of your Issues. Let's say you have issues for a block of code that is duplicated 5 times, and inside this duplicated block of code, you have 3 Bugs and 5 Security Issues. The best approach is probably to fix the duplication first and then resolve the Bugs and Vulnerabilities in the newly centralized location, rather than fixing them 5 times.\\n\\nThat's why you need to review your new Issues before jumping into resolving them. \\n\\n## How can I ...\\n### How can I see project measures at a lower level?\\nThe project-level **Measures** menu item takes you to a dedicated sub-space where you see all project measures. Choose a measure for more details. Both list and tree views are available for each measure, and treemaps are available for percentages and ratings.\\n\\n### How can I see all the issues in a project?\\nThe project-level **Issues** menu item takes you to a project-specific Issues page, where you can perform all the same actions you can at the higher level.\\nOn this page, you can easily narrow the list to the New Issues introduced during the New Code Period, by selecting `New Code` in **Creation Date** facet.\\n\\n### How can I see the project structure and code?\\nThe project-level **Code** menu item takes you to an outline of your project structure. Drill down to see files in a directory, and choose a file to see its code.\\n\\nIf your project is too large for easy exploration via drilling, the search feature on this page will help. While the global search in the main menu returns results from throughout the {instance} instance, the localized search on the code page is restricted to files and directories in the current project.\\n\\n### How can I see the project activity / history?\\nThe project-level **Activity** menu item takes you to the full list of code scans performed on your project since it was created in {instance}. By going there you can follow the evolution of the Quality Gate, see the changes of Quality Profiles and know when a given version of your code has been scanned.\\n\\n### How can I easily spot the risks in a project?\\nVisualizations allow you to compare project components and quickly spot the ones that represent the greatest risks. The **Activity** page offers several pre-defined visualizations, and you can also create Custom visualizations with the metrics of your choice.\\n\\n### How can I promote the health of my project to peers ?\\nIf your project is publicly visible, then you can further promote its status in external tools and websites using native Project Badges. The **Get project badges** button on the homepage of a public project lets you choose/fine-tune your badge and gives you the URL for it.\\n\"},{\"path\":\"user-guide/quality-gates\",\"content\":\"---\\ntitle: Quality Gates\\nurl: /user-guide/quality-gates/\\n---\\n\\n## Overview\\n\\nA quality gate is the best way to enforce a quality policy in your organization.\\nIt's there to answer ONE question: can I deliver my project to production today or not?\\n\\nIn order to answer this question, you define a set of Boolean conditions based on measure thresholds against which projects are measured. For example:\\n\\n* No new blocker issues\\n* Code coverage on new code greater than 80%\\n* Etc.\\n\\nIdeally, all projects will be verified against the same quality gate, but that's not always practical. For instance, you may find that:\\n\\n* Technological implementation differs from one application to another (you might not require the same code coverage on new code for Web or Java applications).\\n* You want to ensure stronger requirements on some of your applications (internal frameworks for example).\\n* Etc.\\n\\nWhich is why you can define as many quality gates as you wish. Quality Gates are defined and managed in the **[Quality Gates](/#sonarqube#/quality_gates)** page found in the top menu.\\n\\n## Use the Best Quality Gate Configuration\\n\\nThe quality gate \\\"Sonar way\\\" is provided by SonarSource, activated by default and considered as built-in and so read-only. It represents our view of the best way to implement the [Fixing the Water Leak](/user-guide/fixing-the-water-leak/) concept. <!-- sonarqube -->At each SonarQube release, we adjust automatically this default quality gate according to SonarQube's capabilities.<!-- /sonarqube -->\\n\\nThree metrics allow you to enforce a given Rating of Reliability, Security and Maintainability, not just overall but also on new code. These metrics are recommended and come as part of the default quality gate. We strongly advise you to adjust your own quality gates to use them to make feedback more clear to your developers looking at their quality gate on their project page.\\n\\nDon't forget also that quality gate conditions must use differential values. There is no point for example to check an absolute value such as : Number of Lines of Code is greater than 1000.\\n\\n### Recommended Quality Gate\\n\\nThe `Sonar way` Built-in quality gate is recommended for most projects. If focuses on keeping new code clean, rather than spending a lot of effort remediating old code. Out of the box, it's already set as the default profile.\\n\\n## Quality Gate Status\\n\\nThe current status is displayed prominently at the top of the Project Page:\\n\\n![Quality Gate Status](/images/quality-gate-status.jpeg)\\n\\n## Getting Notified When a Quality Gate Fails\\n\\nThanks to the notification mechanism, users can be notified when a quality gate fails. To do so, subscribe to the **New quality gate status** notification either for all projects or a set of projects you're interested in.\\n\\n## Security\\n\\nQuality Gates can be accessed by any user (even anonymous users). All users can view every aspect of a quality gate.\\n\\nTo make changes (create, edit or delete) users must be granted the **Administer Quality Profiles and Gates** permission.\\n\\nA **project administrator** can choose which quality gates his/her project is associated with. See Project Settings for more.\\n\\n## Defining Quality Gates\\n\\nTo manage quality gates, go to **[Quality Gates](/#sonarqube#/quality_gates)** (top menu bar).\\n\\nEach Quality Gate condition is a combination of:\\n\\n* measure\\n* comparison operator\\n* error value\\n\\nFor instance, a condition might be:\\n\\n* measure: Blocker issue\\n* comparison operator: >\\n* error value: 0\\n\\nWhich can be stated as: No blocker issues.\\n\"},{\"path\":\"user-guide/rules\",\"content\":\"---\\ntitle: Rules\\nurl: /user-guide/rules/\\n---\\n## Overview\\nIn {instance}, analyzers contribute rules which are executed on source code to generate issues. There are four types of rules:\\n* Code Smell (Maintainability domain)\\n* Bug (Reliability domain)\\n* Vulnerability (Security domain)\\n* Security Hotspot (Security domain)\\n\\nFor Code Smells and Bugs, zero false-positives are expected. At least this is the target so that developers don't have to wonder if a fix is required.\\n\\nFor Vulnerabilities, the target is to have more than 80% of issues be true-positives.\\n\\nSecurity Hotspot rules draw attention to code that is security-sensitive. It is expected that more than 80% of the issues will be quickly resolved as \\\"Reviewed\\\" after review by a developer.\\n\\nThe Rules page is the entry point where you can discover all the existing rules or create new ones based on provided templates.\\n\\n## Rules\\n\\nBy default, when entering the top menu item \\\"Rules\\\", you will see all the available rules brought by the analyzers <!-- sonarqube -->installed on your {instance} instance<!-- /sonarqube --><!-- sonarcloud -->available on SonarCloud<!-- /sonarcloud -->. You have the ability to narrow the selection based on search criteria in the left pane:\\n\\n* **Language**: the language to which a rule applies.\\n* **Type**: Bug, Vulnerability, Code Smell or Security Hotspot rules.\\n* **Tag**: it is possible to add tags to rules in order to classify them and to help discover them more easily.\\n* **Repository**: the engine/analyzer that contributes rules to {instance}.\\n* **Default Severity**: the original severity of the rule - as defined by the analyzer that contributes this rule.\\n* **Status**: rules can have 3 different statuses:\\n  * **Beta**: The rule has been recently implemented and we haven't gotten enough feedback from users yet, so there may be false positives or false negatives.\\n  * **Deprecated**: The rule should no longer be used because a similar, but more powerful and accurate rule exists.\\n  * **Ready**: The rule is ready to be used in production.\\n* **Available Since**: date when a rule was first added on {instance}. This is useful to list all the new rules since the last upgrade of a plugin for instance.\\n* **Template**: display rule templates that allow to create custom rules (see later on this page).\\n* **Quality Profile**: inclusion in or exclusion from a specific profile\\n\\nIf a quality profile is selected, it is also possible to check for its active severity and whether it is inherited or not. See the Quality Profile documentation for more.\\n\\n## Rule Details\\n\\nTo see the details of a rule, either click on it, or use the right arrow key. Along with basic rule data, you'll also be able to see which, if any, profiles it's active in and how many open issues have been raised with it.\\n\\nThe following actions are available only if you have the right permissions (\\\"Administer Quality Profiles and Gates\\\"):\\n\\n* **Add/Remove Tags**:\\n  * It is possible to add existing tags on a rule, or to create new ones (just enter a new name while typing in the text field).\\n  * Note that some rules have built-in tags that you cannot remove - they are provided by the plugins which contribute the rules.\\n* **Extend Description**:\\n  * You can extend rule descriptions to let users know how your organization is using a particular rule or to give more insight on a rule.\\n  * Note that the extension will be available to non-admin users as a normal part of the rule details.\\n\\n<!-- sonarqube -->\\n## Rule Templates and Custom Rules\\n\\nRule Templates are provided by plugins as a basis for users to define their own custom rules in {instance}. To find templates, select the **Show Templates Only** facet from the the \\\"Template\\\" dropdown:\\n\\n![Rule templates.](/images/rule-templates.png)\\n\\nTo create a custom rule from a template click the **Create** button next to the \\\"Custom Rules\\\" heading and fill in the following information:\\n* Name\\n* Key (auto-suggested)\\n* Description (Markdown format is supported)\\n* Default Severity\\n* Status\\n* The parameters specified by the template\\n\\nYou can navigate from a template to the details of custom rules defined from it by clicking the link in the \\\"Custom Rules\\\" section.\\n\\n![Rule template details.](/images/rule-template-details.png)\\n\\n### Custom Rules\\nCustom Rules are considered like any other rule, except that you can edit or delete them:\\n\\n![Custom rules.](/images/rules-custom.png)\\n\\n**Note:** When deleting a custom rule, it is not physically removed from the {instance} instance. Instead, its status is set to \\\"REMOVED\\\". This allows current or old issues related to this rule to be displayed properly in {instance} until they are fully removed.\\n\\n## Extending Coding Rules\\n\\nCustom coding rules can be added. See [Adding Coding Rules](/extend/adding-coding-rules/) for detailed information and tutorials.\\n<!-- /sonarqube -->\\n\\n## Rule Types and Severities\\n\\n### How are rules categorized?\\n\\nThe {instance} Quality Model divides rules into four categories: Bugs, Vulnerabilities, Security Hotspots, and Code Smells. Rules are assigned to categories based on the answers to these questions:\\n\\n**Is the rule about code that is demonstrably wrong, or more likely wrong than not?**  \\nIf the answer is \\\"yes\\\", then it's a Bug rule.  \\nIf not...\\n\\n**Is the rule about code that could be exploited by a hacker?**  \\nIf so, then it's a Vulnerability rule.  \\nIf not...\\n\\n**Is the rule about code that is security-sensitive?**  \\nIf so, then it's a Security Hotspot rule.  \\nIf not...\\n\\n**Is the rule neither a Bug nor a Vulnerability?**  \\nIf so, then it's a Code Smell rule.\\n\\n## How are severities assigned?\\nTo assign severity to a rule, we ask a further series of questions. The first one is basically:\\n\\n**What's the worst thing that could happen?**\\n\\nIn answering this question, we try to factor in Murphy's Law without predicting Armageddon.\\n\\nThen we assess whether the impact and likelihood of the Worst Thing (see _How are severity and likelihood decided?_, below) are high or low, and plug the answers into a truth table:\\n\\n|          | Impact                 | Likelihood             |\\n| -------- | ---------------------- | ---------------------- |\\n| Blocker  | ![](/images/check.svg) | ![](/images/check.svg) |\\n| Critical | ![](/images/check.svg) | ![](/images/cross.svg) |\\n| Major    | ![](/images/cross.svg) | ![](/images/check.svg) |\\n| Minor    | ![](/images/cross.svg) | ![](/images/cross.svg) |\\n\\n## How are severity and likelihood decided?\\nTo assess the severity of a rule, we start from the Worst Thing (see _How are severities assigned?_, above) and ask category-specific questions.\\n\\n### Bugs\\nImpact: **Could the Worst Thing cause the application to crash or to corrupt stored data?**\\n\\nLikelihood: **What's the probability that the Worst Thing will happen?**\\n\\n### Vulnerabilities\\nImpact: **Could the exploitation of the Worst Thing result in significant damage to your assets or your users?**\\n\\nLikelihood: **What is the probability that a hacker will be able to exploit the Worst Thing?**\\n\\n### Security Hotspots\\nSecurity Hotspots are not assigned severities as it is unknown whether there is truly an issue until review by a Security Auditor. When an auditor converts a Security Hotspot into a Vulnerability, severity is assigned based on the identified Vulnerability (see above).\\n\"},{\"path\":\"user-guide/security-hotspots\",\"content\":\"---\\ntitle: Security Hotspots\\nurl: /user-guide/security-hotspots/\\n---\\n\\n## What is a Security Hotspot?\\n\\nUnlike Vulnerabilities, Security Hotspots aren't necessarily issues that are open to attack. Instead, Security Hotspots highlight security-sensitive pieces of code that need to be manually reviewed. Upon review, you'll either find a Vulnerability that needs to be fixed or that there is no threat. \\n\\n## Why are Security Hotspots Important?\\n\\nSecurity Hotspots help focus the efforts of developers who are manually checking security-sensitive code. Reviewing Security Hotspots allows you to:\\n\\n* **Fix security issues** – Reviewing Security Hotspots gives you the opportunity to detect vulnerabilities and ensure issues are fixed before merging pull requests or releasing your branch.\\n* **Learn about security** – {instance} explains why your code was identified as a Security Hotspot and the link between your Security Hotspots and well-known attacks or weaknesses such as SQL Injection, Weak Cryptography, or Authentication. This helps you to know when you're working on security-sensitive code and to avoid creating Vulnerabilities.\\n\\n## Security Hotspot Lifecycle\\nSecurity Hotspots have a dedicated lifecycle and must be reviewed by someone with the \\\"Administer Security Hotspots\\\" permission. \\n\\n### Status\\n\\nThrough the lifecycle, a Security Hotspot takes one of the following statuses:\\n\\n* **To Review** – the default status of new Security Hotspots set by {instance}. A Security Hotspot has been reported and needs to be checked.\\n* **In Review** – the Security Hotspot is being checked to make sure there isn't a vulnerability in the code.\\n* **Reviewed** – the Security Hotspot has been checked and no security issue was found.\\n\\nA Security Hotspot is only closed if the code containing it is deleted or the rule is deactivated.\\n\\n### Actions\\n\\nYou can perform the following actions on Security Hotspots:\\n\\n* **Resolve as Reviewed** - There is no vulnerability in the code.\\n* **Set as In Review** - A review is in progress to check for a Vulnerability.\\n* **Reset as To Review** - The Security Hotspot needs to be analyzed again.\\n* **Open as Vulnerability** - There's a Vulnerability in the code that must be fixed.\\n\\n### Workflow\\n\\nWhen {instance} detects a Security Hotspot, it is set as **To Review**. From here, you can perform the following actions on the Security Hotspot:\\n* **Open as a Vulnerablility** if you find a Vulnerability in the code at the Security Hotspot location that must be fixed.\\n* **Resolve as Reviewed** if you don't find a Vulnerability in the code at the Security Hotspot location.\\n* **Set as In Review** if you want to flag the Security Hotspot to show that you are checking it or about to check it for Vulnerabilities. This is an optional step in the workflow. \\n\\nIf you set a Security Hotspot to **In Review**, it can either be marked:\\n* **Open as Vulnerability** if you find a Vulnerability in the code that must be fixed.\\n* **Resolve as Reviewed** if you don't find a Vulnerability in the code.\\n\\nWhen you determine there is a Vulnerability at a Security Hotspot location and select **Open as a Vulnerability**, its status changes from **To Review** or **In Review** to **Open**. This converts the Security Hotspot to a Vulnerability, and the developer who last touched the line of code will receive \\\"new issue\\\" notifications (if she's signed up to get them).\\n\\nOnce a Vulnerability is **Open**ed at a Security Hotspot location, the following occurs:\\n\\n1. The Security Hotspot is assigned to the appropriate developer, and the developer makes a fix.\\n2. The developer then marks the Vulnerability **Resolve as Reviewed** *via the UI* which moves the Vulnerability back to being a Security Hotspot. \\n3. The Security Hotspot is then marked as **Reviewed** and it's status is **Fixed**. \\n\\nA reviewed Security Hotspot can be reopened as a Vulnerability at any point if it's determined to be a true issue.\\n\"},{\"path\":\"user-guide/security-reports\",\"content\":\"---\\ntitle: Security Reports\\nurl: /user-guide/security-reports/\\n---\\n\\n*Security Reports are available as part of the [Enterprise Edition](https://redirect.sonarsource.com/editions/enterprise.html) and [above](https://www.sonarsource.com/plans-and-pricing/).*\\n\\n## What do Security Reports show?\\nSecurity Reports quickly give you the big picture on your application's security, with breakdowns of just where you stand in regard to each of the [OWASP Top 10](https://www.owasp.org/index.php/Top_10-2017_Top_10), and [SANS Top 25](https://www.sans.org/top25-software-errors) categories, and [CWE](http://cwe.mitre.org/)-specific details.\\n\\nThe Security Reports are fed by the analyzers, which rely on the rules activated in your quality profiles to raise security issues. If there are no rules corresponding to a given OWASP category activated in your Quality Profile, you will get no issues linked to that specific category and the rating displayed will be A. That won't mean you are safe for that category, but that you need to activate more rules (assuming some exist).\\n\\n## What's the difference between a Security Hotspot and a Vulnerability?\\nVulnerabilities are points in the code which are open to attack. Security Hotspots highlight security-sensitive pieces of code that need to be manually reviewed to ensure the sensitive piece of code is being used in the safest manner. Security hotspots also help educate developers on security issues. \\n\\nFor more details, see [Security Hotspots](/user-guide/security-hotspots/)\\n\\n## Why are some Security Hotspot and Vulnerability rules very similar?\\nThey are overlapping on purpose. The Security Hotspot rule is supposed to include all matches of the Vulnerability rules, and cases where the taint analysis engine is not able to detect vulnerabilities. For example, switching from one language to another (XML, JNI, etc...) or using some third party libraries will prevent the taint analysis from finding vulnerabilities. A Vulnerability rule highlights security threats only when it has a high level of confidence, which means that it will always miss some of them. Whereas a Security Hotspot rule guides secure code reviews by showing code where those issues might lurk, even if it could not detect any vulnerability.\\n\\n## Why don't I see any Vulnerabilities or Security Hotspots?\\nYou might not see any Vulnerabilities or Security Hotspots for the following reasons:\\n* You don't have any because the code has been written without using any security-sensitive API. \\n* Vulnerability or Security Hotspot rules are available but not activated in your Quality Profile so no Security Hotspots or Vulnerabilities are raised.\\n* The analyzer for your language might only currently offer a few rules and won't raise any or only a small number of Vulnerabilities or Security Hotspots.\\n\"},{\"path\":\"user-guide/security-rules\",\"content\":\"---\\ntitle: Security-related Rules\\nurl: /user-guide/security-rules/\\n---\\nThe {instance} Quality Model has three different types of rules: Reliability (bug), Vulnerability (security), and Maintainability (code smell) rules. But divided another way, there are only two types: security rules, and all the rest. The distinction between these two groups is not so much in what they catch but in where they come from and in the standards imposed on them.\\n\\n## What to expect from security-related rules\\nTo be clear, the standard for most rules implemented in {instance} language plugins is very strict: no false positives. For normal rules, you should be able to be confident that whatever is reported to you as an issue really is an issue.\\n\\nBut for security-related rules, the story is a little different. For instance, a lot of security guidelines talk about how \\\"sensitive\\\" data should be handled (e.g. not logged, not stored un-encrypted, &etc.). But since it's not really possible in a rule to tell which data is sensitive and which isn't, the choice becomes: maintain the no-false-positives standard and don't implement security-related rules, or implement security-related rules with a different standard.\\n\\nThat's why security-related rules cast a wider net than you may be used to seeing. The idea is that the rule will flag anything suspicious, and leave it to the human security auditor to cull the false positives and sent the real issues for remediation.\\n\\nSecurity Hotspots are a special type of issue that identify sensitive areas of code that should be reviewed by a Security Auditor to determine if they are truly Vulnerabilities.  See Security Audits and Reports for detail on Security Hotspots and the audit process.\\n\\n## Where security-related rules come from\\nThe vast majority of security-related rules originate from established standards: [CWE](http://cwe.mitre.org/), [SANS Top 25](http://www.sans.org/top25-software-errors/), and [OWASP Top 10](https://www.owasp.org/index.php/Top_10-2017_Top_10). To find rules that relate to any of these standards, you can search rules either by tag or by text. The standards that a rule relates to will be listed in the **See** section at the bottom of the rule description. \\n\\n### CWE\\nCWE stands for Common Weakness Enumeration. According to the [CWE FAQ](http://cwe.mitre.org/about/faq.html#A.1):\\n\\n> Common Weakness Enumeration (CWE™) is a formal list or dictionary of common software weaknesses that can occur in software's architecture, design, code or implementation that can lead to exploitable security vulnerabilities. CWE was created to serve as a common language for describing software security weaknesses; serve as a standard measuring stick for software security tools targeting these weaknesses; and to provide a common baseline standard for weakness identification, mitigation, and prevention efforts.\\n\\nThe CWE is a hierarchy of weakness descriptions. The lowest level in the hierarchy is a \\\"Weakness Base\\\", which describes a granular weakness. Above Weakness Bases, are Weakness Classes and Categories. In general, rules are linked to Weakness Bases or Classes. \\n\\nTools which meet certain requirements can be certified as [CWE Compatible](http://cwe.mitre.org/compatible/). Those requirements are:\\n\\n* You must be able to search for CWE-related rules using a CWE identifier. To do so in the {instance} platform, simply drop the CWE identifier (e.g. CWE-595) in the search text input on the rules page and run the search.\\n* Rules must be accurately linked to their related CWE items. To see the CWE mapping for a {instance} rule, consult the rule's See section at the bottom of the rule description.\\n* You must be able to identify the relevant CWE from an Issue. To do so in the {instance} platform, consult the related rule.\\n* The product documentation must include a description of CWE and CWE Compatibility.\\n* The version of CWE supported must be listed. The {instance} language plugins support version 2.8.\\n* In addition to searching rules by CWE id's, you can also search by the \\\"cwe\\\" rule tag.\\n\\nTo see which CWE items are covered for a language, consult the links below.\\n\\n* [C](https://rules.sonarsource.com/c/tag/cwe)/[C++](https://rules.sonarsource.com/cpp/tag/cwe)\\n* [Java](https://rules.sonarsource.com/java/tag/cwe) \\n* [Objective-C](https://rules.sonarsource.com/objective-c/tag/cwe)\\n \\n\\n### SANS Top 25\\n\\nThe [SANS Top 25](http://www.sans.org/top25-software-errors/) list is a collection of the 25-most dangerous errors listed in the CWE, as compiled by the [SANS organization](http://www.sans.org/). The current SANS list is divided into three categories: Insecure Interaction Between Components, Risky Resource Management, and Porous Defenses.\\n\\nThe tags used for SANS correspond to its categories: sans-top25-insecure, sans-top25-risky, sans-top25-porous.\\n\\nTo find rules relating to SANS Top 25, you can perform a text search for the category, or the relevant CWE item, or perform a rule tag search.\\n\\n### OWASP Top 10\\nOWASP stands for Open Web Application Security Project. According to its site, it is:\\n\\n> A [501(c)(3)](http://www.irs.gov/Charities-&-Non-Profits/Charitable-Organizations/Exemption-Requirements-Section-501(c)(3)-Organizations) worldwide not-for-profit charitable organization focused on improving the security of software. Our mission is to make software security [visible](https://www.owasp.org/index.php/Category:OWASP_Video), so that [individuals and organizations](https://www.owasp.org/index.php/Industry:Citations) worldwide can make informed decisions about true software security risks.\\n\\nThe [OWASP Top 10](https://www.owasp.org/index.php/Top_10-2017_Top_10) is a list of broad categories of weaknesses, each of which can map to many individual rules.\\n\\nThe tags used for OWASP correspond to the weakness categories: owasp-a1, owasp-a2, owasp-a3, owasp-a4, owasp-a5, owasp-a6, owasp-a7, owasp-a8, owasp-a9, owasp-a10.\\n\\nTo find rules relating to OWASP Top 10, you can perform a text search for the category, or perform a rule tag search.\\n\"},{\"path\":\"user-guide/sonarlint-notifications\",\"content\":\"---\\ntitle: SonarLint Smart Notifications\\nurl: /user-guide/sonarlint-notifications/\\n---\\n<!-- sonarqube -->\\n_SonarLint Smart Notifications is available as part of the [Developer Edition](https://redirect.sonarsource.com/editions/developer.html) and [above](https://www.sonarsource.com/plans-and-pricing/)._\\n<!-- /sonarqube -->\\n\\nSmart notifications allow developers using Connected Mode in SonarLint to receive in-IDE notifications from {instance} when:\\n\\n* the Quality Gate status (failed / success) of a project /solution _open in the IDE_ changes\\n* a {instance} analysis raises new issues _introduced by this developer in a project /solution open in the IDE_\\n\\n## Activate/deactivate Notifications\\nThe activation or deactivation of notifications must be done individually, by each developer directly in SonarLint (on the IDE side).\\n\\n<!-- sonarqube -->\\nReceiving notifications is configurable on the SonarLint side on a {instance} server-by-server basis.\\n<!-- /sonarqube -->\\n\"},{\"path\":\"user-guide/user-account\",\"content\":\"---\\ntitle: User Account\\nurl: /user-guide/user-account/\\n---\\n\\nAs a {instance} user you have your own space where you can see the things that are relevant to you:\\n\\n## Profile\\n\\n<!-- sonarqube -->\\n\\nIt gives you a summary of:\\n\\n- your Groups\\n- your SCM accounts\\n\\n## Security\\n\\nIf your instance is not using a 3rd party authentication mechanism such as LDAP or an OAuth provider (GitHub, Google Account, ...), you can change your password from here. Additionally, you can also manage your own authentication tokens.\\n\\nYou can create as many Tokens as you want. Once a Token is created, you can use it to perform analysis on a project where you have the [Execute Analysis](/instance-administration/security/) permission.\\n\\n<!-- /sonarqube -->\\n\\n<!-- sonarcloud -->\\n\\nIt gives you a summary of your SCM accounts and allows you to delete your account.\\n\\n## Security\\n\\nYou can create as many Tokens as you want. Once a Token is created, you can use it to perform analysis on a project where you have the [Execute Analysis](/instance-administration/security/) permission.\\n\\n## Organizations\\n\\nThis is an overview of all the organizations you are member of.\\n\\n## Delete your user account\\n\\nGo to [User > My Account > Profile](/#sonarcloud#/account) and click on **Delete**. Once your account is deleted, all you data will be removed except your login that will still be displayed in different places:\\n\\n- issues assignee\\n- issues comments\\n- issues changelog\\n\\nNote that you can manually unassign yourself from all your issues and/or remove your comments before deleting your account.\\n\\nThe information used to identify yourself in SCM (name, email) are part of the SCM data and can not be removed.\\n\\n<!-- /sonarcloud -->\\n\"},{\"path\":\"user-guide/user-token\",\"content\":\"---\\ntitle: User Token\\nurl: /user-guide/user-token/\\n---\\n\\nEach user has the ability to generate tokens that can be used to run analyses or invoke web services without access to the user's actual credentials.\\n\\n## How to Generate a Token\\n\\nTo generate a token, to go **User > My Account > Security**. Your existing tokens are listed here, each with a Revoke button.\\n\\nThe form at the bottom of the page allows you to generate new tokens. Once you click the **Generate** button, you will see the token value. Copy it immediately; once you dismiss the notification you will not be able to retrieve it.\\n\\n## How to Use a Token\\n\\nUser tokens have to be used as a replacement of your usual login:\\n\\n* when running analyses on your code: replace your login by the token in the `sonar.login` property. \\n* when invoking web services: just pass the token instead of your login while doing the basic authentication.\\n\\nIn both cases, you don't need to provide a password (so when running analyses on your code, the property `sonar.password` is optional).\\n\"},{\"path\":\"user-guide/visualizations\",\"content\":\"---\\ntitle: Visualizations\\nurl: /user-guide/visualizations/\\n---\\nVisualizations are available to help you gain deeper insights into your projects' current statuses and histories.\\n\\n## How do I compare current state for multiple projects or project components?\\nThe Projects space allows you to filter the projects in your instance by multiple, measure-based criteria. Once you've chosen your set, you don't have to stare at the raw numbers to identify the risks its projects face. Instead, several visualizations (**Projects > Perspective**) are available to help you understand each project's relative position in terms of each of the major axes:\\n\\n* Risk - Reliability and Security ratings, test coverage, technical debt, and lines of code\\n* Reliability - Reliability rating, Reliability remediation effort, lines of code, and Bug count\\n* Security - Security rating, Security remediation effort, lines of code, and Vulnerability count\\n* Maintainability - Maintainability rating, Technical debt, lines of code, and Code Smell count\\n* Coverage - Coverage, complexity, and uncovered lines\\n* Duplications - Duplicated Lines %, lines of code, and duplicated blocks\\n* At the project level these same visualizations are available in the Measures tab to help you compare project components. The Project Overview corresponds to the Risk visualization in the Projects space, For the other five graphs, choose the Overview option under the relevant domain.\\n\\nAdditionally, treemaps are also available for percentage and rating metrics at the project level. Navigate to them in the Measures tab using the perspective selector in the right pane.\\n\\n## How do I visualize metric history?\\nAt the project level, the Activity tab offers several canned line graphs of selected metrics across time, with convenient mouseovers to show graph details and the ability to easily narrow the graph to a slice of the project's history. Beyond the canned graphs, you also have the ability to map the metrics of your choice against each other in a Custom graph.\\n\\n![](/images/visualizations.png)\\n\"}];","\nvar content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".documentation-page-header{margin:10px 20px}.documentation-footer .page-footer-menu,.documentation-footer div{max-width:740px}.documentation-content{padding:32px 64px}.documentation-content.markdown{position:relative;font-size:16px;line-height:1.7}.documentation-content.markdown .documentation-title{font-size:24px;padding-top:8px;margin-bottom:2em}.documentation-content.markdown h2{font-size:18px;font-weight:800;margin-top:3em}.documentation-content.markdown h3{font-size:16px;margin-bottom:.8em}.documentation-content.markdown pre{border:1px solid #e6e6e6;border-radius:3px;background-color:rgba(0,0,0,.06)}.documentation-content.markdown .alert,.documentation-content.markdown p,.documentation-content.markdown pre,.documentation-content.markdown table{margin:.8em 0 2em}.documentation-content.markdown ul{margin:0 0 2em}.documentation-content.markdown ul>ul{margin:0}.documentation-content.markdown p+ol,.documentation-content.markdown p+pre,.documentation-content.markdown p+ul{margin:-1em 0 2em}.documentation-content.markdown li>p,.documentation-content.markdown li>p+ol,.documentation-content.markdown li>p+pre,.documentation-content.markdown li>p+ul{margin:0}.documentation-content.markdown img[src$=\\\".svg\\\"]{vertical-align:text-bottom}.documentation-content.markdown .alert{display:block;padding:8px 16px}.documentation-content.markdown .collapse-container{border:1px solid #e6e6e6;border-radius:2px;background-color:#f3f3f3;padding:8px;margin:.8em 0 2em}.documentation-content.markdown .collapse-container>a:first-child{display:block}.documentation-content.markdown .collapse-container>a:first-child:focus{color:#236a97}.documentation-content.markdown .collapse-container :last-child{margin-bottom:0}.markdown.has-toc{display:flex}.markdown.has-toc .markdown-content{flex-shrink:1;overflow:hidden;text-overflow:ellipsis;overflow-x:auto}.markdown-toc{flex:0 0 240px;margin-right:-40px}.markdown-toc-content{margin-left:32px;padding:0 8px;font-size:13px;background:#fff;position:-webkit-sticky;position:sticky;top:68px}.markdown-toc-content h4{margin:0 8px 8px;font-size:14px}.markdown-toc-content a{display:block;color:#070706;padding:4px 8px;border:1px solid #fff;line-height:1.2;transition:none}.markdown-toc a:hover{border-color:#4b9fd5}.markdown-toc a.active{font-weight:700}\", \"\"]);\n\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport NavigationTree from 'Docs/../static/SonarQubeNavigationTree.json';\nimport {\n  DocNavigationItem,\n  DocsNavigationBlock,\n  DocsNavigationExternalLink\n} from 'Docs/@types/types';\nimport { flatten } from 'lodash';\n\nexport function getNavTree() {\n  return NavigationTree as DocNavigationItem[];\n}\n\nexport function getUrlsList(navTree: DocNavigationItem[]): string[] {\n  return flatten(\n    navTree.map(leaf => {\n      if (isDocsNavigationBlock(leaf)) {\n        return getUrlsList(leaf.children);\n      }\n      if (isDocsNavigationExternalLink(leaf)) {\n        return [leaf.url];\n      }\n      return [leaf];\n    })\n  );\n}\n\nexport function getOpenChainFromPath(pathname: string, navTree: DocNavigationItem[]) {\n  let chain: DocNavigationItem[] = [];\n\n  let found = false;\n  const walk = (leaf: DocNavigationItem, parents: DocNavigationItem[] = []) => {\n    if (found) {\n      return;\n    }\n\n    parents = parents.concat(leaf);\n\n    if (isDocsNavigationBlock(leaf)) {\n      leaf.children.forEach(child => {\n        if (typeof child === 'string' && testPathAgainstUrl(child, pathname)) {\n          chain = parents.concat(child);\n          found = true;\n        } else {\n          walk(child, parents);\n        }\n      });\n    } else if (typeof leaf === 'string' && testPathAgainstUrl(leaf, pathname)) {\n      chain = parents;\n      found = true;\n    }\n  };\n\n  navTree.forEach(leaf => walk(leaf));\n\n  return chain;\n}\n\nexport function isDocsNavigationBlock(leaf?: DocNavigationItem): leaf is DocsNavigationBlock {\n  return typeof leaf === 'object' && (leaf as DocsNavigationBlock).children !== undefined;\n}\n\nexport function isDocsNavigationExternalLink(\n  leaf?: DocNavigationItem\n): leaf is DocsNavigationExternalLink {\n  return typeof leaf === 'object' && (leaf as DocsNavigationExternalLink).url !== undefined;\n}\n\nexport function testPathAgainstUrl(path: string, url: string) {\n  const leadingRegEx = /^\\//;\n  const trailingRegEx = /\\/$/;\n  return (\n    path.replace(leadingRegEx, '').replace(trailingRegEx, '') ===\n    url.replace(leadingRegEx, '').replace(trailingRegEx, '')\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport remark from 'remark';\nimport visit from 'unist-util-visit';\nimport { filterContent, ParsedContent, separateFrontMatter } from '../../helpers/markdown';\nimport * as Docs from './documentation.directory-loader';\nimport { DocumentationEntry, DocumentationEntryScope } from './utils';\n\nexport default function getPages(\n  parsedOverrides: T.Dict<ParsedContent> = {}\n): DocumentationEntry[] {\n  // Get entries, merge with overrides if applicable.\n  const pages = ((Docs as unknown) as Array<{ content: string; path: string }>).map(file => {\n    let parsed = separateFrontMatter(file.content);\n\n    if (parsedOverrides[file.path]) {\n      const parsedOverride = parsedOverrides[file.path];\n      parsed = {\n        content: parsedOverride.content,\n        frontmatter: { ...parsed.frontmatter, ...parsedOverride.frontmatter }\n      };\n      delete parsedOverrides[file.path];\n    }\n\n    return { parsed, file };\n  });\n\n  // Add new entries.\n  Object.keys(parsedOverrides).forEach(path => {\n    const parsed = parsedOverrides[path];\n    pages.push({\n      parsed,\n      file: { content: parsed.content, path }\n    });\n  });\n\n  return pages.map(({ parsed, file }) => {\n    const content = filterContent(parsed.content);\n    const text = getText(content);\n\n    return {\n      relativeName: file.path,\n      url: parsed.frontmatter.url || `/${file.path}/`,\n      title: parsed.frontmatter.title,\n      navTitle: parsed.frontmatter.nav || undefined,\n      order: Number(parsed.frontmatter.order || -1),\n      scope: parsed.frontmatter.scope\n        ? (parsed.frontmatter.scope.toLowerCase() as DocumentationEntryScope)\n        : undefined,\n      text,\n      content\n    };\n  });\n}\n\nfunction getText(content: string) {\n  const ast = remark().parse(content);\n  const texts: string[] = [];\n  visit(ast, node => {\n    if (node.type === `text` || node.type === `inlineCode`) {\n      texts.push(node.value);\n    }\n  });\n  return texts.join(' ').replace(/\\s+/g, ' ');\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { sortBy } from 'lodash';\n\nexport type DocumentationEntryScope = 'sonarqube' | 'sonarcloud' | 'static';\n\nexport interface DocumentationEntry {\n  content: string;\n  relativeName: string;\n  navTitle: string | undefined;\n  text: string;\n  title: string;\n  url: string;\n}\n\nexport function getNodeFromUrl(pages: DocumentationEntry[], url: string) {\n  return pages.find(p => p.url === url);\n}\n\nconst WORDS = 6;\n\nfunction cutLeadingWords(str: string) {\n  let words = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (/\\s/.test(str[i])) {\n      words++;\n    }\n    if (words === WORDS) {\n      return i > 0 ? `...${str.substring(i + 1)}` : str;\n    }\n  }\n  return str;\n}\n\nfunction cutTrailingWords(str: string) {\n  let words = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (/\\s/.test(str[i])) {\n      words++;\n    }\n    if (words === WORDS) {\n      return i < str.length - 1 ? `${str.substring(0, i)}...` : str;\n    }\n  }\n  return str;\n}\n\nexport function cutWords(tokens: Array<{ text: string; marked: boolean }>) {\n  const result: Array<{ text: string; marked: boolean }> = [];\n  let length = 0;\n\n  const highlightPos = tokens.findIndex(token => token.marked);\n  if (highlightPos > 0) {\n    const text = cutLeadingWords(tokens[highlightPos - 1].text);\n    result.push({ text, marked: false });\n    length += text.length;\n  }\n\n  result.push(tokens[highlightPos]);\n  length += tokens[highlightPos].text.length;\n\n  for (let i = highlightPos + 1; i < tokens.length; i++) {\n    if (length + tokens[i].text.length > 100) {\n      const text = cutTrailingWords(tokens[i].text);\n      result.push({ text, marked: false });\n      return result;\n    } else {\n      result.push(tokens[i]);\n      length += tokens[i].text.length;\n    }\n  }\n\n  return result;\n}\n\nexport function highlightMarks(str: string, marks: Array<{ from: number; to: number }>) {\n  const sortedMarks = sortBy(\n    [\n      ...marks.map(mark => ({ pos: mark.from, start: true })),\n      ...marks.map(mark => ({ pos: mark.to, start: false }))\n    ],\n    mark => mark.pos,\n    mark => Number(!mark.start)\n  );\n\n  const cuts: Array<{ text: string; marked: boolean }> = [];\n  let start = 0;\n  let balance = 0;\n\n  for (const mark of sortedMarks) {\n    if (mark.start) {\n      if (balance === 0 && start !== mark.pos) {\n        cuts.push({ text: str.substring(start, mark.pos), marked: false });\n        start = mark.pos;\n      }\n      balance++;\n    } else {\n      balance--;\n      if (balance === 0 && start !== mark.pos) {\n        cuts.push({ text: str.substring(start, mark.pos), marked: true });\n        start = mark.pos;\n      }\n    }\n  }\n\n  if (start < str.length - 1) {\n    cuts.push({ text: str.substr(start), marked: false });\n  }\n\n  return cuts;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport { testPathAgainstUrl } from '../navTreeUtils';\nimport { DocumentationEntry } from '../utils';\n\ninterface Props {\n  depth?: number;\n  node: DocumentationEntry | undefined;\n  splat: string;\n}\n\nexport function MenuItem({ depth = 0, node, splat }: Props) {\n  if (!node) {\n    return null;\n  }\n\n  const active = testPathAgainstUrl(node.url, splat);\n  const maxDepth = Math.min(depth, 3);\n  return (\n    <Link\n      className={classNames('list-group-item', { active, [`depth-${maxDepth}`]: depth > 0 })}\n      key={node.url}\n      to={'/documentation' + node.url}>\n      <h3 className=\"list-group-item-heading\">{node.navTitle || node.title}</h3>\n    </Link>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { DocNavigationItem, DocsNavigationBlock } from 'Docs/@types/types';\nimport * as React from 'react';\nimport { ButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport OpenCloseIcon from 'sonar-ui-common/components/icons/OpenCloseIcon';\nimport { isDocsNavigationBlock } from '../navTreeUtils';\nimport { DocumentationEntry, getNodeFromUrl } from '../utils';\nimport { MenuItem } from './MenuItem';\n\ninterface Props {\n  block: DocsNavigationBlock;\n  depth?: number;\n  openByDefault: boolean;\n  openChain: DocNavigationItem[];\n  pages: DocumentationEntry[];\n  splat: string;\n  title: string;\n}\n\ninterface State {\n  open: boolean;\n}\n\nexport default class MenuBlock extends React.PureComponent<Props, State> {\n  state: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      open: props.openByDefault !== undefined ? props.openByDefault : false\n    };\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      open: !prevState.open\n    }));\n  };\n\n  renderMenuItems = (block: DocsNavigationBlock): React.ReactNode => {\n    const { depth = 0, openChain, pages, splat } = this.props;\n    return block.children.map(item => {\n      if (typeof item === 'string') {\n        return (\n          <MenuItem depth={depth + 1} key={item} node={getNodeFromUrl(pages, item)} splat={splat} />\n        );\n      } else if (isDocsNavigationBlock(item)) {\n        return (\n          <MenuBlock\n            block={item}\n            depth={depth + 1}\n            key={item.title}\n            openByDefault={openChain.includes(item)}\n            openChain={openChain}\n            pages={pages}\n            splat={splat}\n            title={item.title}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n\n  render() {\n    const { block, depth = 0, title } = this.props;\n    const { open } = this.state;\n    const maxDepth = Math.min(depth, 3);\n    return (\n      <>\n        <ButtonLink\n          className={classNames('list-group-item', { [`depth-${maxDepth}`]: depth > 0 })}\n          onClick={this.handleClick}>\n          <h3 className=\"list-group-item-heading\">\n            <OpenCloseIcon className=\"little-spacer-right\" open={open} />\n            {title}\n          </h3>\n        </ButtonLink>\n        {open && this.renderMenuItems(block)}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\n\ninterface Props {\n  title: string;\n  url: string;\n}\n\nexport function MenuExternalLink({ title, url }: Props) {\n  return (\n    <a href={url} key={title} target=\"_blank\">\n      <h3 className=\"list-group-item-heading\">\n        <DetachIcon className=\"spacer-right\" />\n        {title}\n      </h3>\n    </a>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { DocNavigationItem } from 'Docs/@types/types';\nimport * as React from 'react';\nimport {\n  getOpenChainFromPath,\n  isDocsNavigationBlock,\n  isDocsNavigationExternalLink\n} from '../navTreeUtils';\nimport { DocumentationEntry, getNodeFromUrl } from '../utils';\nimport MenuBlock from './MenuBlock';\nimport { MenuExternalLink } from './MenuExternalLink';\nimport { MenuItem } from './MenuItem';\n\ninterface Props {\n  navigation: DocNavigationItem[];\n  pages: DocumentationEntry[];\n  splat: string;\n}\n\ninterface State {\n  openChain: DocNavigationItem[];\n}\n\nexport default class Menu extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      openChain: getOpenChainFromPath(this.props.splat, this.props.navigation)\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.splat !== nextProps.splat) {\n      this.setState({ openChain: getOpenChainFromPath(nextProps.splat, nextProps.navigation) });\n    }\n  }\n\n  render() {\n    const { openChain } = this.state;\n    return (\n      <>\n        {this.props.navigation.map(item => {\n          if (isDocsNavigationBlock(item)) {\n            return (\n              <MenuBlock\n                block={item}\n                key={item.title}\n                openByDefault={openChain.includes(item)}\n                openChain={openChain}\n                pages={this.props.pages}\n                splat={this.props.splat}\n                title={item.title}\n              />\n            );\n          }\n          if (isDocsNavigationExternalLink(item)) {\n            return <MenuExternalLink key={item.title} title={item.title} url={item.url} />;\n          }\n          return (\n            <MenuItem\n              key={item}\n              node={getNodeFromUrl(this.props.pages, item)}\n              splat={this.props.splat}\n            />\n          );\n        })}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport { cutWords, DocumentationEntry, highlightMarks } from '../utils';\n\nexport interface SearchResult {\n  exactMatch?: boolean;\n  highlights: T.Dict<[number, number][]>;\n  longestTerm: string;\n  page: DocumentationEntry;\n  query: string;\n}\n\ninterface Props {\n  active: boolean;\n  result: SearchResult;\n}\n\nexport default function SearchResultEntry({ active, result }: Props) {\n  return (\n    <Link\n      className={classNames('list-group-item', { active })}\n      to={'/documentation' + result.page.url}>\n      <SearchResultTitle result={result} />\n      <SearchResultText result={result} />\n    </Link>\n  );\n}\n\nexport function SearchResultTitle({ result }: { result: SearchResult }) {\n  let titleWithMarks: React.ReactNode;\n\n  const titleHighlights = result.highlights.title;\n  if (titleHighlights && titleHighlights.length > 0) {\n    const { title } = result.page;\n    const tokens = highlightMarks(\n      title,\n      titleHighlights.map(h => ({ from: h[0], to: h[0] + h[1] }))\n    );\n    titleWithMarks = <SearchResultTokens tokens={tokens} />;\n  } else {\n    titleWithMarks = result.page.title;\n  }\n\n  return (\n    <h3 className=\"list-group-item-heading\" style={{ fontWeight: 'normal' }}>\n      {titleWithMarks}\n    </h3>\n  );\n}\n\nexport function SearchResultText({ result }: { result: SearchResult }) {\n  const textHighlights = result.highlights.text;\n  const { text } = result.page;\n  let tokens: {\n    text: string;\n    marked: boolean;\n  }[] = [];\n\n  if (result.exactMatch) {\n    const pageText = result.page.text.toLowerCase();\n    const highlights: { from: number; to: number }[] = [];\n    let start = 0;\n    let index = pageText.indexOf(result.query, start);\n    let loopCount = 0;\n\n    while (index > -1 && loopCount < 10) {\n      loopCount++;\n      highlights.push({ from: index, to: index + result.query.length });\n      start = index + 1;\n      index = pageText.indexOf(result.query, start);\n    }\n\n    if (highlights.length) {\n      tokens = highlightMarks(text, highlights);\n    }\n  }\n\n  if (tokens.length === 0 && textHighlights && textHighlights.length > 0) {\n    tokens = highlightMarks(text, textHighlights.map(h => ({ from: h[0], to: h[0] + h[1] })));\n  }\n\n  if (tokens.length) {\n    return (\n      <div className=\"note\">\n        <SearchResultTokens tokens={cutWords(tokens)} />\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function SearchResultTokens({\n  tokens\n}: {\n  tokens: Array<{ text: string; marked: boolean }>;\n}) {\n  return (\n    <>\n      {tokens.map((token, index) => (\n        <React.Fragment key={index}>\n          {token.marked ? <mark key={index}>{token.text}</mark> : token.text}\n        </React.Fragment>\n      ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { DocNavigationItem } from 'Docs/@types/types';\nimport { sortBy } from 'lodash';\nimport lunr, { LunrBuilder, LunrIndex, LunrToken } from 'lunr';\nimport * as React from 'react';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { getUrlsList } from '../navTreeUtils';\nimport { DocumentationEntry } from '../utils';\nimport SearchResultEntry from './SearchResultEntry';\n\ninterface Props {\n  navigation: DocNavigationItem[];\n  pages: DocumentationEntry[];\n  query: string;\n  splat: string;\n}\n\nexport default class SearchResults extends React.PureComponent<Props> {\n  index: LunrIndex;\n\n  constructor(props: Props) {\n    super(props);\n    this.index = lunr(function() {\n      this.use(tokenContextPlugin);\n      this.ref('relativeName');\n      this.field('title', { boost: 10 });\n      this.field('text');\n\n      this.metadataWhitelist = ['position', 'tokenContext'];\n\n      props.pages\n        .filter(page => getUrlsList(props.navigation).includes(page.url))\n        .forEach(page => this.add(page));\n    });\n  }\n\n  render() {\n    const query = this.props.query.toLowerCase();\n    const results = this.index\n      .search(\n        query\n          .split(/\\s+/)\n          .map(s => `${s}~1 ${s}*`)\n          .join(' ')\n      )\n      .map(match => {\n        const page = this.props.pages.find(page => page.relativeName === match.ref);\n\n        if (!page) {\n          return null;\n        }\n\n        const highlights: T.Dict<[number, number][]> = {};\n        let longestTerm = '';\n        let exactMatch = false;\n\n        // Loop over all matching terms/tokens.\n        Object.keys(match.matchData.metadata).forEach(term => {\n          // Remember the longest term that matches the query as close as possible.\n          if (query.includes(term.toLowerCase()) && longestTerm.length < term.length) {\n            longestTerm = term;\n          }\n\n          Object.keys(match.matchData.metadata[term]).forEach(fieldName => {\n            const { position: positions, tokenContext: tokenContexts } = match.matchData.metadata[\n              term\n            ][fieldName];\n\n            highlights[fieldName] = [...(highlights[fieldName] || []), ...positions];\n\n            // Check if we have an *exact match*.\n            if (!exactMatch && tokenContexts) {\n              tokenContexts.forEach((tokenContext: string) => {\n                if (!exactMatch && tokenContext.includes(query)) {\n                  exactMatch = true;\n                }\n              });\n            }\n          });\n        });\n\n        return { exactMatch, highlights, longestTerm, page, query };\n      })\n      .filter(isDefined);\n\n    // Re-order results by the length of the longest matched term and by exact\n    // match (if applicable). The longer the matched term is, the higher the\n    // chance the result is more relevant.\n    const sortedResults = sortBy(\n      // Sort by longest term.\n      sortBy(results, result => -result.longestTerm.length),\n      // Sort by exact match.\n      result => result.exactMatch && -1\n    );\n\n    return (\n      <>\n        {sortedResults.map(result => (\n          <SearchResultEntry\n            active={result.page.relativeName === this.props.splat}\n            key={result.page.relativeName}\n            result={result}\n          />\n        ))}\n      </>\n    );\n  }\n}\n\n// Lunr doesn't support exact multiple-term matching. Meaning \"foo bar\" will not\n// boost a sentence like \"Foo bar baz\" more than \"Baz bar foo\". In order to\n// provide more accurate results, we store the token context, to see if we can\n// perform an \"exact match\". Unfortunately, we cannot extend the search logic,\n// only the tokenizer at *index time*. This is why we store the context as\n// meta-data, and post-process the matches before rendering (see above). For\n// performance reasons, we only add 2 extra tokens, one in front, one after.\n// This means we support \"exact macthing\" for up to 3 terms. More search terms\n// would fallback to the regular matching algorithm, which is OK: the more terms\n// searched for, the better the standard algorithm will perform anyway. In the\n// end, the best would be for Lunr to support multi-term matching, as extending\n// the search algorithm for this would be way too complicated.\nfunction tokenContextPlugin(builder: LunrBuilder) {\n  const pipelineFunction = (token: LunrToken, index: number, tokens: LunrToken[]) => {\n    const prevToken = tokens[index - 1] || '';\n    const nextToken = tokens[index + 1] || '';\n    token.metadata['tokenContext'] = [prevToken.toString(), token.toString(), nextToken.toString()]\n      .filter(s => s.length)\n      .join(' ')\n      .toLowerCase();\n    return token;\n  };\n\n  (lunr as any).Pipeline.registerFunction(pipelineFunction, 'tokenContext');\n  builder.pipeline.before((lunr as any).stemmer, pipelineFunction);\n  builder.metadataWhitelist.push('tokenContext');\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { DocNavigationItem } from 'Docs/@types/types';\nimport * as React from 'react';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport { DocumentationEntry } from '../utils';\nimport Menu from './Menu';\nimport SearchResults from './SearchResults';\n\ninterface Props {\n  navigation: DocNavigationItem[];\n  pages: DocumentationEntry[];\n  splat: string;\n}\n\ninterface State {\n  query: string;\n}\n\nexport default class Sidebar extends React.PureComponent<Props, State> {\n  state: State = { query: '' };\n\n  handleSearch = (query: string) => {\n    this.setState({ query: query.trim() });\n  };\n\n  render() {\n    return (\n      <>\n        <SearchBox\n          className=\"big-spacer-top spacer-bottom\"\n          minLength={2}\n          onChange={this.handleSearch}\n          placeholder=\"Search for pages or keywords\"\n          value={this.state.query}\n        />\n        <div className=\"documentation-results panel\">\n          <div className=\"list-group\">\n            {this.state.query ? (\n              <SearchResults\n                navigation={this.props.navigation}\n                pages={this.props.pages}\n                query={this.state.query}\n                splat={this.props.splat}\n              />\n            ) : (\n              <Menu\n                navigation={this.props.navigation}\n                pages={this.props.pages}\n                splat={this.props.splat}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as navigationTreeSonarCloud from 'Docs/../static/SonarCloudNavigationTree.json';\nimport * as navigationTreeSonarQube from 'Docs/../static/SonarQubeNavigationTree.json';\nimport { DocNavigationItem } from 'Docs/@types/types';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { addSideBarClass, removeSideBarClass } from 'sonar-ui-common/helpers/pages';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { getInstalledPlugins } from '../../../api/plugins';\nimport { getPluginStaticFileContent } from '../../../api/static';\nimport A11ySkipTarget from '../../../app/components/a11y/A11ySkipTarget';\nimport NotFound from '../../../app/components/NotFound';\nimport ScreenPositionHelper from '../../../components/common/ScreenPositionHelper';\nimport DocMarkdownBlock from '../../../components/docs/DocMarkdownBlock';\nimport { ParsedContent, separateFrontMatter } from '../../../helpers/markdown';\nimport { isSonarCloud } from '../../../helpers/system';\nimport { getUrlsList } from '../navTreeUtils';\nimport getPages from '../pages';\nimport '../styles.css';\nimport { DocumentationEntry } from '../utils';\nimport Sidebar from './Sidebar';\n\ninterface Props {\n  params: { splat?: string };\n}\n\ninterface State {\n  loading: boolean;\n  pages: DocumentationEntry[];\n  tree: DocNavigationItem[];\n}\n\nconst LANGUAGES_BASE_URL = 'analysis/languages';\n\nexport default class App extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    loading: false,\n    pages: [],\n    tree: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    addSideBarClass();\n\n    this.setState({ loading: true });\n\n    const tree = isSonarCloud()\n      ? ((navigationTreeSonarCloud as any).default as DocNavigationItem[])\n      : ((navigationTreeSonarQube as any).default as DocNavigationItem[]);\n\n    this.getLanguagePluginsDocumentation(tree).then(\n      overrides => {\n        if (this.mounted) {\n          this.setState({\n            loading: false,\n            pages: getPages(overrides),\n            tree\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({\n            loading: false\n          });\n        }\n      }\n    );\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n    removeSideBarClass();\n  }\n\n  getLanguagePluginsDocumentation = (tree: DocNavigationItem[]) => {\n    return getInstalledPlugins()\n      .then(plugins =>\n        Promise.all(\n          plugins.map(plugin => {\n            if (plugin.documentationPath) {\n              const matchArray = /^static\\/(.*)/.exec(plugin.documentationPath);\n\n              if (matchArray && matchArray.length > 1) {\n                // eslint-disable-next-line promise/no-nesting\n                return getPluginStaticFileContent(plugin.key, matchArray[1]).then(\n                  content => content,\n                  () => undefined\n                );\n              }\n            }\n            return undefined;\n          })\n        )\n      )\n      .then(contents => contents.filter(isDefined))\n      .then(contents => {\n        const regex = new RegExp(`/${LANGUAGES_BASE_URL}/\\\\w+/$`);\n        const overridablePaths = getUrlsList(tree).filter(\n          path => regex.test(path) && path !== `/${LANGUAGES_BASE_URL}/overview/`\n        );\n\n        const parsedContent: T.Dict<ParsedContent> = {};\n\n        contents.forEach(content => {\n          const parsed = separateFrontMatter(content);\n          if (\n            parsed &&\n            parsed.frontmatter &&\n            parsed.frontmatter.key &&\n            overridablePaths.includes(`/${LANGUAGES_BASE_URL}/${parsed.frontmatter.key}/`)\n          ) {\n            parsedContent[`${LANGUAGES_BASE_URL}/${parsed.frontmatter.key}`] = parsed;\n          }\n        });\n\n        return parsedContent;\n      });\n  };\n\n  render() {\n    const { loading, pages, tree } = this.state;\n    const { splat = '' } = this.props.params;\n\n    if (loading) {\n      return (\n        <div className=\"page page-limited\">\n          <DeferredSpinner />\n        </div>\n      );\n    }\n\n    const page = pages.find(p => p.url === '/' + splat);\n    const mainTitle = translate(\n      'documentation.page_title',\n      isSonarCloud() ? 'sonarcloud' : 'sonarqube'\n    );\n    const isIndex = splat === 'index';\n\n    if (!page) {\n      return (\n        <>\n          <Helmet title={mainTitle}>\n            <meta content=\"noindex nofollow\" name=\"robots\" />\n          </Helmet>\n          <A11ySkipTarget anchor=\"documentation_main\" />\n          <NotFound withContainer={false} />\n        </>\n      );\n    }\n\n    return (\n      <div className=\"layout-page\">\n        <Helmet title={isIndex || !page.title ? mainTitle : `${page.title} | ${mainTitle}`}>\n          {!isSonarCloud() && <meta content=\"noindex nofollow\" name=\"robots\" />}\n        </Helmet>\n\n        <ScreenPositionHelper className=\"layout-page-side-outer\">\n          {({ top }) => (\n            <div className=\"layout-page-side\" style={{ top }}>\n              <div className=\"layout-page-side-inner\">\n                <div className=\"layout-page-filters\">\n                  <div className=\"documentation-page-header\">\n                    <A11ySkipTarget\n                      anchor=\"documentation_menu\"\n                      label={translate('documentation.skip_to_nav')}\n                      weight={10}\n                    />\n\n                    <Link to=\"/documentation/\">\n                      <h1>{translate('documentation.page')}</h1>\n                    </Link>\n                  </div>\n                  <Sidebar navigation={tree} pages={pages} splat={splat} />\n                </div>\n              </div>\n            </div>\n          )}\n        </ScreenPositionHelper>\n\n        <div className=\"layout-page-main\">\n          <div className=\"layout-page-main-inner\">\n            <div className=\"boxed-group\">\n              <A11ySkipTarget anchor=\"documentation_main\" />\n\n              <DocMarkdownBlock\n                className=\"documentation-content cut-margins boxed-group-inner\"\n                content={page.content}\n                stickyToc={true}\n                title={page.title}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { checkStatus, request } from 'sonar-ui-common/helpers/request';\n\nexport function getPluginStaticFileContent(pluginKey: string, staticFilePath: string) {\n  return request(`/static/${pluginKey}/${staticFilePath}`)\n    .submit()\n    .then(checkStatus)\n    .then(response => response.text());\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { A11yContext } from './A11yContext';\n\ninterface Props {\n  anchor: string;\n  label?: string;\n  weight?: number;\n}\n\nexport default function A11ySkipTarget(props: Props) {\n  return (\n    <A11yContext.Consumer>\n      {({ addA11ySkipLink, removeA11ySkipLink }) => (\n        <A11ySkipTargetInner\n          addA11ySkipLink={addA11ySkipLink}\n          removeA11ySkipLink={removeA11ySkipLink}\n          {...props}\n        />\n      )}\n    </A11yContext.Consumer>\n  );\n}\n\ninterface InnerProps {\n  addA11ySkipLink: (link: T.A11ySkipLink) => void;\n  removeA11ySkipLink: (link: T.A11ySkipLink) => void;\n}\n\nexport class A11ySkipTargetInner extends React.PureComponent<Props & InnerProps> {\n  componentDidMount() {\n    this.props.addA11ySkipLink(this.getLink());\n  }\n\n  componentWillUnmount() {\n    this.props.removeA11ySkipLink(this.getLink());\n  }\n\n  getLink = (): T.A11ySkipLink => {\n    const { anchor: key, label = translate('skip_to_content'), weight } = this.props;\n    return { key, label, weight };\n  };\n\n  render() {\n    const { anchor } = this.props;\n    return <span id={`a11y_target__${anchor}`} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n// keep this file in JavaScript, because it is used by a webpack loader\nmodule.exports = { getFrontMatter, separateFrontMatter, filterContent };\n\nfunction getFrontMatter(content) {\n  const lines = content.split('\\n');\n  const position = getFrontMatterPosition(lines);\n  return position ? parseFrontMatter(lines.slice(position.firstLine + 1, position.lastLine)) : {};\n}\n\nfunction separateFrontMatter(content) {\n  const lines = content.split('\\n');\n  const position = getFrontMatterPosition(lines);\n  if (position) {\n    const frontmatter = parseFrontMatter(lines.slice(position.firstLine + 1, position.lastLine));\n    const content = lines.slice(position.lastLine + 1).join('\\n');\n    return { frontmatter, content };\n  } else {\n    return { frontmatter: {}, content };\n  }\n}\n\nfunction getFrontMatterPosition(lines) {\n  let firstLine;\n  let lastLine;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (line.trim() === '---') {\n      if (firstLine === undefined) {\n        firstLine = i;\n      } else {\n        lastLine = i;\n        break;\n      }\n    }\n  }\n  return lastLine !== undefined ? { firstLine, lastLine } : undefined;\n}\n\nfunction parseFrontMatter(lines) {\n  const data = {};\n  for (let i = 0; i < lines.length; i++) {\n    const tokens = lines[i].split(':').map(x => x.trim());\n    if (tokens.length === 2) {\n      data[tokens[0]] = tokens[1];\n    }\n  }\n  return data;\n}\n\n/**\n * @param {string} content\n * @returns {string}\n */\nfunction filterContent(content) {\n  const regexBase = '<!-- \\\\/?(sonarqube|sonarcloud|static) -->';\n  const { isSonarCloud, getInstance } = require('./system');\n  const contentWithInstance = content.replace(/{instance}/gi, getInstance());\n  const contentWithoutStatic = cutConditionalContent(contentWithInstance, 'static');\n  const filteredContent = isSonarCloud()\n    ? cutConditionalContent(contentWithoutStatic, 'sonarqube')\n    : cutConditionalContent(contentWithoutStatic, 'sonarcloud');\n  return filteredContent\n    .replace(new RegExp(`^${regexBase}(\\n|\\r|\\r\\n|$)`, 'gm'), '') // First, remove single-line ones, including ending carriage-returns.\n    .replace(new RegExp(`${regexBase}`, 'g'), ''); // Now remove all remaining ones.\n}\n\n/**\n * @param {string} content\n * @param {string} tag\n * @returns {string}\n */\nfunction cutConditionalContent(content, tag) {\n  const beginning = `<!-- ${tag} -->`;\n  const ending = `<!-- /${tag} -->`;\n\n  let newContent = content;\n  let start = newContent.indexOf(beginning);\n  let end = newContent.indexOf(ending);\n  while (start !== -1 && end !== -1) {\n    newContent = newContent.substring(0, start) + newContent.substring(end + ending.length);\n    start = newContent.indexOf(beginning);\n    end = newContent.indexOf(ending);\n  }\n\n  return newContent;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport NavBar from 'sonar-ui-common/components/ui/NavBar';\nimport { rawSizes } from '../theme';\nimport GlobalFooterContainer from './GlobalFooterContainer';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport default function SimpleContainer({ children }: Props) {\n  return (\n    <div className=\"global-container\">\n      <div className=\"page-wrapper\" id=\"container\">\n        <NavBar className=\"navbar-global\" height={rawSizes.globalNavHeightRaw} />\n        {children}\n      </div>\n      <GlobalFooterContainer />\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport SimpleContainer from './SimpleContainer';\n\ninterface Props {\n  withContainer?: boolean;\n}\n\nexport default function NotFound({ withContainer = true }: Props) {\n  const Container = withContainer ? SimpleContainer : React.Fragment;\n  return (\n    <Container>\n      <Helmet defaultTitle={translate('404_not_found')} defer={false} />\n      <div className=\"page-wrapper-simple\" id=\"bd\">\n        <div className=\"page-simple\" id=\"nonav\">\n          <h2 className=\"big-spacer-bottom\">{translate('page_not_found')}</h2>\n          <p className=\"spacer-bottom\">{translate('address_mistyped_or_page_moved')}</p>\n          <p>\n            <Link to=\"/\">{translate('go_back_to_homepage')}</Link>\n          </p>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { debounce } from 'lodash';\nimport * as React from 'react';\n\ninterface Props {\n  className?: string;\n  children: (position: { top: number; left: number }) => React.ReactElement<any>;\n}\n\nexport default class ScreenPositionHelper extends React.PureComponent<Props> {\n  container?: HTMLDivElement;\n  debouncedOnResize: () => void;\n\n  constructor(props: Props) {\n    super(props);\n    this.debouncedOnResize = debounce(() => this.forceUpdate(), 250);\n  }\n\n  componentDidMount() {\n    this.forceUpdate();\n    window.addEventListener('resize', this.debouncedOnResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.debouncedOnResize);\n  }\n\n  getPosition = () => {\n    const containerPos = this.container && this.container.getBoundingClientRect();\n    if (!containerPos) {\n      return { top: 0, left: 0 };\n    }\n    return {\n      top: window.pageYOffset + containerPos.top,\n      left: window.pageXOffset + containerPos.left\n    };\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        ref={container => (this.container = container as HTMLDivElement)}>\n        {this.props.children(this.getPosition())}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2019 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { findLastIndex } from 'lodash';\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport interface Plugin {\n  key: string;\n  name: string;\n  category?: string;\n  description?: string;\n  editionBundled?: boolean;\n  license?: string;\n  organizationName?: string;\n  homepageUrl?: string;\n  organizationUrl?: string;\n  issueTrackerUrl?: string;\n  termsAndConditionsUrl?: string;\n}\n\nexport interface Release {\n  version: string;\n  date: string;\n  description?: string;\n  changeLogUrl?: string;\n}\n\nexport interface Update {\n  status: string;\n  release?: Release;\n  requires: Plugin[];\n  previousUpdates?: Update[];\n}\n\nexport interface PluginPendingResult {\n  installing: PluginPending[];\n  updating: PluginPending[];\n  removing: PluginPending[];\n}\n\nexport interface PluginAvailable extends Plugin {\n  release: Release;\n  update: Update;\n}\n\nexport interface PluginPending extends Plugin {\n  version: string;\n  implementationBuild: string;\n}\n\nexport interface PluginInstalled extends PluginPending {\n  documentationPath?: string;\n  filename: string;\n  hash: string;\n  sonarLintSupported: boolean;\n  updatedAt: number;\n  updates?: Update[];\n}\n\nexport function getAvailablePlugins(): Promise<{\n  plugins: PluginAvailable[];\n  updateCenterRefresh: string;\n}> {\n  return getJSON('/api/plugins/available').catch(throwGlobalError);\n}\n\nexport function getPendingPlugins(): Promise<PluginPendingResult> {\n  return getJSON('/api/plugins/pending').catch(throwGlobalError);\n}\n\nfunction getLastUpdates(updates: undefined | Update[]): Update[] {\n  if (!updates) {\n    return [];\n  }\n  const lastUpdate = ['COMPATIBLE', 'REQUIRES_SYSTEM_UPGRADE', 'DEPS_REQUIRE_SYSTEM_UPGRADE'].map(\n    status => {\n      const index = findLastIndex(updates, update => update.status === status);\n      return index > -1 ? updates[index] : undefined;\n    }\n  );\n  return lastUpdate.filter(isDefined);\n}\n\nfunction addChangelog(update: Update, updates?: Update[]) {\n  if (!updates) {\n    return update;\n  }\n  const index = updates.indexOf(update);\n  const previousUpdates = index > 0 ? updates.slice(0, index) : [];\n  return { ...update, previousUpdates };\n}\n\nexport function getInstalledPlugins(): Promise<PluginInstalled[]> {\n  return getJSON('/api/plugins/installed', { f: 'category' }).then(\n    ({ plugins }) => plugins,\n    throwGlobalError\n  );\n}\n\nexport function getInstalledPluginsWithUpdates(): Promise<PluginInstalled[]> {\n  return Promise.all([\n    getJSON('/api/plugins/installed', { f: 'category' }),\n    getJSON('/api/plugins/updates')\n  ])\n    .then(([installed, updates]) =>\n      installed.plugins.map((plugin: PluginInstalled) => {\n        const updatePlugin: PluginInstalled = updates.plugins.find(\n          (p: PluginInstalled) => p.key === plugin.key\n        );\n        if (updatePlugin) {\n          return {\n            ...updatePlugin,\n            ...plugin,\n            updates: getLastUpdates(updatePlugin.updates).map(update =>\n              addChangelog(update, updatePlugin.updates)\n            )\n          };\n        }\n        return plugin;\n      })\n    )\n    .catch(throwGlobalError);\n}\n\nexport function getPluginUpdates(): Promise<PluginInstalled[]> {\n  return Promise.all([getJSON('/api/plugins/updates'), getJSON('/api/plugins/installed')])\n    .then(([updates, installed]) =>\n      updates.plugins.map((updatePlugin: PluginInstalled) => {\n        const updates = getLastUpdates(updatePlugin.updates).map(update =>\n          addChangelog(update, updatePlugin.updates)\n        );\n        const plugin = installed.plugins.find((p: PluginInstalled) => p.key === updatePlugin.key);\n        if (plugin) {\n          return {\n            ...plugin,\n            ...updatePlugin,\n            updates\n          };\n        }\n        return { ...updatePlugin, updates };\n      })\n    )\n    .catch(throwGlobalError);\n}\n\nexport function installPlugin(data: { key: string }): Promise<void | Response> {\n  return post('/api/plugins/install', data).catch(throwGlobalError);\n}\n\nexport function uninstallPlugin(data: { key: string }): Promise<void | Response> {\n  return post('/api/plugins/uninstall', data).catch(throwGlobalError);\n}\n\nexport function updatePlugin(data: { key: string }): Promise<void | Response> {\n  return post('/api/plugins/update', data).catch(throwGlobalError);\n}\n\nexport function cancelPendingPlugins(): Promise<void | Response> {\n  return post('/api/plugins/cancel_all').catch(throwGlobalError);\n}\n"],"sourceRoot":""}