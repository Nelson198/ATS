{"version":3,"sources":["webpack:///./node_modules/unist-util-visit/index.js","webpack:///./node_modules/lunr/lunr.js","webpack:///./node_modules/sonar-ui-common/helpers/pages.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/toInteger.js","webpack:///./node_modules/lodash/_baseFindIndex.js","webpack:///./node_modules/lodash/findLastIndex.js"],"names":["module","exports","visit","visitParents","__webpack_require__","CONTINUE","SKIP","EXIT","tree","test","visitor","reverse","node","parents","parent","length","index","children","indexOf","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","this","message","console","asString","obj","toString","clone","Object","create","keys","i","key","val","Array","isArray","slice","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","fieldRef","prototype","undefined","Set","elements","complete","intersect","other","union","contains","empty","object","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","x","Math","log","abs","Token","str","metadata","update","fn","tokenizer","map","t","toLowerCase","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","fns","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","editsRemaining","noEditNode","char","deletionNode","frame","pop","substitutionNode","insertionNode","transposeNode","charA","charB","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","m","termTokenSet","expandedTerms","presence","REQUIRED","field","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","results","matches","isNegated","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","fieldBoost","docBoost","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN","defineProperty","value","CLASS_SIDEBAR_PAGE","CLASS_WHITE_PAGE","toggleBodyClass","className","force","document","body","classList","toggle","documentElement","addSideBarClass","addWhitePageClass","removeSideBarClass","removeWhitePageClass","toNumber","INFINITY","MAX_INTEGER","toFinite","remainder","array","predicate","fromIndex","fromRight","baseFindIndex","baseIteratee","toInteger","nativeMax","max","nativeMin","min"],"mappings":"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CA,GAAAW,EAAA,IACAN,EAAArM,GACAlB,KAAAmN,KACAD,EAAAC,GA8BA,OAzBAG,EAAApL,GACAlC,KAAAkN,KAEAC,GADAU,EAAAP,EAAAQ,KAAAZ,IACA,GAEAK,EAAApM,EACAqM,EAAApL,IAFAkL,EAAApM,GAGAlB,KAAAmN,IAAAI,EAAAvN,KAAAmN,KAAAK,EAAAxN,KAAAmN,MACAD,EAAAC,IAKAI,EAAArM,GADAoM,EAAAnL,GAEAnC,KAAAkN,IAAAK,EAAAvN,KAAAkN,KACAI,EAAA7L,EACAyL,IAAAU,QAAAN,EAAA,KAKA,KAAAD,IACAH,EAAAG,EAAApG,cAAAiG,EAAAQ,OAAA,IAGAR,GAGA,SAAA3D,GACA,OAAAA,EAAA3C,OAAAvE,KAIAC,EAAAsF,SAAAG,iBAAAzF,EAAAQ,QAAA;;;;IAmBAR,EAAAyL,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,OAAA,SAAAhF,EAAAiF,GAEA,OADAjF,EAAAiF,KACAjF,GACG,IAEH,gBAAAK,GACA,GAAAA,GAAA0E,EAAA1E,EAAA7F,cAAA6F,EAAA7F,WAAA,OAAA6F,IAiBAjH,EAAAO,eAAAP,EAAAyL,uBAAA,CACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA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","file":"js/vendors-docs.1570825310815.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = visit\n\nvar visitParents = require('unist-util-visit-parents')\n\nvar CONTINUE = visitParents.CONTINUE\nvar SKIP = visitParents.SKIP\nvar EXIT = visitParents.EXIT\n\nvisit.CONTINUE = CONTINUE\nvisit.SKIP = SKIP\nvisit.EXIT = EXIT\n\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    visitor = test\n    test = null\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1]\n    var index = parent ? parent.children.indexOf(node) : null\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.4\n * Copyright (C) 2018 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.4\"\n/*!\n * lunr.utils\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === void 0 || result === '') continue\n\n      if (result instanceof Array) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2018 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.complete\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CLASS_SIDEBAR_PAGE = 'sidebar-page';\nvar CLASS_WHITE_PAGE = 'white-page';\nfunction addSideBarClass() {\n    toggleBodyClass(CLASS_SIDEBAR_PAGE, true);\n}\nexports.addSideBarClass = addSideBarClass;\nfunction addWhitePageClass() {\n    toggleBodyClass(CLASS_WHITE_PAGE, true);\n}\nexports.addWhitePageClass = addWhitePageClass;\nfunction removeSideBarClass() {\n    toggleBodyClass(CLASS_SIDEBAR_PAGE, false);\n}\nexports.removeSideBarClass = removeSideBarClass;\nfunction removeWhitePageClass() {\n    toggleBodyClass(CLASS_WHITE_PAGE, false);\n}\nexports.removeWhitePageClass = removeWhitePageClass;\nfunction toggleBodyClass(className, force) {\n    document.body.classList.toggle(className, force);\n    if (document.documentElement) {\n        document.documentElement.classList.toggle(className, force);\n    }\n}\n//# sourceMappingURL=pages.js.map","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * This method is like `_.findIndex` except that it iterates over elements\n * of `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n * // => 2\n *\n * // The `_.matches` iteratee shorthand.\n * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n * // => 0\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findLastIndex(users, ['active', false]);\n * // => 2\n *\n * // The `_.property` iteratee shorthand.\n * _.findLastIndex(users, 'active');\n * // => 0\n */\nfunction findLastIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = length - 1;\n  if (fromIndex !== undefined) {\n    index = toInteger(fromIndex);\n    index = fromIndex < 0\n      ? nativeMax(length + index, 0)\n      : nativeMin(index, length - 1);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index, true);\n}\n\nmodule.exports = findLastIndex;\n"],"sourceRoot":""}